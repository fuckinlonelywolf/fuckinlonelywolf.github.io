<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>《python3数据分析与机器学习实战》读书笔记</title>
    <url>/2020/10/26/python3%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>《python3 数据分析与机器学习实战》, 龙马高新教育编著, 北京大学出版社.</p>
<a id="more"></a>

<h1 id="新知识"><a href="#新知识" class="headerlink" title="新知识"></a>新知识</h1><ul>
<li>可以统计每列或每行的最小数或最大值所在的列或行</li>
</ul>
<h1 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h1><h2 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h2><ul>
<li>数据过滤</li>
<li>数据填充</li>
<li>插值法：拉格朗日插值法、牛顿插值法、分段插值法、样条插值法、Hermite插值法</li>
<li>回归法：把含有缺失值的变量当作因变量进行预测</li>
</ul>
<h2 id="异常值处理"><a href="#异常值处理" class="headerlink" title="异常值处理"></a>异常值处理</h2><p>异常数据也叫离群点，可通过画图一目了然<br>正常的判断方法如下：</p>
<ul>
<li>异常值可以看作是那些数据和平均值的偏差超过3倍标准差的值</li>
<li>箱型图来判断，可以直观地表示数据的分布情况，如果数据超出箱型图地上界或下界都认为是异常值</li>
</ul>
<p>教科书上的处理方法：</p>
<ul>
<li>不处理</li>
<li>视为缺失值，用处理缺失值的那些办法</li>
<li>直接删除该样本</li>
<li>平均值修正：使用前后两个观测值的平均值代替，或者使用整个数据集的平均值代替 </li>
</ul>
<h2 id="噪声的处理"><a href="#噪声的处理" class="headerlink" title="噪声的处理"></a>噪声的处理</h2><p>一般方法有分箱、聚类和回归，近年来还有小波等技术也在发展</p>
<p>糟了，这个东西在比赛里我几乎没有考虑过，倒是在时序数据中特别常见</p>
<h3 id="分箱"><a href="#分箱" class="headerlink" title="分箱"></a>分箱</h3><p>把某变量A按照一定的规则放入一些箱子(区间)内，考察每一个箱子中的数据，然后按照某种方法对各个箱子中的数据进行处理。</p>
<p>在分箱时，要考虑清楚如何分箱还有如何对每个箱子中的数据进行平滑处理。</p>
<ul>
<li>等深分箱法：将数据集按照样本行数分箱，每箱具有相同的样本个数，每箱的样本数就是箱子的深度。这种办法最简单。</li>
<li>等宽分箱法：使数据集在整个属性值的区间上平均分布，即每个箱子的区间范围是一个常量，称为箱子的宽度。</li>
<li>自定义区间，当有需要明确观察某些区间范围内的数据分布时。</li>
</ul>
<p>分箱后的平滑处理办法：</p>
<ul>
<li>按平均值平滑：对同一箱子中的数据求平均值，用平均值替代该箱子中的所有数据。</li>
<li>按边界值平滑：用距离较小的边界值替代箱中每一个数据。</li>
<li>按中值平滑：取箱子的中值，用来替代箱子中的所有数据。</li>
</ul>
<h3 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h3><p>将物理的或抽象对象的集合分组为由类似的对象组成的多个类，然后找出并清除那些落在簇之外的点，这些孤立点被称为噪声数据。</p>
<h3 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h3><p>试图发现两个相关的变量之间的变化模式，通过使数据适合一个函数来平滑数据，即通过建立数学模型来预测下一个数值，所采用的方法一般包括线性回归和非线性回归。</p>
<h2 id="数据变换"><a href="#数据变换" class="headerlink" title="数据变换"></a>数据变换</h2><p>如果数据较大，可以取对数或开方将数据压缩变小；如果数据较小可以使用平方扩大数据。在时间序列分析中，经常会使用对数变换或差分运算处理非平稳序列。</p>
<p>归一化、标准化</p>
<p>连续函数离散化，常用的离散方法如下：</p>
<ul>
<li>等宽法：将数据划分为具有相同宽度的区间，然后将数据按照其值分配到不同的区间，一个区间一个值。</li>
<li>等频法：和等宽法不同的是，每个区间的数据个数相等。</li>
<li>聚类法：用聚类分析的方法确定新的值。</li>
</ul>
<h2 id="数据规约"><a href="#数据规约" class="headerlink" title="数据规约"></a>数据规约</h2><p>是指在尽可能保持数据原貌的前提下，最大限度地精简数据量。</p>
<p>维归约：用过减少特征来压缩数据量，例如AIC准则可以通过选择最优模型来选择变量；lasso通过一定的约束条件选择变量；小波、PCA通过把原数据变换或投影到较小的空间来降低维数；分类树、随机森林通过对分类效果的影响大小筛选变量。</p>
<p>样本规约：从数据集中选出一个有代表性的样本的子集。参数方法中使用模型估计数据，就可以只存放模型参数代替存放实际数据，如回归模型和对数模型都考研用来进行参数化数据归约；而非参数方法可以使用直方图、聚类、抽样和数据立方体聚集的方法。</p>
<h1 id="关联分析"><a href="#关联分析" class="headerlink" title="关联分析"></a>关联分析</h1><p>一种无监督机器学习方法，主要用于发现大规模数据集中事物之间的依存性和关联性。挖掘数据中隐藏的有价值的关系，如频繁项集，关联规则，有利于对相关事物进行预测，也能帮助系统制定合理的决策。</p>
<h1 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h1><p><strong>train_test_split</strong><br>设置随机种子数按照比例把df分成训练和测试集</p>
<p><strong>cross_val_score</strong><br>对df进行指定次数的交叉验证 有得分 默认使用<strong>KFold</strong>和<strong>StratifiedKFold</strong></p>
<h2 id="K折交叉验证"><a href="#K折交叉验证" class="headerlink" title="K折交叉验证"></a>K折交叉验证</h2><p>是将数据集分成K份的官方给定方案，K折就是将数据集通过K次分割，使得所有的数据既在训练集中出现过，也在测试集出现过，且每次分割不会有重叠。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold</span><br><span class="line">kf = KFold(n_splits = <span class="number">2</span>) <span class="comment">#两次</span></span><br><span class="line"><span class="keyword">for</span> train, test <span class="keyword">in</span> kf.split(X):</span><br></pre></td></tr></table></figure>

<h2 id="LeaveOneOut"><a href="#LeaveOneOut" class="headerlink" title="LeaveOneOut"></a>LeaveOneOut</h2><p>KFold的一个个例，留一验证法。常用于数据集数目较少时。N个样本采用留一法，就是将样本打乱，均分为N份，轮流选择其中N-1份训练，剩余的一份做验证，计算误差平方和，最后把N次的预测误差平方和做平均作为选择最优模型结构的依据。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> LeaveOneOut</span><br><span class="line">loo = LeaveOneOut()</span><br><span class="line"><span class="keyword">for</span> train, test <span class="keyword">in</span> loo.split(X):</span><br></pre></td></tr></table></figure>

<p>大体翻完了，感觉内容说深不深，说浅不浅的，一般。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>《python机器学习》读书笔记</title>
    <url>/2020/11/28/%E3%80%8Apython%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>《python机器学习》, Abhishek Vijayvargia著, 宋格格译, 人民邮电出版社.</p>
<a id="more"></a>

<h1 id="break-continue"><a href="#break-continue" class="headerlink" title="break, continue"></a>break, continue</h1><p>这本书有我见过最好的讲<code>break</code>和<code>continue</code>的区别的地方:</p>
<h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p><code>break</code>是跳出循环。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">5</span>:</span><br><span class="line">    print(i**<span class="number">2</span>)</span><br><span class="line">    i = i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>结果输出的是1和4，每当i的值为3，将会执行中断语句并跳出循环。</p>
<h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p><code>continue</code>用于跳出循环的其余部分，并在下一次迭代中将控件传递到循环的顶部。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">5</span>:</span><br><span class="line">    i = i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(i**<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>结果输出1、4、16和25，当i值为3，他讲跳过剩余的代码并将控制转移到一下次迭代。</p>
<h1 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h1><h2 id="用read读取文件"><a href="#用read读取文件" class="headerlink" title="用read读取文件"></a>用read读取文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;my_file.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">file_content = f.read()</span><br></pre></td></tr></table></figure>

<p>读取文件后，关闭用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<h2 id="用read写入文件"><a href="#用read写入文件" class="headerlink" title="用read写入文件"></a>用read写入文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;my_file.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27;what is this?&#x27;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<h2 id="用with读取或写入"><a href="#用with读取或写入" class="headerlink" title="用with读取或写入"></a>用with读取或写入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;my_file.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure>
<h2 id="用pandas读取或写入"><a href="#用pandas读取或写入" class="headerlink" title="用pandas读取或写入"></a>用pandas读取或写入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">csv_file = pandas.read_csv(<span class="string">&#x27;something.csv&#x27;</span>)</span><br><span class="line">xls_file = pandas.read_excel(<span class="string">&#x27;something.xls&#x27;</span>)</span><br><span class="line">json_file = pandas.read_json(<span class="string">&#x27;something.json&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="常见数据清洗操作"><a href="#常见数据清洗操作" class="headerlink" title="常见数据清洗操作"></a>常见数据清洗操作</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">就记axis&#x3D;1是跨列，axis&#x3D;0是跨行。</span><br></pre></td></tr></table></figure>

<p>删掉所有有空值的行</p>
<pre><code>product_df.dropna(axis=0)</code></pre>
<p>删掉…列</p>
<pre><code>product_df.dropna(axis=1)</code></pre>
<p>删掉所有具有小于k个空值的行</p>
<pre><code>product_df.dropna(axis=0,thresh=5)</code></pre>
<p>删除全部为空的行</p>
<pre><code>product_df.dropna(axis=0,how=&#39;all&#39;)</code></pre>
<p>用1替换0</p>
<pre><code>product_df.replace(0,1)</code></pre>
<p>用0填充na</p>
<pre><code>product_df.fillna(0)</code></pre>
<p>从每个sellername那里计算成本的平均值</p>
<pre><code>product_df[&#39;price&#39;].groupby(product_df[&#39;SellerName&#39;]).mean()</code></pre>
<p>降序排序</p>
<pre><code>product_df.sort_values(by=&#39;price&#39;,ascending=False)</code></pre>
<p>lambda函数</p>
<pre><code>smallText =lambda x: x.lower()</code></pre>
<p>然后再对dataframe的任何列(shippinglocation)应用这个函数</p>
<pre><code>product_df[&#39;ShippingLocation&#39;].apply(smallText)</code></pre>
<p>返回所有费用的总和</p>
<pre><code>product_df[&#39;cost&#39;].apply(sum)</code></pre>
<p>map可以迭代，将每个项目的费用降低50</p>
<pre><code>product_df[&#39;cost&#39;].apply(lambda x: x-50)</code></pre>
<h1 id="数值特征分箱"><a href="#数值特征分箱" class="headerlink" title="数值特征分箱"></a>数值特征分箱</h1><p>将数值特征进行分箱处理，可以通过对数值特征进行分箱处理来固定来固定类别，下面将age转换为4个类别</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;age&#x27;</span>: [<span class="number">28</span>,<span class="number">27</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">15</span>,<span class="number">41</span>,<span class="number">61</span>,<span class="number">26</span>,<span class="number">85</span>,<span class="number">9</span>,<span class="number">88</span>,<span class="number">51</span>,<span class="number">26</span>,<span class="number">52</span>,<span class="number">19</span>]&#125;</span><br><span class="line">age_frame = pandas.DataFrame(data)</span><br><span class="line"></span><br><span class="line">bins = [<span class="number">0</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">60</span>, <span class="number">100</span>]</span><br><span class="line">group_names = [<span class="string">&#x27;Less Than 20 years&#x27;</span>, <span class="string">&#x27;20 to 40 years&#x27;</span>, <span class="string">&#x27;40 to 60 years&#x27;</span>, <span class="string">&#x27;60+ years&#x27;</span>]</span><br><span class="line"></span><br><span class="line">age_frame[<span class="string">&#x27;categories&#x27;</span>] = pandas.cut(age_frame[<span class="string">&#x27;age&#x27;</span>], bins, labels=group_names)</span><br><span class="line">age_frame</span><br></pre></td></tr></table></figure>

<h1 id="分类变量转换为数值"><a href="#分类变量转换为数值" class="headerlink" title="分类变量转换为数值"></a>分类变量转换为数值</h1><p>对每个类别分配一个数字，将分类变量转换为数值型特征。<code>labelencoder</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line">encoder = preprocessing.LabelEncoder()</span><br><span class="line">encoder.fit_transform([<span class="string">&quot;Delhi&quot;</span>, <span class="string">&quot;Pune&quot;</span>, <span class="string">&quot;Mumbai&quot;</span>, <span class="string">&quot;Delhi&quot;</span>])</span><br></pre></td></tr></table></figure>

<h1 id="虚拟变量"><a href="#虚拟变量" class="headerlink" title="虚拟变量"></a>虚拟变量</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dummy_frame &#x3D; pandas.get_dummies(age_frame.categories)</span><br></pre></td></tr></table></figure>

<h1 id="提取日期特征的信息"><a href="#提取日期特征的信息" class="headerlink" title="提取日期特征的信息"></a>提取日期特征的信息</h1><p>创建个数据先</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas</span><br><span class="line">startDate &#x3D; &#39;2017-07-06&#39;</span><br><span class="line">endDate &#x3D; &#39;2017-12-18&#39;</span><br><span class="line">Dates &#x3D; pandas.DataFrame(pandas.date_range(startDate, endDate),columns&#x3D;[&#39;Dates&#39;])</span><br><span class="line">Dates</span><br></pre></td></tr></table></figure>

<pre><code>Dates
0    2017-07-06
1    2017-07-07
2    2017-07-08
3    2017-07-09
4    2017-07-10
5    2017-07-11
6    2017-07-12
7    2017-07-13
8    2017-07-14
9    2017-07-15</code></pre>
<p><code>is_busyday</code>用于检查是否是工作日，得到的<code>weekmask</code>是一个由0和1组成的字符串，1表示从星期一开始的工作日。</p>
<p>类似的还有<code>is_winter</code> <code>is_morning</code> <code>is_summer</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line">Dates[<span class="string">&#x27;day&#x27;</span>] = Dates[<span class="string">&#x27;Dates&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x.day)</span><br><span class="line">Dates[<span class="string">&#x27;month&#x27;</span>] = Dates[<span class="string">&#x27;Dates&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x.month)</span><br><span class="line">Dates[<span class="string">&#x27;da_of_week&#x27;</span>] = Dates[<span class="string">&#x27;Dates&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x.weekday_name)</span><br><span class="line">Dates[<span class="string">&#x27;is_weekend&#x27;</span>] = Dates[<span class="string">&#x27;Dates&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x:numpy.is_busday(x, weekmask=<span class="string">&#x27;1111100&#x27;</span> ))</span><br><span class="line">Dates</span><br></pre></td></tr></table></figure>

<pre><code>Dates    day    month    da_of_week    is_weekend
0    2017-07-06    6    7    Thursday    True
1    2017-07-07    7    7    Friday    True
2    2017-07-08    8    7    Saturday    False
3    2017-07-09    9    7    Sunday    False
4    2017-07-10    10    7    Monday    True
5    2017-07-11    11    7    Tuesday    True
6    2017-07-12    12    7    Wednesday    True
7    2017-07-13    13    7    Thursday    True
8    2017-07-14    14    7    Friday    True
9    2017-07-15    15    7    Saturday    False
10    2017-07-16    16    7    Sunday    False</code></pre>
<h1 id="PCA"><a href="#PCA" class="headerlink" title="PCA"></a>PCA</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line">pca = PCA()</span><br><span class="line">pca.fit_transform(word_frame)</span><br></pre></td></tr></table></figure>

<p>得到：</p>
<pre><code>array([[  5.36362256e-01,  -7.07106781e-01,   7.51836139e-17,
          5.09893376e-17],
       [ -5.36362256e-01,  -6.96319551e-16,  -5.90984029e-01,
          5.09893376e-17],
       [ -5.36362256e-01,  -7.66186799e-16,   5.90984029e-01,
          5.09893376e-17],
       [  5.36362256e-01,   7.07106781e-01,   3.49246184e-17,
          5.09893376e-17]])</code></pre>
<h1 id="用于特征选择的贪心算法"><a href="#用于特征选择的贪心算法" class="headerlink" title="用于特征选择的贪心算法"></a>用于特征选择的贪心算法</h1><p>他这写的不如全子集算法好理解..<br>贪心算法是基于可获得的特征集找到最佳特征的办法，在列表中添加这个特征，并从可获取的列表中删除这个特征。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">特征值 &#x3D; 空</span><br><span class="line">可获取的特征集合 &#x3D; 所有特征</span><br><span class="line">for i &#x3D; 1 to 特征数量：</span><br><span class="line">	利用当前最佳特征和特征集对模型拟合</span><br><span class="line">	从可获取列表中删除选定的特征并将其放入特征集中</span><br><span class="line">	使用交叉验证计算误差</span><br><span class="line">选择具有最小误差的特征集</span><br><span class="line">训练误差将在每一步中得到下降，必须使用验证集确定停止点。</span><br></pre></td></tr></table></figure>

<p>这种科普类的书真是有点鸡肋 深不深浅不浅的 </p>
<p>哎好烦躁 不学了</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>2020泰迪杯数据分析职业技能大赛B题解析</title>
    <url>/2020/11/15/2020%E6%B3%B0%E8%BF%AA%E6%9D%AF%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90B%E9%A2%98%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>这篇文章是关于今晚刚刚结束的泰迪杯数据分析专业技能大赛</p>
<a id="more"></a>


<h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>大赛<a href="http://www.tipdm.org/bdrace/jljingsai/">官网</a></p>
<p>截取以下题目，数据分析还蛮有趣的 ^0^</p>
<p><strong>第一题</strong>根据附件1“城市疫情”中的数据统计各城市自首次通报确诊病例后至6月30日的每日累计确诊人数、累计治愈人数和累计死亡人数，将结果保存为“task1_1.csv”，第一行为字段名，按城市、日期、累计确诊人数、累计治愈人数、累计死亡人数的次序分别放在A列–E列。<br><strong>第二题</strong>列表给出武汉、深圳、保定每月10、25日的统计结果，并将其保存为“task1_2.csv”。</p>
<p><strong>第三题</strong>根据1的结果，并结合附件1“城市省份对照表”统计各省级行政单位按日新增和累计数据，将结果保存为“task2_1.csv”，第一行为字段名，按省份、日期、新增确诊人数、新增治愈人数、新增死亡人数、累计确诊人数、累计治愈人数、累计死亡人数的次序分别放在A列–H列。<br><strong>第四题</strong>列表给出湖北、广东、河北每月15日的统计结果，将其保存为“task2_2.csv”。</p>
<h1 id="赛题解答"><a href="#赛题解答" class="headerlink" title="赛题解答"></a>赛题解答</h1><p>想不到现在公众号现在都在推送python办公自动化，有这么火热吗..本来以为这个题是需要用到openpyxl等包的，可是做着做着就做完了，也不怎么复杂，还是正常的流程做的，肯定不是最优的解答，但应该没啥大问题，有问题电邮我！</p>
<h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p>把城市疫情的表单独摘出来命名为book1.csv</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">&quot;book1.csv&quot;</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>城市</th>
      <th>日期</th>
      <th>新增确诊</th>
      <th>新增治愈</th>
      <th>新增死亡</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>遵义</td>
      <td>2020/1/29</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>遵义</td>
      <td>2020/1/31</td>
      <td>3</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>遵义</td>
      <td>2020/2/1</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>遵义</td>
      <td>2020/2/2</td>
      <td>3</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>遵义</td>
      <td>2020/2/3</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>



<p>导入数据为df后，先按照城市分组，然后新建三个变量，分别计算分组后的和，cumsum真是厉害，省的自定义函数了。</p>
<p>所以数据分析真是个经验活，这函数能省多些事啊。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grouped = df.groupby([<span class="string">&#x27;城市&#x27;</span>])</span><br><span class="line">df[<span class="string">&quot;累计确诊人数&quot;</span>] = grouped[<span class="string">&quot;新增确诊&quot;</span>].cumsum()</span><br><span class="line">df[<span class="string">&quot;累计治愈人数&quot;</span>] = grouped[<span class="string">&quot;新增治愈&quot;</span>].cumsum()</span><br><span class="line">df[<span class="string">&quot;累计死亡人数&quot;</span>] = grouped[<span class="string">&quot;新增死亡&quot;</span>].cumsum()</span><br></pre></td></tr></table></figure>

<p>按要求保留列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = df.drop(columns = [<span class="string">&#x27;新增确诊&#x27;</span>,<span class="string">&#x27;新增治愈&#x27;</span>,<span class="string">&#x27;新增死亡&#x27;</span>])</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>城市</th>
      <th>日期</th>
      <th>累计确诊人数</th>
      <th>累计治愈人数</th>
      <th>累计死亡人数</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>遵义</td>
      <td>2020/1/29</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>遵义</td>
      <td>2020/1/31</td>
      <td>4</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>遵义</td>
      <td>2020/2/1</td>
      <td>5</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>遵义</td>
      <td>2020/2/2</td>
      <td>8</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>遵义</td>
      <td>2020/2/3</td>
      <td>9</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>


<p>保存数据，不要索引，要表头。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.to_csv(<span class="string">&#x27;task1_1.csv&#x27;</span>,header = <span class="number">1</span>, index = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = pd.read_csv(<span class="string">&quot;task1_1.csv&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>读取数据为df1，在df1的城市里寻找是武汉、深圳、保定的，返回dataframe</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df2 = df1[df1[<span class="string">&#x27;城市&#x27;</span>].isin([<span class="string">&#x27;武汉&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>,<span class="string">&#x27;保定&#x27;</span>])]</span><br><span class="line">df2.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>城市</th>
      <th>日期</th>
      <th>新增确诊</th>
      <th>新增治愈</th>
      <th>新增死亡</th>
      <th>累计新增确诊</th>
      <th>累计新增死亡</th>
      <th>累计新增治愈</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2200</th>
      <td>武汉</td>
      <td>2020/1/10</td>
      <td>41</td>
      <td>2</td>
      <td>1</td>
      <td>41</td>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <th>2201</th>
      <td>武汉</td>
      <td>2020/1/11</td>
      <td>0</td>
      <td>4</td>
      <td>0</td>
      <td>41</td>
      <td>1</td>
      <td>6</td>
    </tr>
    <tr>
      <th>2202</th>
      <td>武汉</td>
      <td>2020/1/12</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>41</td>
      <td>1</td>
      <td>7</td>
    </tr>
    <tr>
      <th>2203</th>
      <td>武汉</td>
      <td>2020/1/15</td>
      <td>0</td>
      <td>5</td>
      <td>1</td>
      <td>41</td>
      <td>2</td>
      <td>12</td>
    </tr>
    <tr>
      <th>2204</th>
      <td>武汉</td>
      <td>2020/1/16</td>
      <td>4</td>
      <td>3</td>
      <td>0</td>
      <td>45</td>
      <td>2</td>
      <td>15</td>
    </tr>
  </tbody>
</table>
</div>



<p>下面是碰巧了没有十月的，用contains可能不是一个好办法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3 = df2[df2[<span class="string">&#x27;日期&#x27;</span>].<span class="built_in">str</span>.contains(<span class="string">&#x27;/10&#x27;</span>)]</span><br><span class="line">df3 = df3.append(df2[df2[<span class="string">&#x27;日期&#x27;</span>].<span class="built_in">str</span>.contains(<span class="string">&#x27;/15&#x27;</span>)])</span><br><span class="line">df3 = df3.sort_values(by = [<span class="string">&#x27;城市&#x27;</span>,<span class="string">&#x27;日期&#x27;</span>])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3.to_csv(<span class="string">&#x27;task1_2.csv&#x27;</span>,header = <span class="number">1</span>, index = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><p>看起来很简单的事情，总是让我想到sql的key键，用python应该怎么做呢..怎么连接两个表呢..</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df4 = pd.read_csv(<span class="string">&quot;book2.csv&quot;</span>)</span><br><span class="line">df4.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>城市</th>
      <th>省份</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>阿坝州</td>
      <td>四川</td>
    </tr>
    <tr>
      <th>1</th>
      <td>阿克苏</td>
      <td>新疆</td>
    </tr>
    <tr>
      <th>2</th>
      <td>安徽-境外输入</td>
      <td>安徽</td>
    </tr>
    <tr>
      <th>3</th>
      <td>安康</td>
      <td>陕西</td>
    </tr>
    <tr>
      <th>4</th>
      <td>安庆</td>
      <td>安徽</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>城市</th>
      <th>日期</th>
      <th>累计确诊人数</th>
      <th>累计治愈人数</th>
      <th>累计死亡人数</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>遵义</td>
      <td>2020/1/29</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>遵义</td>
      <td>2020/1/31</td>
      <td>4</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>遵义</td>
      <td>2020/2/1</td>
      <td>5</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>遵义</td>
      <td>2020/2/2</td>
      <td>8</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>遵义</td>
      <td>2020/2/3</td>
      <td>9</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>


<p>遇事不决用循环..虽然笨了点但是肯定能解决问题0.0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df.index:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> df4.index:</span><br><span class="line">        <span class="keyword">if</span> df[<span class="string">&#x27;城市&#x27;</span>][i] == df4[<span class="string">&#x27;城市&#x27;</span>][j]:</span><br><span class="line">            df[<span class="string">&#x27;省份&#x27;</span>][i] = df4[<span class="string">&#x27;省份&#x27;</span>][j]</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = df.drop(columns = <span class="string">&#x27;城市&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>按要求计算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grouped = df.groupby([<span class="string">&#x27;省份&#x27;</span>])</span><br><span class="line">df[<span class="string">&quot;累计确诊人数&quot;</span>] = grouped[<span class="string">&quot;新增确诊&quot;</span>].cumsum()</span><br><span class="line">df[<span class="string">&quot;累计治愈人数&quot;</span>] = grouped[<span class="string">&quot;新增治愈&quot;</span>].cumsum()</span><br><span class="line">df[<span class="string">&quot;累计死亡人数&quot;</span>] = grouped[<span class="string">&quot;新增死亡&quot;</span>].cumsum()</span><br></pre></td></tr></table></figure>
<p>按要求的保存列</p>
<p><strong>注：没用pop然后插入那种方式移动列‘省份’</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = df.rename(columns = &#123;<span class="string">&#x27;新增确诊&#x27;</span>:<span class="string">&#x27;新增确诊人数&#x27;</span>,<span class="string">&#x27;新增治愈&#x27;</span>:<span class="string">&#x27;新增治愈人数&#x27;</span>,<span class="string">&#x27;新增死亡&#x27;</span>:<span class="string">&#x27;新增死亡人数&#x27;</span>&#125;)</span><br><span class="line">order = [<span class="string">&#x27;省份&#x27;</span>, <span class="string">&#x27;日期&#x27;</span>, <span class="string">&#x27;新增确诊人数&#x27;</span>, <span class="string">&#x27;新增治愈人数&#x27;</span>, <span class="string">&#x27;新增死亡人数&#x27;</span>, <span class="string">&#x27;累计确诊人数&#x27;</span>, <span class="string">&#x27;累计治愈人数&#x27;</span>, <span class="string">&#x27;累计死亡人数&#x27;</span>]</span><br><span class="line">df = df[order]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.to_csv(<span class="string">&#x27;task2_1.csv&#x27;</span>,header = <span class="number">1</span>, index = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><p>换汤不换药</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df5 = pd.read_csv(<span class="string">&quot;task2_1.csv&quot;</span>)</span><br><span class="line">df5 = df5[df5[<span class="string">&#x27;日期&#x27;</span>].<span class="built_in">str</span>.contains(<span class="string">&#x27;/15&#x27;</span>)]</span><br><span class="line">df5 = df5[df5[<span class="string">&#x27;省份&#x27;</span>].isin([<span class="string">&#x27;湖北&#x27;</span>,<span class="string">&#x27;广东&#x27;</span>,<span class="string">&#x27;河北&#x27;</span>])]</span><br><span class="line">df5 = df5.sort_values(by = [<span class="string">&#x27;省份&#x27;</span>,<span class="string">&#x27;日期&#x27;</span>])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df5.to_csv(<span class="string">&#x27;task2_2.csv&#x27;</span>,header = <span class="number">1</span>, index = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>methods</tag>
      </tags>
  </entry>
  <entry>
    <title>《基于plotly的可视化绘图》笔记2</title>
    <url>/2020/12/10/%E3%80%8A%E5%9F%BA%E4%BA%8Eplotly%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BB%98%E5%9B%BE%E3%80%8B%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<p>《python数据分析 基于plotly的动态可视化绘图》, 孙洋洋 王硕 邢梦来 袁泉 吴娜著, 电子工业出版社.</p>
<p>看看第一篇就够了，主要是在说基本的画图函数和多子图。<br>到这里就像是强迫症不写完难受了。</p>
<a id="more"></a>

<p>有些章节目前对我来说还是有些遥远，所以我只写<code>23496</code>章和<code>visdom</code>，av8d噶油.</p>
<h1 id="plotly与pandas"><a href="#plotly与pandas" class="headerlink" title="plotly与pandas"></a>plotly与pandas</h1><p>可以直接识别<code>pandas</code>的<code>dataframe</code>或者<code>series</code>，</p>
<h2 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h2><p>线形图、散点图、柱状图</p>
<h3 id="线形图"><a href="#线形图" class="headerlink" title="线形图"></a>线形图</h3><p><img src="https://s3.ax1x.com/2020/12/12/rVYAXD.png" alt="线形图"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py </span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">N = <span class="number">500</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">1</span>, N)</span><br><span class="line">y = np.random.randn(N)</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;x&#x27;</span>: x, <span class="string">&#x27;y&#x27;</span>: y&#125;)</span><br><span class="line">df.head()</span><br><span class="line"></span><br><span class="line">data = [</span><br><span class="line">    go.Scatter(</span><br><span class="line">        x=df[<span class="string">&#x27;x&#x27;</span>], </span><br><span class="line">        y=df[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">    )</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">url = pyplt(data)</span><br></pre></td></tr></table></figure>
<h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><p><img src="https://s3.ax1x.com/2020/12/12/rVYk6O.png" alt="散点图"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">df_50 = pd.read_csv(<span class="string">&#x27;../Chapter04/dat/000016.csv&#x27;</span>, index_col=[<span class="string">&#x27;date&#x27;</span>]) </span><br><span class="line">df_50.sort_index(inplace=<span class="literal">True</span>) <span class="comment"># 排序</span></span><br><span class="line">df_50 = df_50.loc[<span class="string">&#x27;2017-01-03&#x27;</span>:,:]</span><br><span class="line">df_300 = pd.read_csv(<span class="string">&#x27;../Chapter04/dat/000300.csv&#x27;</span>, index_col=[<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line">df_300.sort_index(inplace=<span class="literal">True</span>) </span><br><span class="line">df_300 = df_300.loc[<span class="string">&#x27;2017-01-01&#x27;</span>:]</span><br><span class="line"></span><br><span class="line">fig = &#123;</span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;x&#x27;</span>: df_50.index,</span><br><span class="line">            <span class="string">&#x27;y&#x27;</span>: df_50.volume,</span><br><span class="line">            <span class="string">&#x27;mode&#x27;</span>: <span class="string">&#x27;markers&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;上证50&#x27;</span>&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;x&#x27;</span>: df_300.index,</span><br><span class="line">            <span class="string">&#x27;y&#x27;</span>: df_300.volume,</span><br><span class="line">            <span class="string">&#x27;mode&#x27;</span>: <span class="string">&#x27;markers&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;沪深300&#x27;</span>&#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;layout&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;xaxis&#x27;</span>: &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;时间&#x27;</span>,</span><br><span class="line">                  <span class="comment"># &#x27;type&#x27;: &#x27;log&#x27;,</span></span><br><span class="line">                  &#125;,</span><br><span class="line">        <span class="string">&#x27;yaxis&#x27;</span>: &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&quot;成交量&quot;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = pyplt(fig)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h3><p><img src="https://s3.ax1x.com/2020/12/12/rVYip6.png" alt="柱状图"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  </span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">N = <span class="number">40</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">1</span>, N)</span><br><span class="line">y = np.random.randn(N)</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;x&#x27;</span>: x, <span class="string">&#x27;y&#x27;</span>: y&#125;)</span><br><span class="line">df.head()</span><br><span class="line"></span><br><span class="line">data = [</span><br><span class="line">    go.Bar(</span><br><span class="line">        x=df[<span class="string">&#x27;x&#x27;</span>], </span><br><span class="line">        y=df[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">    )</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">url = pyplt(data)</span><br></pre></td></tr></table></figure>
<h2 id="使用cufflinks绘图"><a href="#使用cufflinks绘图" class="headerlink" title="使用cufflinks绘图"></a>使用cufflinks绘图</h2><p><code>cufflinks</code>的作用是改变<code>pandas</code>默认的呈现模式<code>matplotlib</code>为<code>plotly</code><br>安装<code>cufflinks</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!pip install cufflinks -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>
<p>然后运行代码。</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> chart_studio.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, theme=<span class="string">&#x27;ggplot&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">500</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">1</span>, N)</span><br><span class="line">y = np.random.randn(N)</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;x&#x27;</span>: x, <span class="string">&#x27;y&#x27;</span>: y&#125;)</span><br><span class="line">df.set_index(<span class="string">&#x27;x&#x27;</span>,inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df.iplot(kind=<span class="string">&#x27;scatter&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/12/rVYF1K.png" alt="cufflinks"></p>
<h4 id="导入cufflinks"><a href="#导入cufflinks" class="headerlink" title="导入cufflinks"></a>导入cufflinks</h4><pre><code>import cufflinks as cf</code></pre>
<h4 id="设置pandas的输入模式"><a href="#设置pandas的输入模式" class="headerlink" title="设置pandas的输入模式"></a>设置pandas的输入模式</h4><pre><code>cf.set_config_file(offline=True, theme=&#39;ggplot&#39;)</code></pre>
<p>用<code>cf.getThemes()</code>可以获取当前版本所有可支持的主题。<br>并且<code>cf.set_config_file</code>只需要在<code>jupyter</code>里出现一次，这是个全局变量函数。</p>
<h4 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h4><pre><code>df.iplot(kind=&#39;scatter&#39;)</code></pre>
<h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The plotly.plotly module is deprecated,</span><br><span class="line">please install the chart-studio package and use the</span><br><span class="line">chart_studio.plotly module instead. </span><br></pre></td></tr></table></figure>
<p>直接在<code>jupyter</code>里输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!pip install chart-studio -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>
<p>后面都需要用<code>import chart_studio.plotly as py</code>替换<code>import plotly.plotly as py</code></p>
<h3 id="快速获取数据"><a href="#快速获取数据" class="headerlink" title="快速获取数据"></a>快速获取数据</h3><p>可以用<code>datagen</code>来获取<code>bar、pie、scatter、ohlc</code>等图的数据。等多查询<code>dir(cf.datagen)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> chart_studio.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, theme=<span class="string">&#x27;polar&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df = cf.datagen.scatter() <span class="comment"># 生成散点图数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df.iplot(kind=<span class="string">&#x27;scatter&#x27;</span>, mode=<span class="string">&#x27;markers&#x27;</span>, x=<span class="string">&#x27;x&#x27;</span>, y=<span class="string">&#x27;y&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/12/rVYCfx.png" alt="datagen"></p>
<h3 id="自定义绘图"><a href="#自定义绘图" class="headerlink" title="自定义绘图"></a>自定义绘图</h3><p>完成一些常见设置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> chart_studio.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, world_readable=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = cf.datagen.lines(n_traces=<span class="number">3</span>,columns=[<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;two&#x27;</span>,<span class="string">&#x27;three&#x27;</span>]) <span class="comment"># 生成一个3列的DataFrame（默认5列）。</span></span><br><span class="line"></span><br><span class="line">colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;black&#x27;</span>] <span class="comment"># 自定义每条线的颜色</span></span><br><span class="line">dashes = [<span class="string">&#x27;solid&#x27;</span>, <span class="string">&#x27;dash&#x27;</span>, <span class="string">&#x27;dashdot&#x27;</span>] <span class="comment"># 自定义每条线的Style</span></span><br><span class="line">widths = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>] <span class="comment"># 自定义每条线的宽度</span></span><br><span class="line"></span><br><span class="line">plot_url = df.iplot(kind=<span class="string">&#x27;scatter&#x27;</span>, mode=<span class="string">&#x27;lines&#x27;</span>, colors=colors, dash=dashes,width=widths,xTitle=<span class="string">&#x27;日期&#x27;</span>,yTitle=<span class="string">&#x27;数量&#x27;</span>,title=<span class="string">&#x27;自定义绘图&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/12/rVY9t1.png" alt="自定义绘图"></p>
<h3 id="基本图形绘制"><a href="#基本图形绘制" class="headerlink" title="基本图形绘制"></a>基本图形绘制</h3><p>可以输入<code>df.iplot?</code>进行学习。<br>下面的案例真是又简单又好看，惊了。</p>
<h4 id="柱状图-1"><a href="#柱状图-1" class="headerlink" title="柱状图"></a>柱状图</h4><p><img src="https://s3.ax1x.com/2020/12/12/rVJx0J.png" alt="柱状图"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> chart_studio.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, world_readable=<span class="literal">True</span>, theme=<span class="string">&#x27;ggplot&#x27;</span>)</span><br><span class="line">df = cf.datagen.bars()</span><br><span class="line">df.iplot(kind=<span class="string">&#x27;bar&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="层叠柱状图"><a href="#层叠柱状图" class="headerlink" title="层叠柱状图"></a>层叠柱状图</h4><p><img src="https://s3.ax1x.com/2020/12/12/rVJz79.png" alt="层叠柱状图"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> chart_studio.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, world_readable=<span class="literal">True</span>, theme=<span class="string">&#x27;ggplot&#x27;</span>)</span><br><span class="line">df = cf.datagen.bars(n_categories=<span class="number">4</span>,columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>])</span><br><span class="line"></span><br><span class="line">df.iplot(kind=<span class="string">&#x27;bar&#x27;</span>, barmode=<span class="string">&#x27;stack&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="散点图-1"><a href="#散点图-1" class="headerlink" title="散点图"></a>散点图</h4><p><img src="https://s3.ax1x.com/2020/12/12/rVJLlT.png" alt="散点图"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> chart_studio.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, world_readable=<span class="literal">True</span>)</span><br><span class="line">df = cf.datagen.lines(<span class="number">2</span>, columns=[<span class="string">&#x27;中信证券&#x27;</span>,<span class="string">&#x27;招商证券&#x27;</span>])</span><br><span class="line">df.iplot(kind=<span class="string">&#x27;scatter&#x27;</span>,mode=<span class="string">&#x27;markers&#x27;</span>,size=<span class="number">10</span>,symbol=<span class="string">&#x27;x&#x27;</span>,colorscale=<span class="string">&#x27;paired&#x27;</span>,</span><br><span class="line">                          xTitle=<span class="string">&#x27;日期&#x27;</span>,yTitle=<span class="string">&#x27;每股盈利增长率&#x27;</span>,title=<span class="string">&#x27;散点图&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="价差图"><a href="#价差图" class="headerlink" title="价差图"></a>价差图</h4><p><img src="https://s3.ax1x.com/2020/12/12/rVJO6U.png" alt="价差图"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, world_readable=<span class="literal">True</span>)</span><br><span class="line">df= cf.datagen.lines(<span class="number">2</span>,columns=[<span class="string">&#x27;万科A&#x27;</span>,<span class="string">&#x27;中粮地产&#x27;</span>])</span><br><span class="line">df.iplot(kind=<span class="string">&#x27;spread&#x27;</span>,xTitle=<span class="string">&#x27;日期&#x27;</span>,yTitle=<span class="string">&#x27;收益率&#x27;</span>,title=<span class="string">&#x27;价差图&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h4><p><img src="https://s3.ax1x.com/2020/12/12/rVYY7j.png" alt="直方图"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, world_readable=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df= cf.datagen.histogram(<span class="number">2</span>)</span><br><span class="line">df.iplot(kind=<span class="string">&#x27;histogram&#x27;</span>,opacity=<span class="number">.75</span>,title=<span class="string">&#x27;直方图&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="时序子图"><a href="#时序子图" class="headerlink" title="时序子图"></a>时序子图</h4><p><img src="https://s3.ax1x.com/2020/12/12/rVJXXF.png" alt="时序子图"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, world_readable=<span class="literal">True</span>, theme=<span class="string">&#x27;pearl&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df=cf.datagen.lines(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">df.iplot(subplots=<span class="literal">True</span>, shape=(<span class="number">4</span>,<span class="number">1</span>), shared_xaxes=<span class="literal">True</span>, fill=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h4 id="3D散点图"><a href="#3D散点图" class="headerlink" title="3D散点图"></a>3D散点图</h4><p><img src="https://s3.ax1x.com/2020/12/12/rVYpkR.png" alt="3D散点图"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cufflinks <span class="keyword">as</span> cf</span><br><span class="line"></span><br><span class="line">cf.set_config_file(offline=<span class="literal">True</span>, world_readable=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df = cf.datagen.scatter3d(<span class="number">2</span>,<span class="number">150</span>)</span><br><span class="line">df.iplot(kind=<span class="string">&#x27;scatter3d&#x27;</span>,x=<span class="string">&#x27;x&#x27;</span>,y=<span class="string">&#x27;y&#x27;</span>,z=<span class="string">&#x27;z&#x27;</span>,size=<span class="number">15</span>,categories=<span class="string">&#x27;categories&#x27;</span>,text=<span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">                             title=<span class="string">&#x27;3D散点图&#x27;</span>,colors=[<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>],width=<span class="number">0.5</span>,margin=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">                             opacity=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>艾西，<code>pandas</code>这章跟我想的还是不太一样，有点失望。<br>看来具体理解还得自己去尝试，感觉没有学到预期的东西，<code>cufflinks</code>非常方便，但可能也只是限于理解绘图函数吧。</p>
<h1 id="pyecharts绘图示例"><a href="#pyecharts绘图示例" class="headerlink" title="pyecharts绘图示例"></a>pyecharts绘图示例</h1><p>而且<code>pyecharts</code>的效果也是很好的，还可以画动态图，下面举个例子.</p>
<p><img src="https://s3.ax1x.com/2020/12/14/rnSOdH.png" alt="line"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Line, Bar</span><br><span class="line"><span class="comment"># 折线图， 日均积数</span></span><br><span class="line"></span><br><span class="line">line = Line(<span class="string">&#x27;积数按季度变化图&#x27;</span>) <span class="comment"># 图的名字</span></span><br><span class="line">xii = [<span class="string">&#x27;20160930&#x27;</span>, <span class="string">&#x27;20161231&#x27;</span>, <span class="string">&#x27;20170331&#x27;</span>, <span class="string">&#x27;20170630&#x27;</span>, <span class="string">&#x27;20170930&#x27;</span>, <span class="string">&#x27;20171231&#x27;</span>, <span class="string">&#x27;20180331&#x27;</span>, <span class="string">&#x27;20180630&#x27;</span>, <span class="string">&#x27;20180819&#x27;</span>]</span><br><span class="line">yii = [<span class="string">&#x27;13156337.93&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;39318037.75&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;59714025.06&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;63307896.71&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;120550973.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;130784306.8&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;191504839.2&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;242483066&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;266377661.4&#x27;</span>]</span><br><span class="line">line.add(<span class="string">&quot;日均积数&quot;</span>, xii, yii, mark_line=[<span class="string">&quot;average&quot;</span>], mark_point=[<span class="string">&quot;max&quot;</span>, <span class="string">&quot;min&quot;</span>])</span><br><span class="line">line.show_config()</span><br><span class="line">line.render()</span><br></pre></td></tr></table></figure>
<p>会在当前文件夹生成一个html文件。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>wx小程序重要事件之备份版本翻车</title>
    <url>/2021/05/27/wx%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%87%8D%E8%A6%81%E4%BA%8B%E4%BB%B6%E4%B9%8B%E5%A4%87%E4%BB%BD%E7%89%88%E6%9C%AC%E7%BF%BB%E8%BD%A6/</url>
    <content><![CDATA[<p>不会吧不会吧，还有人不会用<code>git</code>？</p>
<a id="more"></a>

<h1 id="what-happen"><a href="#what-happen" class="headerlink" title="what happen"></a>what happen</h1><p>事情是这样的，本月25号，也就是事发的前一天凌晨，出现了下面这个报错：</p>
<p><img src="https://z3.ax1x.com/2021/05/27/2iDdxK.png"></p>
<p>其实这个错误是默认的代理错了，在设置里改一下，不知道啥时候改的我，突然就这样了，所以懵了。</p>
<p>当时不知道啊，大晚上的意识不清晰就很莽，然后我找到了之前所谓最新的备份，直接拿过来给替换了，因为我以为是我最近复制粘贴弄错了什么地方还是那个获取用户信息的接口更新的事，反正不知道，无脑替换了，倒霉蛋开始了..</p>
<p>结果，<strong>他不是最新备份！！</strong> 后来看了看更新记录是我备份完之后可能灵感涌现，又连夜优化了一下搜索，然后一直这版唯一的没存没当回事，当时也不知道<code>git</code>，总之气的人都晕了</p>
<h1 id="what-did-I-DO"><a href="#what-did-I-DO" class="headerlink" title="what did I DO"></a>what did I DO</h1><p>UI的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view class&#x3D;&quot;head&quot;&gt;</span><br><span class="line">    &lt;text class&#x3D;&#39;text-red&#39;&gt;&lt;&#x2F;text&gt;试试输入&quot;洗衣&quot;-&gt;选择一个店铺-&gt;搜索</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;!-- 表单 --&gt;</span><br><span class="line">&lt;form bindsubmit&#x3D;&quot;formSubmit&quot;&gt;</span><br><span class="line">    &lt;!-- 2.1搜索栏--&gt;</span><br><span class="line">    &lt;view class&#x3D;&quot;cu-bar bg-color1 search&quot;&gt;</span><br><span class="line">        &lt;!-- 搜索框 --&gt;</span><br><span class="line">        &lt;view class&#x3D;&quot;search-form radius&quot;&gt;</span><br><span class="line">            &lt;text class&#x3D;&quot;cuIcon-search&quot;&gt;&lt;&#x2F;text&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;搜索商家&quot; name&#x3D;&quot;keyword&quot; value&#x3D;&quot;&#123;&#123;inputValue&#125;&#125;&quot; bindinput&#x3D;&quot;bindinput&quot; bindconfirm&#x3D;&quot;bindconfirm&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class="line">        &lt;&#x2F;view&gt;</span><br><span class="line">        &lt;!-- 搜索按钮 --&gt;</span><br><span class="line">        &lt;view class&#x3D;&quot;action&quot;&gt;</span><br><span class="line">            &lt;button class&#x3D;&quot;cu-btn bg-green shadow-blur round&quot; formType&#x3D;&quot;submit&quot;&gt;搜索&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;view&gt;</span><br><span class="line">    &lt;&#x2F;view&gt;</span><br><span class="line">    &lt;!-- 下拉联想 --&gt;</span><br><span class="line">    &lt;scroll-view scroll-y&#x3D;&quot;true&quot; class&#x3D;&quot;cu-bar bg-color1 search&quot; hidden&#x3D;&quot;&#123;&#123;hideScroll&#125;&#125;&quot; style&#x3D;&quot;&#123;&#123;arrayHeight&gt;340?&#39;height:340rpx&#39;:&#39;&#39;&#125;&#125;&quot;&gt;</span><br><span class="line">        &lt;view wx:for&#x3D;&quot;&#123;&#123;bindSource&#125;&#125;&quot; wx:key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">            &lt;view id&#x3D;&quot;&#123;&#123;item&#125;&#125;&quot; bindtap&#x3D;&quot;itemtap&quot; class&#x3D;&quot;search-form radius&quot;&gt; &#123;&#123;item&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">        &lt;&#x2F;view&gt;</span><br><span class="line">        &lt;!-- 搜索按钮 --&gt;</span><br><span class="line">    &lt;&#x2F;scroll-view&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<p>UI如下：</p>
<p><img src="https://z3.ax1x.com/2021/05/29/2AR0Ff.png" alt="界面"></p>
<p>然后<code>js</code>里就写几个事件啊，先是表单事件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;执行表单事件，点击搜索跳转</span><br><span class="line">formSubmit: function (e) &#123;</span><br><span class="line">&#x2F;&#x2F; console.log(e)</span><br><span class="line">&#x2F;&#x2F;获取表单所有name&#x3D;keyword的值 keyword就是点搜索的那个值</span><br><span class="line">var key &#x3D; e.detail.value.keyword;</span><br><span class="line">console.log(key)</span><br><span class="line">wx.navigateTo(&#123;</span><br><span class="line">    url: &#39;&#x2F;pages&#x2F;category2&#x2F;search?name&#x3D;&#39; + key,</span><br><span class="line">&#125;);</span><br><span class="line">if (key &#x3D;&#x3D; &quot;&quot;) &#123;</span><br><span class="line">    var state &#x3D; 3</span><br><span class="line">&#125;;</span><br><span class="line">wx.setStorage(&#123;</span><br><span class="line">    key: &quot;have&quot;,</span><br><span class="line">    data: state</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>然后<code>bindconfirm</code>是你键盘回车的事件，不加的话回车默认是取消键盘，加了下面这个就直接跳转。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 写好的代码段在自己手机上测试没有效果 像极了我的现状</span><br><span class="line">bindconfirm: function (e) &#123;</span><br><span class="line">console.log(e)</span><br><span class="line">var key &#x3D; e.detail.value;</span><br><span class="line">wx.navigateTo(&#123;</span><br><span class="line">    url: &#39;&#x2F;pages&#x2F;category2&#x2F;search?name&#x3D;&#39; + key,</span><br><span class="line">&#125;)&#125;,</span><br></pre></td></tr></table></figure>

<p>下面这是打字时候的事件，我理解的是就是边打边在缓存里搜索。</p>
<p>这个当时参考了几个博客，因为我一开始做搜索只看到了他们调后端的接口然后去写一个sql，那我这个数据就在前端页面上，没有接数据库啊，就用不了，所以当时上线就没做这个功能，是真的不会，真的做不了。</p>
<p>后来就是屡败屡战，先是接触到了这个联想词，下拉菜单，后来看到缓存这块就开始打缓存的注意，我倒是忘了有没有人把这两个结合起来写了，反正我这么用的，下拉菜单这些我肯定自己写不出来的，但是写几个state，然后搜一下缓存，然后再传参这个我会啊，就慢慢做出来了。</p>
<p>反正就是列几种情况，用<code>state</code>区分，虽然可能是笨办法吧…这里区分一个key值和list的情况，因为我也不知道用户会搜啥，乱七八糟的输入很多时候我就给他推荐几个商家了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;当键盘输入时，触发input事件</span><br><span class="line">bindinput: function (e) &#123;</span><br><span class="line">&#x2F;&#x2F;用户实时输入值</span><br><span class="line">var prefix &#x3D; e.detail.value</span><br><span class="line">&#x2F;&#x2F;匹配的结果</span><br><span class="line">var newSource &#x3D; []</span><br><span class="line">if (prefix !&#x3D; &quot;&quot;) &#123;</span><br><span class="line">    &#x2F;&#x2F; 对于数组array进行遍历，功能函数中的参数 &#96;e&#96;就是遍历时的数组元素值。</span><br><span class="line">    this.data.adapterSource.forEach(function (e) &#123;</span><br><span class="line">    &#x2F;&#x2F; 用户输入的字符串如果在数组中某个元素中出现，将该元素存到newSource中</span><br><span class="line">    if (e.indexOf(prefix) !&#x3D; -1) &#123;</span><br><span class="line">        &#x2F;&#x2F; console.log(1)</span><br><span class="line">        newSource.push(e)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; 如果匹配结果存在，那么将其返回，相反则返回空数组</span><br><span class="line">if (newSource.length !&#x3D; 0) &#123;</span><br><span class="line">    &#x2F;&#x2F; console.log(1111111111)</span><br><span class="line">    &#x2F;&#x2F; console.log(newSource);</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">    &#x2F;&#x2F; 匹配结果存在，显示自动联想词下拉列表</span><br><span class="line">    hideScroll: false,</span><br><span class="line">    bindSource: newSource,</span><br><span class="line">    arrayHeight: newSource.length * 71</span><br><span class="line">    &#125;)</span><br><span class="line">    if (newSource.length &#x3D;&#x3D; 1) &#123; &#x2F;&#x2F;匹配一个</span><br><span class="line">    var state &#x3D; 1</span><br><span class="line">    &#125; else &#123; &#x2F;&#x2F;匹配多个</span><br><span class="line">    var state &#x3D; 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123; &#x2F;&#x2F; 匹配无结果，不实现下拉列表</span><br><span class="line">    var state &#x3D; 3</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">    hideScroll: true,</span><br><span class="line">    bindSource: []</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">wx.setStorage(&#123;</span><br><span class="line">    key: &quot;have&quot;,</span><br><span class="line">    data: state</span><br><span class="line">    &#125;),</span><br><span class="line">    wx.setStorage(&#123;</span><br><span class="line">    key: &quot;list&quot;,</span><br><span class="line">    data: newSource</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>然后就没什么了，主要联想菜单那块大佬写的太行了，开源大佬真牛。<br>然后就是去目标页面接一下，<code>js</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onLoad: function (options) &#123;</span><br><span class="line">&#x2F;&#x2F; console.log(2222222222222222222)</span><br><span class="line">&#x2F;&#x2F; console.log(options)</span><br><span class="line">var that &#x3D; this;</span><br><span class="line">var state &#x3D; wx.getStorageSync(&#39;have&#39;);</span><br><span class="line">var list &#x3D; wx.getStorageSync(&#39;list&#39;);</span><br><span class="line">&#x2F;&#x2F; console.log(state)</span><br><span class="line"></span><br><span class="line">that.setData(&#123;</span><br><span class="line">    search: options.name,</span><br><span class="line">    state: state,</span><br><span class="line">    list: list</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F; console.log(list)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>别忘了定义<code>data</code>啊，上回那个博客写的太简单了，早把这些东西写写，我也不用折腾到两点。</p>
<p>反正用了大概四个小时，补上了这个坑，肯定是不知道当时咋写的了，但是也大差不差吧，主要是看以前的代码是真膈应人，好歹注释有够多，不然这个项目要毁于一次误操作了。</p>
<p>不过还是不行啊，微信不给过审md，真燥人呢。</p>
<p>算了。</p>
<p>赶紧<code>git</code>学起来吧，回滚！</p>
<p>2021-05-30</p>
<p>我过审了我的天呐！！人生真是阴阳相调啊！！线上终于有搜索功能了！！！直接搜<code>嘻唰唰便民卡</code>即可，也感谢对象和我吵架，不然我不会睡不着来这杠审核。哭了，太难了tmd。</p>
<p>山重水复疑无路，柳暗花明又一村！！又一村！！！</p>
<h1 id="references"><a href="#references" class="headerlink" title="references"></a>references</h1><p>后期主要看的几个</p>
<p>[1]<a href="https://www.jianshu.com/p/3f40578cb94b">https://www.jianshu.com/p/3f40578cb94b</a></p>
<p>[2]<a href="https://blog.csdn.net/qaqcfff/article/details/89578225">https://blog.csdn.net/qaqcfff/article/details/89578225</a></p>
<p>[3]<a href="https://www.color-ui.com/">https://www.color-ui.com</a></p>
<p>[4]<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">https://developers.weixin.qq.com/miniprogram/dev/framework/</a></p>
]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>山东大数据竞赛--疫情密切接触者追踪</title>
    <url>/2021/02/20/%E5%B1%B1%E4%B8%9C%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AB%9E%E8%B5%9B-%E7%96%AB%E6%83%85%E5%AF%86%E5%88%87%E6%8E%A5%E8%A7%A6%E8%80%85%E8%BF%BD%E8%B8%AA/</url>
    <content><![CDATA[<p>烂尾了烂尾了</p>
<a id="more"></a>

<h1 id="多任务"><a href="#多任务" class="headerlink" title="多任务"></a>多任务</h1><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>单核cpu处理多任务 交替执行 是并发</p>
<h2 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h2><p>多核cpu处理多任务，一个核一个任务</p>
<p>在python中用多进程来实现多任务</p>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>资源分配的最小单位，运行起来的程序。程序是静态，进程是动态</p>
<h2 id="多进程完成多任务"><a href="#多进程完成多任务" class="headerlink" title="多进程完成多任务"></a>多进程完成多任务</h2><h1 id="读取文件-改变列名"><a href="#读取文件-改变列名" class="headerlink" title="读取文件 改变列名"></a>读取文件 改变列名</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#df1 = pd.read_csv(&#x27;../data/确诊患者亮码记录.csv&#x27;, names = [&#x27;usetime&#x27;,&#x27;lat&#x27;,&#x27;lng&#x27;,&#x27;note&#x27;], header = 0)</span></span><br><span class="line">df1 = pd.read_csv(<span class="string">&#x27;../data/确诊患者亮码记录.csv&#x27;</span>)</span><br><span class="line">df2 = pd.read_csv(<span class="string">&#x27;../data/df_travel.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = pd.read_csv(<span class="string">&#x27;../data/确诊患者亮码记录.csv&#x27;</span>)</span><br><span class="line">df2 = pd.read_csv(<span class="string">&#x27;../data/df_travel.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df1 = df1.sort_values(by = [<span class="string">&#x27;亮码时间&#x27;</span>]) <span class="comment"># 排序 然后 截取 j从 当前id开始 到后面的时间和位置</span></span><br><span class="line">df2 = df2.sort_values(by = [<span class="string">&#x27;usetime&#x27;</span>])</span><br></pre></td></tr></table></figure>



<h1 id="转换成datetime"><a href="#转换成datetime" class="headerlink" title="转换成datetime"></a>转换成datetime</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1[<span class="string">&#x27;usetime&#x27;</span>] = pd.to_datetime(df1[<span class="string">&#x27;usetime&#x27;</span>])</span><br><span class="line">df2[<span class="string">&#x27;usetime&#x27;</span>] = pd.to_datetime(df2[<span class="string">&#x27;usetime&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h1 id="提取日期"><a href="#提取日期" class="headerlink" title="提取日期"></a>提取日期</h1><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = df2[<span class="string">&#x27;usetime&#x27;</span>][<span class="number">2</span>]</span><br><span class="line">re.findall(<span class="string">&#x27;(.+)\s&#x27;</span>,str1) <span class="comment">#日期</span></span><br><span class="line">re.findall(<span class="string">&#x27;\s(.+)$&#x27;</span>,str1)[<span class="number">0</span>] <span class="comment"># 时间</span></span><br></pre></td></tr></table></figure>


<p>烂尾了，做不了，太偏计算机了，人家都是<code>CPython</code>，只有我，还不会用<code>numba</code>加速，但是我也有从五个小时到四十几分钟的进步，导师又要说我不干正事耽误时间啦！！</p>
]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>python使用心得</title>
    <url>/2021/02/20/python%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<p>记录问题</p>
<p>This is a basic note on how to learn MySQL</p>
<a id="more"></a>

<h1 id="latex快速获得eps图片"><a href="#latex快速获得eps图片" class="headerlink" title="latex快速获得eps图片"></a>latex快速获得eps图片</h1><p><code>bmeps -c 1.png 1.eps</code></p>
<h1 id="jupyter回车变成两行，且编辑模式改不了的下拉菜单点不了："><a href="#jupyter回车变成两行，且编辑模式改不了的下拉菜单点不了：" class="headerlink" title="jupyter回车变成两行，且编辑模式改不了的下拉菜单点不了："></a>jupyter回车变成两行，且编辑模式改不了的下拉菜单点不了：</h1><p>是<code>Tampermonkey</code>中的“网页限制解除”脚本造成的。</p>
<h1 id="python的copy包"><a href="#python的copy包" class="headerlink" title="python的copy包"></a>python的copy包</h1><p>赋值不叫拷贝。你有一个最初的b，你如果用a=b这样写，是把ab串联起来了，改b，a也改，值和地址都改。<br>所以有个需求需要解决：需要把b完全独立开来，只读与a一样，但是写的时候不受改变。</p>
<h1 id="dict-get"><a href="#dict-get" class="headerlink" title="dict.get()"></a>dict.get()</h1><p><code>count.get(tap, 0)</code><br><code>get</code>是字典的函数<br><code>get</code>函数：如果<code>count</code>这个字典的键<code>tap</code>的值为<code>null</code>,则返回0；</p>
<h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><p><code>argsort(list)</code> 从小到大排序 返回索引</p>
<h1 id="查看自己的Ip"><a href="#查看自己的Ip" class="headerlink" title="查看自己的Ip"></a>查看自己的Ip</h1><p><code>ipconfig</code></p>
<h1 id="删除异常值"><a href="#删除异常值" class="headerlink" title="删除异常值"></a>删除异常值</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_train = df_train.drop(df_train[(df_train[<span class="string">&#x27;min_distance&#x27;</span>]&lt;<span class="number">40000</span>) &amp; (df_train[<span class="string">&#x27;price&#x27;</span>]&gt;<span class="number">4000000</span>)].index)</span><br></pre></td></tr></table></figure>

<h1 id="exec函数"><a href="#exec函数" class="headerlink" title="exec函数"></a>exec函数</h1><p>循环生成字符变量名<code>exec (&quot;temp%s=%d&quot;%(i,i))</code></p>
<h1 id="查找列表中的元素位置"><a href="#查找列表中的元素位置" class="headerlink" title="查找列表中的元素位置"></a>查找列表中的元素位置</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">40</span>, <span class="number">36</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">100</span>, <span class="number">7</span>, <span class="number">-20.5</span>, <span class="number">-999</span>]</span><br><span class="line">print( nums.index(<span class="number">2</span>) )</span><br></pre></td></tr></table></figure>
<h1 id="modin"><a href="#modin" class="headerlink" title="modin"></a>modin</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install modin[dask]</span><br><span class="line"><span class="keyword">import</span> modin.pandas <span class="keyword">as</span> pd</span><br><span class="line">df_modin = pd.read_csv(<span class="string">&quot;test.csv&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="noname1"><a href="#noname1" class="headerlink" title="noname1"></a>noname1</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(df.index)</span><br></pre></td></tr></table></figure>
<h1 id="self"><a href="#self" class="headerlink" title="self"></a>self</h1><p>摘自某评论：<br>我个人粗糙的理解 <code>self</code> 就是 “我”<br>“<code>class</code>类代码块”相当于“我家整体”，<code>self</code>==我，<code>self.name</code>=我的名字，<code>self.age</code>==我的年龄</p>
<p>“我”这个主语<strong>谁都能用</strong>，如果实例化给 “张三”，那么<code>class</code>块内的<code>self</code>就是张三了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">home</span>():</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span>   <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">             self.name=name </span><br><span class="line">             self.age=age</span><br></pre></td></tr></table></figure>

<p>实例化给张三</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_home(<span class="string">&#x27;张三&#x27;</span>,<span class="number">27</span>)</span><br></pre></td></tr></table></figure>

<p>实例化给李四</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zhangsan_home(<span class="string">&#x27;李四&#x27;</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure>

<p><code>self</code>就是家的主人，当实例化时，<code>python</code>会自动传参给<code>self</code>，<code>self==</code>我 就是个主语词，只有实例化时才会有具体的’我’</p>
<p>这个<code>self</code>特别像 语言学中的”我”，抽象来看就是一个逻辑代指，只有具体到个人才会有实际意义。<br>我都是自学，不知道对不对</p>
<h1 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h1><p>我还没用过这个方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = requests.get(url=url,headers=self.headers).content.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-python列表</title>
    <url>/2020/11/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-python%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<p>及时更新</p>
<a id="more"></a>

<p>刚学，看的懵懵懂懂的，各种名词都好专业啊..</p>
<h1 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h1><p>头一次见。</p>
<p>类似<strong>return</strong>，流程不一样，迭代中遇到<strong>yield</strong>时就返回<strong>yield</strong>后面跟着的值，下一次迭代时，从刚才迭代遇到的<strong>yield</strong>后面的代码开始执行。</p>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>删除重复元素并保持顺序不变</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>(<span class="params">items</span>):</span></span><br><span class="line">    print(items)</span><br><span class="line">    seen = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line">            seen.add(item)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">55</span>]</span><br><span class="line">    print(<span class="built_in">list</span>(fun1(a)))</span><br></pre></td></tr></table></figure>

<pre><code>[5, 7, 3, 1, 5, 0, 9, 55]
[5, 7, 3, 1, 0, 9, 55]</code></pre>
<p>和其他语言中的数组类似，每个元素都被分配一个数字，这个数字表示这个元素的位置或索引，第一个索引是0，第二个索引是1，以此类推。</p>
<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><p>不讲</p>
<h1 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h1><h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2><pre><code>var1 = [var2 for var3 in var4 if var3 == 1]</code></pre>
<p>var2:列表生成元素表达式，可以是有返回值的函数<br>for:迭代var4，将var3传入var2表达式里</p>
<h2 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h2><p>题目1:创建一个包含从1到10的平方的列表。</p>
<p><strong>传统方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    list1.append(i**<span class="number">2</span>)</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure>

<pre><code>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</code></pre>
<p><strong>列表推导式方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure>

<pre><code>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</code></pre>
<p>题目2:输出30以内能够整除3的整数，存为列表。</p>
<p><strong>传统方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        numbers.append(i)</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure>

<pre><code>[0, 3, 6, 9, 12, 15, 18, 21, 24, 27]</code></pre>
<p><strong>列表推导式方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>) <span class="keyword">if</span> i % <span class="number">3</span> ==<span class="number">0</span>]</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure>

<pre><code>[0, 3, 6, 9, 12, 15, 18, 21, 24, 27]</code></pre>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ol>
<li><p>python算法详解,张玲玲编著,人民邮电出版社</p>
</li>
<li><p>yield详解,<a href="https://blog.csdn.net/mieleizhi0522/article/details/82142856">https://blog.csdn.net/mieleizhi0522/article/details/82142856</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈博客开通过程遇到的问题</title>
    <url>/2020/10/30/%E8%B0%88%E8%B0%88%E5%8D%9A%E5%AE%A2%E5%BC%80%E9%80%9A%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>过去和现在：这里记录着创建博客过程的坑</p>
<a id="more"></a>

<h1 id="初识Hexo"><a href="#初识Hexo" class="headerlink" title="初识Hexo"></a>初识Hexo</h1><h2 id="文件介绍"><a href="#文件介绍" class="headerlink" title="文件介绍"></a>文件介绍</h2><ul>
<li>node_modules: 依赖包</li>
<li>public：存放生成的页面</li>
<li>scaffolds：生成文章的一些模板</li>
<li>source：用来存放你的文章</li>
<li>themes：主题</li>
<li>_config.yml: 博客的配置文件</li>
</ul>
<h2 id="现在来介绍常用的Hexo-命令"><a href="#现在来介绍常用的Hexo-命令" class="headerlink" title="现在来介绍常用的Hexo 命令"></a>现在来介绍常用的Hexo 命令</h2><ul>
<li>npm install hexo -g #安装Hexo</li>
<li>npm update hexo -g #升级</li>
<li>hexo init #初始化博客</li>
<li>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</li>
<li>hexo server -s #静态模式</li>
<li>hexo server -p 5000 #更改端口</li>
<li>hexo server -i 192.168.1.1 #自定义 IP</li>
<li>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</li>
</ul>
<h2 id="命令简写"><a href="#命令简写" class="headerlink" title="命令简写"></a>命令简写</h2><ul>
<li>hexo n “我的博客” == hexo new “我的博客” #新建文章</li>
<li>hexo g == hexo generate #生成</li>
<li>hexo s == hexo server #启动服务预览</li>
<li>hexo d == hexo deploy #部署</li>
</ul>
<h2 id="写完后输入"><a href="#写完后输入" class="headerlink" title="写完后输入"></a>写完后输入</h2><ul>
<li>hexo clean</li>
<li>hexo g</li>
<li>hexo d</li>
</ul>
<h2 id="默认布局"><a href="#默认布局" class="headerlink" title="默认布局"></a>默认布局</h2><p>默认用post布局。</p>
<p>Hexo 有三种默认布局：<code>post</code>、<code>page</code>和<code>draft</code>，他们分别对应不同的路径，都将储存到<code>source/_posts</code>文件夹。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<h1 id="CR-CRLF"><a href="#CR-CRLF" class="headerlink" title="CR CRLF"></a>CR CRLF</h1><p>改了<code>_config.yml</code>之后，<code>git</code>总是给一堆警告说：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">warning:LF will be replaced by CRLF in XXXX</span><br></pre></td></tr></table></figure>

<p>我们知道如果是<code>python</code>的话，就可以加上如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import warnings</span><br><span class="line">warnings.filterwarnings(&#39;ignore&#39;)</span><br></pre></td></tr></table></figure>

<p>百度了一下发现<code>windows</code>下的解决办法是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure>

<p>就是说我们改的时候弄进去了LF，而git是要都是CRLF的，所以git就警告我们一下.</p>
<p>所以眼不见心不烦..</p>
<h1 id="在华为云上布置Hexo"><a href="#在华为云上布置Hexo" class="headerlink" title="在华为云上布置Hexo"></a>在华为云上布置Hexo</h1><h2 id="域名过户"><a href="#域名过户" class="headerlink" title="域名过户"></a>域名过户</h2><p>需要先设置一个用户信息的模板，工作日审核很快的，然后是域名过户，用到通过审核的那个模板，审核也很快，我大概总共用了一天，这期间就在<code>github.io</code>上测试改动的结果，也不耽误。</p>
<h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>然后就是域名解析了。百度好像结果很少，我一开始是参考<a href="https://zhuanlan.zhihu.com/p/26625249">鱼佬都点赞的博文!</a>搭建的，解析后先输入了<code>github</code>的IP，是A类，然后再创建CNAME就不行，说有冲突，一开始以为是和默认的NS类冲突了，仔细读了一下发现是和自己刚建的A类冲突，于是乎删了<code>github</code>的IP先。</p>
<p>我的步骤：</p>
<h3 id="创建CNAME"><a href="#创建CNAME" class="headerlink" title="创建CNAME"></a>创建CNAME</h3><p><img src="https://s1.ax1x.com/2020/10/31/BUK5CD.png"></p>
<h3 id="github的IP"><a href="#github的IP" class="headerlink" title="github的IP"></a>github的IP</h3><p>这里要用github最新的IP，不然没用几分钟就404，给你发邮件让你再改。</p>
<p><img src="https://s1.ax1x.com/2020/10/31/BUMZPU.png"></p>
<p>华为云这边就没问题了，剩下两步跟参考博文一样。</p>
<h1 id="Failed-to-connect-to-github-com-port-443-connection-timed-out-error-spawn-failed"><a href="#Failed-to-connect-to-github-com-port-443-connection-timed-out-error-spawn-failed" class="headerlink" title="Failed to connect to github.com port 443:connection timed out, error: spawn failed"></a>Failed to connect to github.com port 443:connection timed out, error: spawn failed</h1><p>我出现这个问题的原因是改动了<code>_config.yml</code>的<code>symbols_count_time:</code>，都设置成<code>true</code>就好了，但是他会在主页下面也出现统计字数和时长，</p>
<p>详见<a href="https://github.com/next-theme/hexo-word-counter">官方文档</a></p>
<p><code>awl</code>：几个字算一个词儿<br><code>wpm = 275</code>：一分钟读275个词儿</p>
<p>我想知道下面这个<code>theme</code>的配置里，第三个为啥是false，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure>

<p>emm并不是这样的，后面经常改完了出现这个，最后发现实际上是网络状况不好..</p>
<h1 id="如何正确测试"><a href="#如何正确测试" class="headerlink" title="如何正确测试"></a>如何正确测试</h1><p>在<code>git bash</code>上输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s -p 1024</span><br></pre></td></tr></table></figure>

<p>然后去浏览器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:1024</span><br></pre></td></tr></table></figure>

<p><em>注：数字是我随便输的</em></p>
<p>测试没问题了再三连</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>learning notes</category>
      </categories>
      <tags>
        <tag>learn</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>数据采集方法四月小组合作--数据提取策略</title>
    <url>/2021/04/19/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E6%96%B9%E6%B3%95%E5%9B%9B%E6%9C%88%E5%B0%8F%E7%BB%84%E5%90%88%E4%BD%9C/</url>
    <content><![CDATA[<p>9.2和9.3部分</p>
<a id="more"></a>

<h1 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;https://rate.tmall.com/list_detail_rate.htm?itemId=621844857713&amp;sellerId=3251681972&amp;order=3&amp;currentPage=1&amp;pageSize=20&amp;&amp;callback=_DLP_2665_der_3_currentPage_1_pageSize_10_&quot;</span></span><br><span class="line"></span><br><span class="line">header = &#123;                                                               </span><br><span class="line">            <span class="string">&#x27;Referer&#x27;</span>: url,</span><br><span class="line">            <span class="string">&#x27;cookie&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">response = requests.get(url,headers = header).text</span><br><span class="line">response</span><br></pre></td></tr></table></figure>

<p><img src="https://z3.ax1x.com/2021/04/19/coGm2d.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">texts = []</span><br><span class="line">pat = re.<span class="built_in">compile</span>(<span class="string">&#x27;&quot;rateContent&quot;:&quot;(.*?)&quot;,&quot;fromMall&quot;&#x27;</span>)</span><br><span class="line">texts.extend(pat.findall(response))</span><br><span class="line">texts</span><br></pre></td></tr></table></figure>

<p><img src="https://z3.ax1x.com/2021/04/19/coGe8H.png"></p>
<h1 id="css选择器和xpath"><a href="#css选择器和xpath" class="headerlink" title="css选择器和xpath"></a>css选择器和xpath</h1><p><img src="https://z3.ax1x.com/2021/04/19/coGMrt.png"></p>
<p>剥洋葱</p>
<p><img src="https://z3.ax1x.com/2021/04/19/coGKKI.png"></p>
<p>一层层看</p>
<p><img src="https://z3.ax1x.com/2021/04/20/cThaJU.png"></p>
<h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = requests.get(url=url,headers=header)</span><br><span class="line">html_data = response.text</span><br><span class="line">selector = parsel.Selector(html_data)</span><br><span class="line">lis = selector.css(<span class="string">&#x27;.resblock-list.post_ulog_exposure_scroll.has-results&#x27;</span>) <span class="comment">#10个li ctrl+F</span></span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">    area = li.css(<span class="string">&#x27;.resblock-area span::text&#x27;</span>).get() <span class="comment"># 面积</span></span><br><span class="line">print(area)</span><br></pre></td></tr></table></figure>
<p><img src="https://z3.ax1x.com/2021/04/20/cThUiT.png"></p>
<h2 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = requests.get(url=url,headers=header)</span><br><span class="line">html_data = response.text</span><br><span class="line">parse_html = etree.HTML(html_data)</span><br><span class="line">lis = parse_html.xpath(<span class="string">&#x27;//li[@class=&quot;resblock-list post_ulog_exposure_scroll has-results&quot;]&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">    area = li.xpath(<span class="string">&#x27;//div[@class=&quot;resblock-area&quot;]/span/text()&#x27;</span>)[<span class="number">0</span>] <span class="comment"># 面积</span></span><br><span class="line">    print(area)</span><br></pre></td></tr></table></figure>
<p><img src="https://z3.ax1x.com/2021/04/20/cThtoV.png"></p>
<h1 id="解析json"><a href="#解析json" class="headerlink" title="解析json"></a>解析json</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">&#x27;https://server.cbaleague.com/data/team_season?matchtypeid=1&amp;ranktype=PointsAverage&#x27;</span></span><br><span class="line">header = &#123;                                                       </span><br><span class="line">            <span class="string">&#x27;Referer&#x27;</span>:url,</span><br><span class="line">            <span class="string">&#x27;user-agent&#x27;</span>:<span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; The World)&#x27;</span>&#125;</span><br><span class="line">res = requests.get(url=url,headers=header).json()</span><br><span class="line">res[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;data&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://z3.ax1x.com/2021/04/19/cTWyc9.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;data&#x27;</span>]:</span><br><span class="line">    print(i[<span class="string">&#x27;TeamCNAlias&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p><img src="https://z3.ax1x.com/2021/04/19/cTWgn1.png"></p>
<h1 id="高德API"><a href="#高德API" class="headerlink" title="高德API"></a>高德API</h1><p><img src="https://z3.ax1x.com/2021/04/20/cT42Bn.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">&#x27;https://restapi.amap.com/v3/geocode/geo&#x27;</span></span><br><span class="line">params = &#123; <span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;address&#x27;</span>: address&#125;</span><br><span class="line">res = requests.get(url, params)</span><br><span class="line">j =  json.loads(res.text)</span><br><span class="line"><span class="keyword">return</span> j[<span class="string">&#x27;geocodes&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;location&#x27;</span>]  </span><br></pre></td></tr></table></figure>

<p><img src="https://z3.ax1x.com/2021/04/20/cT4R7q.png"><br><img src="https://z3.ax1x.com/2021/04/20/cT4fA0.png"></p>
<p>感谢聆听。</p>
]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
      <tags>
        <tag>learn</tag>
        <tag>spyder</tag>
      </tags>
  </entry>
  <entry>
    <title>波士顿房价的可视化分析</title>
    <url>/2020/10/26/%E6%B3%A2%E5%A3%AB%E9%A1%BF%E6%88%BF%E4%BB%B7%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>学无止境 - 经典案例复现</p>
<a id="more"></a>

<h1 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import pandas as pd</span><br><span class="line">import seaborn as sns</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">from sklearn.datasets import load_boston</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">from sklearn.linear_model import LinearRegression</span><br><span class="line">from sklearn import metrics</span><br><span class="line">from sklearn.metrics import mean_absolute_error, mean_squared_error</span><br><span class="line">from sklearn import preprocessing</span><br><span class="line"></span><br><span class="line">import warnings#忽略错误</span><br><span class="line">warnings.filterwarnings(&#39;ignore&#39;)</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data &#x3D; load_boston()</span><br><span class="line">df &#x3D; pd.DataFrame(data.data,columns &#x3D; data.feature_names)</span><br><span class="line">df[&#39;PRICE&#39;] &#x3D; data.target</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CRIM</th>
      <th>ZN</th>
      <th>INDUS</th>
      <th>CHAS</th>
      <th>NOX</th>
      <th>RM</th>
      <th>AGE</th>
      <th>DIS</th>
      <th>RAD</th>
      <th>TAX</th>
      <th>PTRATIO</th>
      <th>B</th>
      <th>LSTAT</th>
      <th>PRICE</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.00632</td>
      <td>18.0</td>
      <td>2.31</td>
      <td>0.0</td>
      <td>0.538</td>
      <td>6.575</td>
      <td>65.2</td>
      <td>4.0900</td>
      <td>1.0</td>
      <td>296.0</td>
      <td>15.3</td>
      <td>396.90</td>
      <td>4.98</td>
      <td>24.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.02731</td>
      <td>0.0</td>
      <td>7.07</td>
      <td>0.0</td>
      <td>0.469</td>
      <td>6.421</td>
      <td>78.9</td>
      <td>4.9671</td>
      <td>2.0</td>
      <td>242.0</td>
      <td>17.8</td>
      <td>396.90</td>
      <td>9.14</td>
      <td>21.6</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0.02729</td>
      <td>0.0</td>
      <td>7.07</td>
      <td>0.0</td>
      <td>0.469</td>
      <td>7.185</td>
      <td>61.1</td>
      <td>4.9671</td>
      <td>2.0</td>
      <td>242.0</td>
      <td>17.8</td>
      <td>392.83</td>
      <td>4.03</td>
      <td>34.7</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0.03237</td>
      <td>0.0</td>
      <td>2.18</td>
      <td>0.0</td>
      <td>0.458</td>
      <td>6.998</td>
      <td>45.8</td>
      <td>6.0622</td>
      <td>3.0</td>
      <td>222.0</td>
      <td>18.7</td>
      <td>394.63</td>
      <td>2.94</td>
      <td>33.4</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0.06905</td>
      <td>0.0</td>
      <td>2.18</td>
      <td>0.0</td>
      <td>0.458</td>
      <td>7.147</td>
      <td>54.2</td>
      <td>6.0622</td>
      <td>3.0</td>
      <td>222.0</td>
      <td>18.7</td>
      <td>396.90</td>
      <td>5.33</td>
      <td>36.2</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数值型12个， 分类型2个</span></span><br><span class="line">numerical_vars = [<span class="string">&#x27;CRIM&#x27;</span>,<span class="string">&#x27;ZN&#x27;</span>,<span class="string">&#x27;INDUS&#x27;</span>,<span class="string">&#x27;NOX&#x27;</span>,<span class="string">&#x27;RM&#x27;</span>,<span class="string">&#x27;AGE&#x27;</span>,<span class="string">&#x27;DIS&#x27;</span>,<span class="string">&#x27;TAX&#x27;</span>,<span class="string">&#x27;PTRATIO&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;LSTAT&#x27;</span>,<span class="string">&#x27;PRICE&#x27;</span>]</span><br><span class="line">category_vars = [<span class="string">&#x27;CHAS&#x27;</span>,<span class="string">&#x27;RAD&#x27;</span>]</span><br><span class="line">df.shape</span><br></pre></td></tr></table></figure>




<pre><code>(506, 14)</code></pre>
<p>CRIM: 按照城镇划分的人均犯罪率</p>
<p>ZN: 超过25000平方英寸的住宅用地所占的比例</p>
<p>INDUS: 每个城镇的非零售商业面积</p>
<p>CHAS: 这是查尔斯河哑变量 (1 or 0)</p>
<p>NOX: 一氧化氮浓度 (每一百万部分)</p>
<p>RM: 每个居住的平均房间数</p>
<p>AGE: 1940年以前建造的自用住房比例</p>
<p>DIS: 有五个波士顿就业中心，这是到他们的加权距离</p>
<p>RAD: 到高速公路的指标</p>
<p>TAX: 每一万美元的房产税</p>
<p>PTRATIO: 按城镇计算的学生-教师比例</p>
<p>B: This is calculated as 1000(Bk — 0.63)², BK是黑人后代在城镇中的比例</p>
<p>LSTAT: 社会地位低的群体的占比</p>
<p>MEDV: 业主自住房的价值</p>
<h1 id="描述统计"><a href="#描述统计" class="headerlink" title="描述统计"></a>描述统计</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看有无空值</span></span><br><span class="line">df.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>




<pre><code>CRIM       0
ZN         0
INDUS      0
CHAS       0
NOX        0
RM         0
AGE        0
DIS        0
RAD        0
TAX        0
PTRATIO    0
B          0
LSTAT      0
PRICE      0
dtype: int64</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 506 entries, 0 to 505
Data columns (total 14 columns):
 #   Column   Non-Null Count  Dtype  
---  ------   --------------  -----  
 0   CRIM     506 non-null    float64
 1   ZN       506 non-null    float64
 2   INDUS    506 non-null    float64
 3   CHAS     506 non-null    float64
 4   NOX      506 non-null    float64
 5   RM       506 non-null    float64
 6   AGE      506 non-null    float64
 7   DIS      506 non-null    float64
 8   RAD      506 non-null    float64
 9   TAX      506 non-null    float64
 10  PTRATIO  506 non-null    float64
 11  B        506 non-null    float64
 12  LSTAT    506 non-null    float64
 13  PRICE    506 non-null    float64
dtypes: float64(14)
memory usage: 55.5 KB</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算常用的统计量值 -- 只看Y的</span></span><br><span class="line">df[<span class="string">&#x27;PRICE&#x27;</span>].describe()</span><br></pre></td></tr></table></figure>




<pre><code>count    506.000000
mean      22.532806
std        9.197104
min        5.000000
25%       17.025000
50%       21.200000
75%       25.000000
max       50.000000
Name: PRICE, dtype: float64</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;PRICE&#x27;</span>].hist(edgecolor = <span class="string">&#x27;black&#x27;</span>, bins = <span class="number">20</span>)</span><br><span class="line">print(<span class="string">&quot;Skewness：&#123;:0.3f&#125;&quot;</span>.<span class="built_in">format</span>(df[<span class="string">&#x27;PRICE&#x27;</span>].skew()))</span><br><span class="line">print(<span class="string">&quot;Kurtosis：&#123;:0.3f&#125;&quot;</span>.<span class="built_in">format</span>(df[<span class="string">&#x27;PRICE&#x27;</span>].kurt()))</span><br></pre></td></tr></table></figure>

<pre><code>Skewness：1.108
Kurtosis：1.495</code></pre>
<p><img src="https://s1.ax1x.com/2020/11/03/ByS6KI.png" alt="price直方图"></p>
<h1 id="变量分析"><a href="#变量分析" class="headerlink" title="变量分析"></a>变量分析</h1><h2 id="Price的分析"><a href="#Price的分析" class="headerlink" title="Price的分析"></a>Price的分析</h2><p>均值是22，最高售价是50，最低售价是5</p>
<p>峰度为1.5，接近正态分布的变量该值一般在3左右；偏态系数为1.1，正态分布的偏态系数为0</p>
<h2 id="数值变量"><a href="#数值变量" class="headerlink" title="数值变量"></a>数值变量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[numerical_vars].describe()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CRIM</th>
      <th>ZN</th>
      <th>INDUS</th>
      <th>NOX</th>
      <th>RM</th>
      <th>AGE</th>
      <th>DIS</th>
      <th>TAX</th>
      <th>PTRATIO</th>
      <th>B</th>
      <th>LSTAT</th>
      <th>PRICE</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>506.000000</td>
      <td>506.000000</td>
      <td>506.000000</td>
      <td>506.000000</td>
      <td>506.000000</td>
      <td>506.000000</td>
      <td>506.000000</td>
      <td>506.000000</td>
      <td>506.000000</td>
      <td>506.000000</td>
      <td>506.000000</td>
      <td>506.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>3.613524</td>
      <td>11.363636</td>
      <td>11.136779</td>
      <td>0.554695</td>
      <td>6.284634</td>
      <td>68.574901</td>
      <td>3.795043</td>
      <td>408.237154</td>
      <td>18.455534</td>
      <td>356.674032</td>
      <td>12.653063</td>
      <td>22.532806</td>
    </tr>
    <tr>
      <th>std</th>
      <td>8.601545</td>
      <td>23.322453</td>
      <td>6.860353</td>
      <td>0.115878</td>
      <td>0.702617</td>
      <td>28.148861</td>
      <td>2.105710</td>
      <td>168.537116</td>
      <td>2.164946</td>
      <td>91.294864</td>
      <td>7.141062</td>
      <td>9.197104</td>
    </tr>
    <tr>
      <th>min</th>
      <td>0.006320</td>
      <td>0.000000</td>
      <td>0.460000</td>
      <td>0.385000</td>
      <td>3.561000</td>
      <td>2.900000</td>
      <td>1.129600</td>
      <td>187.000000</td>
      <td>12.600000</td>
      <td>0.320000</td>
      <td>1.730000</td>
      <td>5.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>0.082045</td>
      <td>0.000000</td>
      <td>5.190000</td>
      <td>0.449000</td>
      <td>5.885500</td>
      <td>45.025000</td>
      <td>2.100175</td>
      <td>279.000000</td>
      <td>17.400000</td>
      <td>375.377500</td>
      <td>6.950000</td>
      <td>17.025000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>0.256510</td>
      <td>0.000000</td>
      <td>9.690000</td>
      <td>0.538000</td>
      <td>6.208500</td>
      <td>77.500000</td>
      <td>3.207450</td>
      <td>330.000000</td>
      <td>19.050000</td>
      <td>391.440000</td>
      <td>11.360000</td>
      <td>21.200000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>3.677083</td>
      <td>12.500000</td>
      <td>18.100000</td>
      <td>0.624000</td>
      <td>6.623500</td>
      <td>94.075000</td>
      <td>5.188425</td>
      <td>666.000000</td>
      <td>20.200000</td>
      <td>396.225000</td>
      <td>16.955000</td>
      <td>25.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>88.976200</td>
      <td>100.000000</td>
      <td>27.740000</td>
      <td>0.871000</td>
      <td>8.780000</td>
      <td>100.000000</td>
      <td>12.126500</td>
      <td>711.000000</td>
      <td>22.000000</td>
      <td>396.900000</td>
      <td>37.970000</td>
      <td>50.000000</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[numerical_vars].hist(edgecolor=<span class="string">&#x27;black&#x27;</span>, bins = <span class="number">15</span>, figsize = (<span class="number">16</span>,<span class="number">8</span>), layout = (<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure>




<p><img src="https://s1.ax1x.com/2020/11/03/ByScrt.png" alt="直方图矩阵"></p>
<p>CRIM：犯罪比例普遍不高</p>
<p>DIS：大多数房子到就业中心的距离很近</p>
<p>B：黑人的情况可能是要么这个城镇里没有黑人，要么就很多黑人</p>
<p>ZN：大房子非常少</p>
<p>LSTAT：地位低的群体在30(%)以内</p>
<p>RM：住宅的房间数主要是5、6、7</p>
<h3 id="散点图矩阵"><a href="#散点图矩阵" class="headerlink" title="散点图矩阵"></a>散点图矩阵</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.pairplot(df[numerical_vars[:<span class="number">6</span>] + [<span class="string">&#x27;PRICE&#x27;</span>]])</span><br></pre></td></tr></table></figure>







<p><img src="https://s1.ax1x.com/2020/11/03/BySRVf.png" alt="散点图矩阵"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.pairplot(df[numerical_vars[<span class="number">6</span>:]])</span><br></pre></td></tr></table></figure>







<p><img src="https://s1.ax1x.com/2020/11/03/BySsxA.png" alt="散点图矩阵"></p>
<h3 id="热力图"><a href="#热力图" class="headerlink" title="热力图"></a>热力图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#相关性分析</span></span><br><span class="line">corrmat = df.corr()</span><br><span class="line">fig, ax = plt.subplots(figsize = (<span class="number">18</span>, <span class="number">10</span>))</span><br><span class="line">sns.heatmap(corrmat, annot = <span class="literal">True</span>, annot_kws=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">12</span>&#125;)</span><br></pre></td></tr></table></figure>








<p><img src="https://s1.ax1x.com/2020/11/03/BySr2d.png" alt="png"></p>
<h2 id="类别变量"><a href="#类别变量" class="headerlink" title="类别变量"></a>类别变量</h2><p>RAD：到高速路的便捷程度 </p>
<p>CHAS：查尔斯河</p>
<h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, ax = plt.subplots(<span class="number">1</span>,<span class="number">2</span>, figsize = (<span class="number">16</span>, <span class="number">8</span>))</span><br><span class="line"><span class="keyword">for</span> var, subplot <span class="keyword">in</span> <span class="built_in">zip</span>(category_vars, ax.flatten()):</span><br><span class="line">    df[var].value_counts().plot(kind = <span class="string">&#x27;bar&#x27;</span>, ax = subplot, title = var)</span><br><span class="line">    </span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure>


<p><img src="https://s1.ax1x.com/2020/11/03/BySWa8.png" alt="热力图"></p>
<p>可见，不挨着查尔斯河的多，离着高速公路远(应该是数值越大越远叭)的也比较多</p>
<h3 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, ax = plt.subplots(<span class="number">1</span>,<span class="number">2</span>, figsize = (<span class="number">16</span>, <span class="number">8</span>))</span><br><span class="line"><span class="keyword">for</span> var, subplot <span class="keyword">in</span> <span class="built_in">zip</span>(category_vars, ax.flatten()):</span><br><span class="line">    sns.boxplot(x = var, y = <span class="string">&#x27;PRICE&#x27;</span>, data = df, ax = subplot)</span><br><span class="line">    </span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure>


<p><img src="https://s1.ax1x.com/2020/11/03/BySfIS.png" alt="png"></p>
<p>挨着查尔斯河的房价会高一些，距离高速特别远的房价也会低一些。</p>
<h3 id="条件图"><a href="#条件图" class="headerlink" title="条件图"></a>条件图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conditional_plot = sns.FacetGrid(df, col = <span class="string">&#x27;RAD&#x27;</span>, row = <span class="string">&#x27;CHAS&#x27;</span>)</span><br><span class="line">conditional_plot.<span class="built_in">map</span>(plt.scatter, <span class="string">&#x27;DIS&#x27;</span>, <span class="string">&#x27;PRICE&#x27;</span>).add_legend()</span><br></pre></td></tr></table></figure>


<p><img src="https://s1.ax1x.com/2020/11/03/ByS4Pg.png" alt="条件图"></p>
<p>根据自己的情况，有目的性的修改参数。</p>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p>[1]阿尔瓦罗·富恩特斯著,刘璋译,python数据分析师修炼之道,清华大学出版社.</p>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>visualization</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-python元组</title>
    <url>/2020/11/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-python%E5%85%83%E7%BB%84/</url>
    <content><![CDATA[<p>及时更新</p>
<a id="more"></a>



<p>元组是一种特殊的列表，特殊在元素不可以改变，不可以添加或删除。</p>
<p>好家伙，又是一个我没有用过的，我开始怀疑看这两本书对自己有用吗..</p>
<h1 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup = (<span class="string">&#x27;ak41&#x27;</span>, <span class="string">&#x27;ak42&#x27;</span>, <span class="string">&#x27;ak43&#x27;</span>, <span class="string">&#x27;ak44&#x27;</span>, <span class="string">&#x27;ak45&#x27;</span>, <span class="string">&#x27;ak46&#x27;</span>)</span><br><span class="line">tup1 = () <span class="comment">#创建空元组，所以空的有什么用呢你也没说..</span></span><br><span class="line">print(tup[<span class="number">0</span>])</span><br><span class="line">print(tup[<span class="number">0</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<pre><code>ak41
(&#39;ak41&#39;, &#39;ak42&#39;, &#39;ak43&#39;)</code></pre>
<h1 id="修改元组"><a href="#修改元组" class="headerlink" title="修改元组"></a>修改元组</h1><p>列表那套修改的方式不好使，只能拼接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup = (<span class="string">&#x27;ak41&#x27;</span>, <span class="string">&#x27;ak42&#x27;</span>, <span class="string">&#x27;ak43&#x27;</span>, <span class="string">&#x27;ak44&#x27;</span>, <span class="string">&#x27;ak45&#x27;</span>, <span class="string">&#x27;ak46&#x27;</span>)</span><br><span class="line">tup1 = (<span class="string">&#x27;ak47&#x27;</span>,) </span><br><span class="line">tup2 = tup + tup1</span><br><span class="line">print(tup2)</span><br></pre></td></tr></table></figure>

<pre><code>(&#39;ak41&#39;, &#39;ak42&#39;, &#39;ak43&#39;, &#39;ak44&#39;, &#39;ak45&#39;, &#39;ak46&#39;, &#39;ak47&#39;)</code></pre>
<h1 id="删除元组"><a href="#删除元组" class="headerlink" title="删除元组"></a>删除元组</h1><p>说了不能删除和修改，删除的话只能删除整个元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup = (<span class="string">&#x27;ak41&#x27;</span>, <span class="string">&#x27;ak42&#x27;</span>, <span class="string">&#x27;ak43&#x27;</span>, <span class="string">&#x27;ak44&#x27;</span>, <span class="string">&#x27;ak45&#x27;</span>, <span class="string">&#x27;ak46&#x27;</span>)</span><br><span class="line">tup1 = (<span class="string">&#x27;ak47&#x27;</span>,)</span><br><span class="line">tup2 = tup + tup1</span><br><span class="line">print(tup2)</span><br><span class="line"><span class="keyword">del</span> tup2</span><br></pre></td></tr></table></figure>

<pre><code>(&#39;ak41&#39;, &#39;ak42&#39;, &#39;ak43&#39;, &#39;ak44&#39;, &#39;ak45&#39;, &#39;ak46&#39;, &#39;ak47&#39;)</code></pre>
<p>真的删掉了，不信<code>print(tup2)</code>看看，会报错呀。</p>
<p>剩下的内容我可能不用看了。</p>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ol>
<li>python算法详解，张玲玲编著，人民邮电出版社</li>
</ol>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-python字典</title>
    <url>/2020/11/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-python%E5%AD%97%E5%85%B8/</url>
    <content><![CDATA[<p>及时更新</p>
<a id="more"></a>



<p> 不用介绍了</p>
<h1 id="创建并访问"><a href="#创建并访问" class="headerlink" title="创建并访问"></a>创建并访问</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;数分&#x27;</span>:<span class="string">&#x27;99&#x27;</span>,<span class="string">&#x27;大物&#x27;</span>:<span class="string">&#x27;99&#x27;</span>,<span class="string">&#x27;高代&#x27;</span>:<span class="string">&#x27;99&#x27;</span>&#125;</span><br><span class="line">print(<span class="string">&quot;数分成绩是: &quot;</span>, dict1[<span class="string">&#x27;数分&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h1 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h1><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><pre><code>dict1[&#39;统计学原理&#39;] = 99</code></pre>
<h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><pre><code>del dict1[&#39;统计学原理&#39;]</code></pre>
<h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><pre><code>dict1[&#39;统计学原理&#39;] = 100</code></pre>
<h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><pre><code>dict1</code></pre>
<h1 id="获取字典中最值"><a href="#获取字典中最值" class="headerlink" title="获取字典中最值"></a>获取字典中最值</h1><p>在对字典进行计算时，通常会用zip()将字典的键值反转过来<br>内置函数zip可以将迭代对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由其组成的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">price = &#123;</span><br><span class="line">    <span class="string">&#x27;小米&#x27;</span>: <span class="number">1599</span>,</span><br><span class="line">    <span class="string">&#x27;华为&#x27;</span>: <span class="number">3499</span>,</span><br><span class="line">    <span class="string">&#x27;三星&#x27;</span>: <span class="number">4599</span>,</span><br><span class="line">    <span class="string">&#x27;matebook&#x27;</span>: <span class="number">6299</span>,</span><br><span class="line">    <span class="string">&#x27;iphone&#x27;</span>: <span class="number">4799</span>,</span><br><span class="line">&#125;</span><br><span class="line">min_price = <span class="built_in">min</span>(<span class="built_in">zip</span>(price.values(), price.keys()))</span><br><span class="line">print(min_price)</span><br><span class="line"></span><br><span class="line">price_sorted = <span class="built_in">sorted</span>(<span class="built_in">zip</span>(price.values(), price.keys()))</span><br><span class="line">print(price_sorted)</span><br></pre></td></tr></table></figure>

<pre><code>(1599, &#39;小米&#39;)
[(1599, &#39;小米&#39;), (3499, &#39;华为&#39;), (4599, &#39;三星&#39;), (4799, &#39;iphone&#39;), (6299, &#39;matebook&#39;)]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="built_in">min</span>(price.values()))</span><br><span class="line">print(<span class="built_in">max</span>(price.values()))</span><br></pre></td></tr></table></figure>

<pre><code>1599
6299</code></pre>
<h1 id="获取字典中相同的键值对"><a href="#获取字典中相同的键值对" class="headerlink" title="获取字典中相同的键值对"></a>获取字典中相同的键值对</h1><p>可以通过keys或items来进行</p>
<ul>
<li>keys暴露所有的键，返回keys-view对象，然后并集交集差集都可以计算。所以对字典中的键进行常见的集合操作，可以直接使用keys-view对象来实现。</li>
<li>items返回键值对组成的items-views，可以找出来两个字典中有哪些键值有相同之处。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;z&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">b = &#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">5</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">6</span>&#125;</span><br><span class="line">print(a.keys() &amp; b.keys())</span><br><span class="line">print(a.keys() - b.keys())</span><br><span class="line">print(b.keys() - a.keys())</span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;y&#39;, &#39;x&#39;&#125;
&#123;&#39;z&#39;&#125;
&#123;&#39;c&#39;&#125;</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; &#123;&#39;x&#39;:1,&#39;y&#39;:2,&#39;z&#39;:3&#125;</span><br><span class="line">b &#x3D; &#123;&#39;x&#39;:1,&#39;y&#39;:2,&#39;c&#39;:6&#125;</span><br><span class="line">print(a.items() &amp; b.items())</span><br></pre></td></tr></table></figure>

<pre><code>&#123;(&#39;y&#39;, 2), (&#39;x&#39;, 1)&#125;</code></pre>
<h1 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h1><p>类似列表推导式，把中括号改为大括号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mcase = &#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;z&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">5</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">6</span>&#125;</span><br><span class="line">mcase_fre = &#123;v: k <span class="keyword">for</span> k,v <span class="keyword">in</span> mcase.items()&#125;</span><br><span class="line">print(mcase_fre)</span><br></pre></td></tr></table></figure>

<pre><code>&#123;1: &#39;x&#39;, 2: &#39;y&#39;, 3: &#39;z&#39;, 4: &#39;a&#39;, 5: &#39;b&#39;, 6: &#39;c&#39;&#125;</code></pre>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ol>
<li>python算法详解，张玲玲编著，人民邮电出版社</li>
</ol>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>零基础搭建wx小程序</title>
    <url>/2020/11/21/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BAwx%E5%B0%8F%E7%A8%8B%E5%BA%8F1-%E6%8E%A2%E7%B4%A2%E5%88%9D%E8%AF%86%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>从零搭建微信小程序的几大步骤和坑</p>
<a id="more"></a>

<p>说起这个小程序，真是今年在家待着最大的成果了，从接触到上线用了十天左右，后来又做出了搜索的功能，就是一个有点类似商城的东西，起一个分类和介绍的作用。特此回顾一下重要的环节，后续还有很多地方需要修改。</p>
<p><strong>注</strong>：数据都在页面上，纯前端，有个云开发的选项做完了才发现，可能不错。</p>
<h1 id="下载使用微信开发者工具"><a href="#下载使用微信开发者工具" class="headerlink" title="下载使用微信开发者工具"></a>下载使用微信开发者工具</h1><p>如果是个人学习用，可以创建个人主体的账号，如果是商用或者涉及公司版权，就创建企业主体的，不过好像可以迁移，不要紧。</p>
<p>这里默认已经下好了软件，APPID可以先申请一个，放在那里，创建项目时先用测试号。</p>
<h1 id="探索初识"><a href="#探索初识" class="headerlink" title="探索初识"></a>探索初识</h1><p>下面这几个自带的文件是管控整个小程序的配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.js</span><br><span class="line">app.json</span><br><span class="line">app.wxss</span><br><span class="line">project.config.json</span><br><span class="line">sitemap.json</span><br></pre></td></tr></table></figure>

<p>在<code>wxss</code>里可以引入外带的<code>wxss</code>文件，例如：</p>
<pre><code>@import &#39;/class/icon.wxss&#39;;</code></pre>
<p><code>project.config.json</code>我只是在上线的时候，需改了APPID。</p>
<p><strong>tabbar</strong>的<code>icon</code>和<code>title</code>修改在<code>app.json</code>里，创建新页面后，会生成有一个叫这个名字的文件夹：</p>
<pre><code>&quot;pages/notice/notice/notice&quot;,
&quot;pages/notice/list/list&quot;,</code></pre>
<p>建议像上面这样子创建，就会有多级的文件夹，好处多多，不过一开始我也是</p>
<pre><code>&quot;pages/index/index&quot;,
&quot;pages/fir/fir&quot;,
&quot;pages/category/category&quot;,</code></pre>
<p>这样建的，现在不推荐。</p>
<h1 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h1><p>实现功能：从B页面，点击商户C，跳转到A页面。</p>
<p>刚开始弄的时候以为一个页面需要创建一个文件夹，那么100个商户就是100个文件夹，建到几十个的时候，跟我说超过2M了不让上传…真是z了..</p>
<p>原来正确的办法是想象一个空页面A，并且设置好格式排版，每次从B页面点击商户C的时候往A页面传入该商户C的数据。</p>
<p>所以数据应该放在B页面，通过一个key确定是点了这个商品C，然后把C的数据扔到A那里，实现从B到A的跳转。</p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view wx:for&#x3D;&quot;&#123;&#123;category[curIndex].children&#125;&#125;&quot; wx:key&#x3D;&quot;index&quot; data-name2&#x3D;&quot;&#123;&#123;item.name2&#125;&#125;&quot; data-lunyu&#x3D;&quot;&#123;&#123;item.lunyu&#125;&#125;&quot; data-method&#x3D;&quot;&#123;&#123;item.method&#125;&#125;&quot; bindtap&#x3D;&quot;jumpdetail&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>这块有四个详细步骤，我都列了出来。</p>
<h2 id="在B页面存储数据"><a href="#在B页面存储数据" class="headerlink" title="在B页面存储数据"></a>在B页面存储数据</h2><pre><code>wx:for=&quot;&#123;&#123;category[curIndex].children&#125;&#125;&quot; wx:key=&quot;index&quot;</code></pre>
<p>我是循环从<code>.js</code>文件里的的<code>page-data</code>取数据，具体查阅<code>wx:for</code>， <code>wx:if</code>， <code>wx:key</code>的用法，先让你的B页面能正常显示后，再考虑页面跳转的事。</p>
<h2 id="提取商户C的数据"><a href="#提取商户C的数据" class="headerlink" title="提取商户C的数据"></a>提取商户C的数据</h2><pre><code>data-name2=&quot;&#123;&#123;item.name2&#125;&#125;&quot; data-lunyu=&quot;&#123;&#123;item.lunyu&#125;&#125;&quot; data-method=&quot;&#123;&#123;item.method&#125;&#125;&quot;</code></pre>
<p>格式是<code>data-传给js文件的变量名字=&quot;&#123;&#123;传的字段&#125;&#125;&quot;</code> 具体查阅<code>data-</code>的用法，这样就把<code>name2</code>,<code>lunyu</code>,<code>method</code>传给<code>.js</code>了。</p>
<h2 id="创建一个bindtap动作"><a href="#创建一个bindtap动作" class="headerlink" title="创建一个bindtap动作"></a>创建一个bindtap动作</h2><pre><code>bindtap=&quot;jumpdetail&quot;</code></pre>
<p>在<code>js</code>里写个叫<code>jumpdetail</code>的动作，我一开始不熟练，就用<code>console.log(e)</code>多输入几次，每点一次商户C，都会输出很多信息，在里面找你上一步<code>data-</code>传的那几个变量名字，然后用<code>let</code>取得，最后用<code>wx.navigateTo</code>把数据扔到A页面上就好了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jumpdetail: function (e) &#123;</span><br><span class="line">    &#x2F;&#x2F;console.log(e)</span><br><span class="line">    let name2 &#x3D; e.currentTarget.dataset.name2</span><br><span class="line">    let lunyu &#x3D; e.currentTarget.dataset.lunyu</span><br><span class="line">    let method &#x3D; e.currentTarget.dataset.method</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      url: &quot;&#x2F;pages&#x2F;detail&#x2F;detail?name2&#x3D;&quot; + name2 + &#39;&amp;lunyu&#x3D;&#39; + lunyu + &#39;&amp;method&#x3D;&#39; + method,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="在A页面上接收B页面传来的数据"><a href="#在A页面上接收B页面传来的数据" class="headerlink" title="在A页面上接收B页面传来的数据"></a>在A页面上接收B页面传来的数据</h2><p>此时我的A页面是叫detail，那我就在detail这个文件夹里去找<code>detail.js</code>，然后写在<code>onload</code>里加载数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onLoad: function (options) &#123;</span><br><span class="line">    var that &#x3D; this;</span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      name2: options.name2,</span><br><span class="line">      lunyu: options.lunyu,</span><br><span class="line">      method: options.method,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>然后你的<code>data</code>里要有相应的字段名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  name2: &#39;&#39;,</span><br><span class="line">  lunyu: &#39;&#39;,</span><br><span class="line">  method: &#39;&#39;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>等着被传入的数据覆盖就好了。</p>
<h1 id="点击图片放大"><a href="#点击图片放大" class="headerlink" title="点击图片放大"></a>点击图片放大</h1><p>以前用微信不知道，原来点一下图片会放大都有代码支持…嗯..这个能搜到很多，我就不贴了。</p>
<h1 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h1><h2 id="难点和思路"><a href="#难点和思路" class="headerlink" title="难点和思路"></a>难点和思路</h2><p>这个功能是后加的，因为最令我头疼的是，网上的例子，大家的搜索都是从后台获取数据的，要不就是链接sql用模糊查询的，再不然就是全是代码看不懂干了啥的，没有跟我一样是把数据放在页面上，然后搜索的，所以就算他再简单，我也不知道有啥方法…</p>
<p>这里我的解决办法是搜索缓存，我能确定对我帮了我大忙的参考网址是<a href="https://www.jianshu.com/p/3f40578cb94b">下拉列表</a>。</p>
<p>本来的难点就是用户搜索我们不知道他们会输入啥，比如有一个<code>小鸟电动车</code>和<code>大鸟电动车</code>吧，他万一输<code>电动车</code>呢，就不跟我源数据匹配了，所以用下拉列表的方法，实现两种情况。一是输入<code>电动车</code>，出现<code>小鸟电动车</code>和<code>大鸟电动车</code>，然后用户点击<code>小鸟电动车</code>，则精准搜索<code>小鸟电动车</code>，那我只用给<code>小鸟电动车</code>的结果就行；再一种是输入<code>电动车</code>，直接点搜索，那我就得建个页面，放上所有的搜索结果，即<code>小鸟电动车</code>和<code>大鸟电动车</code>；当然还有第三种情况，用户搜索<code>砖头</code>，我没有<code>砖头</code>，那就再给他返回一种情况即可，这样一共三种情况。</p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>代码方面，用到刚才那个搜索下拉列表的网址链接，然后再只需要加一个表单的动作<code>&lt;form bindsubmit=&quot;formSubmit&quot;&gt;</code>，注意是加在整个搜索栏外面，然后formsubmit就写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">formSubmit: function (e) &#123;</span><br><span class="line">  var key &#x3D; e.detail.value.keyword;</span><br><span class="line">  wx.navigateTo(&#123;</span><br><span class="line">    url: &#39;&#x2F;pages&#x2F;category2&#x2F;search?name&#x3D;&#39; + key,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>然后去写<code>search.js</code>，去接一下那边来的数据，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onLoad: function (options) &#123;</span><br><span class="line">  var state &#x3D; wx.getStorageSync(&#39;have&#39;);</span><br><span class="line">  var list &#x3D; wx.getStorageSync(&#39;list&#39;)</span><br><span class="line">  this.setData(&#123;</span><br><span class="line">    search: options.name,</span><br><span class="line">    state: state,</span><br><span class="line">    list: list</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>这里<code>state</code>我用来控制前面说的几种情况，然后针对个人情况想办法和你放在页面上的数据匹配，然后显示就可以了。</p>
<p>个人觉得最难的是搜索，其它的想做什么网上都有许多现成的。</p>
<p>如果以上说的有什么问题可以联系我。</p>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p>不太会写参考文献，好像我每篇博客的reference格式都不一样..但以下都是过程中对我有帮助的！</p>
<ol>
<li>大佬友链,<a href="http://klausvon.cn/">http://klausvon.cn</a></li>
<li>微信小程序input输入框关键字自动联想,<a href="https://www.jianshu.com/p/3f40578cb94b">https://www.jianshu.com/p/3f40578cb94b</a></li>
<li>阿里巴巴矢量图库,<a href="https://www.iconfont.cn/">https://www.iconfont.cn</a></li>
<li>MDN WEB文档,<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></li>
<li>W3Cschool,<a href="https://www.w3cschool.cn/weixinapp/">https://www.w3cschool.cn/weixinapp/</a></li>
<li>js 刷新当前页面,<a href="https://www.jianshu.com/p/d8176460efc4">https://www.jianshu.com/p/d8176460efc4</a></li>
</ol>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>前端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to MySQL -- basic exercises</title>
    <url>/2020/06/10/Introduction-to-MySQL-basic-exercise/</url>
    <content><![CDATA[<p>This is a basic exercise of learning MySQL</p>
<a id="more"></a>



<h4 id="查询没有奖金，且工资小于18000的salary-last-name"><a href="#查询没有奖金，且工资小于18000的salary-last-name" class="headerlink" title="查询没有奖金，且工资小于18000的salary, last_name"></a>查询没有奖金，且工资小于18000的salary, last_name</h4><pre><code>SELECT
    last_name,
    salary 
FROM
    employees 
WHERE
    commission_pct IS NULL 
    AND salary &lt; 18000;</code></pre>
<h4 id="查询employees表中，job-id不为’IT’或者工资为12000的员工信息"><a href="#查询employees表中，job-id不为’IT’或者工资为12000的员工信息" class="headerlink" title="查询employees表中，job_id不为’IT’或者工资为12000的员工信息"></a>查询employees表中，job_id不为’IT’或者工资为12000的员工信息</h4><pre><code>SELECT
    * 
FROM
    employees 
WHERE
    job_id &lt;&gt; &#39;IT&#39; 
    OR salary = 12000;</code></pre>
<h4 id="查看departments表的结构"><a href="#查看departments表的结构" class="headerlink" title="查看departments表的结构"></a>查看departments表的结构</h4><pre><code>desc departments</code></pre>
<h4 id="查询部门departments表中涉及到了哪些位置编号"><a href="#查询部门departments表中涉及到了哪些位置编号" class="headerlink" title="查询部门departments表中涉及到了哪些位置编号"></a>查询部门departments表中涉及到了哪些位置编号</h4><p>结合上一题，有个字段是location_id，查它。</p>
<pre><code>SELECT DISTINCT
    location_id 
FROM
    departments;</code></pre>
<h4 id="查询员工的姓名和部门号的年薪，按年薪降序，按姓名升序"><a href="#查询员工的姓名和部门号的年薪，按年薪降序，按姓名升序" class="headerlink" title="查询员工的姓名和部门号的年薪，按年薪降序，按姓名升序"></a>查询员工的姓名和部门号的年薪，按年薪降序，按姓名升序</h4><pre><code>SELECT
    last_name,
    department_id,
    salary * 12 * (1+IFNULL( commission_pct, 0 )) 年薪 
FROM
    employees 
ORDER BY
    年薪 DESC,
    last_name ASC</code></pre>
<h4 id="选择工资不在8000和17000的员工的姓名和工资，按工资降序"><a href="#选择工资不在8000和17000的员工的姓名和工资，按工资降序" class="headerlink" title="选择工资不在8000和17000的员工的姓名和工资，按工资降序"></a>选择工资不在8000和17000的员工的姓名和工资，按工资降序</h4><pre><code>SELECT
    last_name,
    salary 
FROM
    employees 
WHERE
    salary NOT BETWEEN 8000 
    AND 17000 
ORDER BY
    salary DESC;</code></pre>
<h4 id="查询邮箱中包含e的员工信息，并先按照邮箱的字节数降序，再按照部门号升序。"><a href="#查询邮箱中包含e的员工信息，并先按照邮箱的字节数降序，再按照部门号升序。" class="headerlink" title="查询邮箱中包含e的员工信息，并先按照邮箱的字节数降序，再按照部门号升序。"></a>查询邮箱中包含e的员工信息，并先按照邮箱的字节数降序，再按照部门号升序。</h4><pre><code>SELECT
    * 
FROM
    employees 
WHERE
    email LIKE &#39;%e%&#39; 
ORDER BY
    LENGTH( email ) DESC,
    department_id ASC;</code></pre>
<h4 id="显示系统时间，-日期-时间"><a href="#显示系统时间，-日期-时间" class="headerlink" title="显示系统时间， 日期+时间"></a>显示系统时间， 日期+时间</h4><pre><code>SELECT
    NOW();</code></pre>
<h4 id="查询员工号、姓名、工资，以及工资提高百分之20-后的结果，命名为new-salary"><a href="#查询员工号、姓名、工资，以及工资提高百分之20-后的结果，命名为new-salary" class="headerlink" title="查询员工号、姓名、工资，以及工资提高百分之20%后的结果，命名为new salary"></a>查询员工号、姓名、工资，以及工资提高百分之20%后的结果，命名为<code>new salary</code></h4><pre><code>SELECT employee_id, last_name, salary, salary *( 1+0.2 ) AS &#39;new salary&#39; 
FROM
    employees;</code></pre>
<h4 id="将员工的姓名按照首字母排序，并写出姓名的长度-length"><a href="#将员工的姓名按照首字母排序，并写出姓名的长度-length" class="headerlink" title="将员工的姓名按照首字母排序，并写出姓名的长度 length"></a>将员工的姓名按照首字母排序，并写出姓名的长度<code> length</code></h4><pre><code>SELECT
    last_name,
    LENGTH( last_name ),
    SUBSTR( last_name, 1, 1 ) AS 首字母 
FROM
    employees 
ORDER BY
    首字母;</code></pre>
<h4 id="做一个查询，显示下面的效果：-lt-last-name-gt-earns-lt-salary-gt-monthly-but-wants-lt-salary-3-gt"><a href="#做一个查询，显示下面的效果：-lt-last-name-gt-earns-lt-salary-gt-monthly-but-wants-lt-salary-3-gt" class="headerlink" title="做一个查询，显示下面的效果：&lt;last_name&gt; earns &lt;salary&gt; monthly but wants &lt;salary*3&gt;"></a>做一个查询，显示下面的效果：<code>&lt;last_name&gt; earns &lt;salary&gt; monthly but wants &lt;salary*3&gt;</code></h4><pre><code>SELECT
    CONCAT( last_name, &#39; earns &#39;, salary, &#39; monthly but wants &#39;, salary * 3 ) 
FROM
    employees;</code></pre>
<h4 id="使用case-when"><a href="#使用case-when" class="headerlink" title="使用case-when"></a>使用<code>case-when</code></h4><p>完成条件如下</p>
<pre><code>|   job   |  grade |
| AD_PRES |    A   |   
| ST_MAN  |    B   |   
| IT_PROG |    C   |
| SA_REP  |    D   |   
| ST_CLERK|    E   | </code></pre>
<p>产生下面的结果</p>
<pre><code>last_name  job_id  grade
king        AD_PRES A</code></pre>
<p>代码如下：</p>
<pre><code>SELECT
    last_name,
    job_id,
CASE
        job_id 
        WHEN &#39;AD_PRES&#39; THEN
        &#39;A&#39; 
        WHEN &#39;ST_MAN&#39; THEN
        &#39;B&#39; 
        WHEN &#39;IT_PROG&#39; THEN
        &#39;C&#39; 
        WHEN &#39;SA_REP&#39; THEN
        &#39;D&#39; 
        WHEN &#39;ST_CLERK&#39; THEN
        &#39;E&#39; ELSE &#39;无&#39; 
    END AS GRADE 
FROM
    employees;</code></pre>
<h4 id="查询公司员工工资的最大值、最小值、平均值、总和"><a href="#查询公司员工工资的最大值、最小值、平均值、总和" class="headerlink" title="查询公司员工工资的最大值、最小值、平均值、总和"></a>查询公司员工工资的最大值、最小值、平均值、总和</h4><pre><code>SELECT
    MAX( salary ),
    MIN( salary ),
    AVG( salary ),
    SUM( salary ) 
FROM
    employees;</code></pre>
<h4 id="查询员工表中的最大入职时间和最小入职时间的相差天数（difference）"><a href="#查询员工表中的最大入职时间和最小入职时间的相差天数（difference）" class="headerlink" title="查询员工表中的最大入职时间和最小入职时间的相差天数（difference）"></a>查询员工表中的最大入职时间和最小入职时间的相差天数（difference）</h4><pre><code>#用到一个新函数：`datediff `求两个日期之间的天数
SELECT
    DATEDIFF(
        MAX( hiredate ),
    MIN( hiredate )) diff 
FROM
    employees;</code></pre>
<h4 id="查询部门编号为90的员工个数"><a href="#查询部门编号为90的员工个数" class="headerlink" title="查询部门编号为90的员工个数"></a>查询部门编号为90的员工个数</h4><pre><code>SELECT
    COUNT(*) 
FROM
    employees 
WHERE
    department_id = 90;</code></pre>
<h4 id="查询各job-id的员工工资的最大值、最小值、平均值、总和，并按照job-id升序"><a href="#查询各job-id的员工工资的最大值、最小值、平均值、总和，并按照job-id升序" class="headerlink" title="查询各job_id的员工工资的最大值、最小值、平均值、总和，并按照job_id升序"></a>查询各<code>job_id</code>的员工工资的最大值、最小值、平均值、总和，并按照<code>job_id</code>升序</h4><pre><code>SELECT
    MAX( salary ),
    MIN( salary ),
    AVG( salary ),
    SUM( salary ) 
FROM
    employees 
GROUP BY
    job_id 
ORDER BY
    job_id ASC;</code></pre>
<h4 id="查询员工最高工资和最低工资的差距（difference）"><a href="#查询员工最高工资和最低工资的差距（difference）" class="headerlink" title="查询员工最高工资和最低工资的差距（difference）"></a>查询员工最高工资和最低工资的差距（difference）</h4><pre><code>SELECT
    (
    MAX( salary )- MIN( salary )) AS difference 
FROM
    employees;</code></pre>
<h4 id="查询各个管理者手下员工的最低工资，其中最低工资不能低于6000，-没有管理者的员工不计算在内"><a href="#查询各个管理者手下员工的最低工资，其中最低工资不能低于6000，-没有管理者的员工不计算在内" class="headerlink" title="查询各个管理者手下员工的最低工资，其中最低工资不能低于6000， 没有管理者的员工不计算在内"></a>查询各个管理者手下员工的最低工资，其中最低工资不能低于6000， 没有管理者的员工不计算在内</h4><pre><code>SELECT
    manager_id,
    MIN( salary ) AS m 
FROM
    employees 
WHERE
    manager_id 
GROUP BY
    manager_id 
HAVING
    m &gt;= 6000;</code></pre>
<h4 id="查询所有部门的编号，员工数量和工资平均值，并按照平均工资降序"><a href="#查询所有部门的编号，员工数量和工资平均值，并按照平均工资降序" class="headerlink" title="查询所有部门的编号，员工数量和工资平均值，并按照平均工资降序"></a>查询所有部门的编号，员工数量和工资平均值，并按照平均工资降序</h4><pre><code>SELECT
    department_id,
    COUNT(*),
    AVG( salary ) AS a 
FROM
    employees 
GROUP BY
    department_id 
ORDER BY
    a DESC;</code></pre>
<h4 id="选择具有各个job-id的员工人数"><a href="#选择具有各个job-id的员工人数" class="headerlink" title="选择具有各个job_id的员工人数"></a>选择具有各个<code>job_id</code>的员工人数</h4><pre><code>SELECT
    job_id,
    count(*) 
FROM
    employees 
GROUP BY
    job_id;</code></pre>
<h4 id="显示员工表的最大工资、工资平均值"><a href="#显示员工表的最大工资、工资平均值" class="headerlink" title="显示员工表的最大工资、工资平均值"></a>显示员工表的最大工资、工资平均值</h4><pre><code>SELECT
    MAX( salary ),
    AVG( salary ) 
FROM
    employees;</code></pre>
<h4 id="查询员工表的employee-id-job-id-last-name，按照department-id降序，salary升序"><a href="#查询员工表的employee-id-job-id-last-name，按照department-id降序，salary升序" class="headerlink" title="查询员工表的employee_id, job_id, last_name，按照department_id降序，salary升序"></a>查询员工表的<code>employee_id, job_id, last_name</code>，按照<code>department_id</code>降序，<code>salary</code>升序</h4><pre><code>SELECT
    employee_id, job_id, last_name
FROM
    employees
    ORDER BY
    department_id DESC, salary ASC;</code></pre>
<h4 id="查询员工表的job-id中包含a和e的，并且a在e前面"><a href="#查询员工表的job-id中包含a和e的，并且a在e前面" class="headerlink" title="查询员工表的job_id中包含a和e的，并且a在e前面"></a>查询员工表的<code>job_id</code>中包含<code>a</code>和<code>e</code>的，并且<code>a</code>在<code>e</code>前面</h4><pre><code>SELECT
    job_id 
FROM
    employees 
WHERE
    job_id LIKE &#39;%a%e%&#39;;</code></pre>
<h4 id="无题"><a href="#无题" class="headerlink" title="无题"></a>无题</h4><p>题目要求：</p>
<pre><code>已知表student，里面有id学号，name,gradeID年级编号
已知表grade, 里面有id年级编号，name年级名
已知表result,里面有id,score,sutdentNo学号
要求查询姓名、年级名、成绩</code></pre>
<p>代码：</p>
<pre><code>SELECT
    s.NAME,
    g.NAME,
    r.score 
FROM
    student s,
    grade g,
    result r 
WHERE
    s.id = r.studentNo 
    AND s.gradeID = g.id;</code></pre>
<h4 id="显示所有员工的姓名、部门号和部门名称"><a href="#显示所有员工的姓名、部门号和部门名称" class="headerlink" title="显示所有员工的姓名、部门号和部门名称"></a>显示所有员工的姓名、部门号和部门名称</h4><pre><code>SELECT
    e.last_name,
    e.department_id,
    d.department_name 
FROM
    departments d,
    employees e 
WHERE
    d.department_id = e.department_id;</code></pre>
<h4 id="查询90号部门员工的job-id和90号部门的location-id"><a href="#查询90号部门员工的job-id和90号部门的location-id" class="headerlink" title="查询90号部门员工的job_id和90号部门的location_id"></a>查询90号部门员工的<code>job_id</code>和90号部门的<code>location_id</code></h4><pre><code>SELECT
    e.job_id,
    d.location_id 
FROM
    employees e,
    departments d 
WHERE
    e.department_id = d.department_id 
    AND d.department_id = 90;</code></pre>
<h4 id="选择所有有奖金的员工的last-name-department-name-location-id-city"><a href="#选择所有有奖金的员工的last-name-department-name-location-id-city" class="headerlink" title="选择所有有奖金的员工的last_name,department_name,location_id,city"></a>选择所有有奖金的员工的<code>last_name,department_name,location_id,city</code></h4><pre><code>SELECT
    e.last_name,
    d.department_name,
    d.location_id,
    l.city 
FROM
    departments d,
    employees e,
    locations l 
WHERE
    d.department_id = e.department_id 
    AND d.location_id = l.location_id 
    AND e.commission_pct IS NOT NULL;</code></pre>
<h4 id="选择city在Toronto工作的员工的last-name-job-id-department-id-department-name"><a href="#选择city在Toronto工作的员工的last-name-job-id-department-id-department-name" class="headerlink" title="选择city在Toronto工作的员工的last_name,job_id,department_id,department_name"></a>选择<code>city</code>在<code>Toronto</code>工作的员工的<code>last_name,job_id,department_id,department_name</code></h4><pre><code>SELECT
    e.last_name,
    e.job_id,
    d.department_id,
    d.department_name 
FROM
    departments d,
    employees e,
    locations l 
WHERE
    d.department_id = e.department_id 
    AND l.city = &#39;Toronto&#39; 
    AND d.location_id = l.location_id;</code></pre>
<h4 id="查询每个工种，每个部门的部门名、工种名和最低工资"><a href="#查询每个工种，每个部门的部门名、工种名和最低工资" class="headerlink" title="查询每个工种，每个部门的部门名、工种名和最低工资"></a>查询每个工种，每个部门的部门名、工种名和最低工资</h4><pre><code>SELECT
    department_name,
    job_title,
    MIN( salary ) &#39;最低工资&#39; 
FROM
    employees e,
    departments d,
    jobs j 
WHERE
    e.department_id = d.department_id 
    AND e.job_id = j.job_id 
GROUP BY
    department_name,
    job_title;</code></pre>
<h4 id="查询每个国家下的部门个数大于2的国家编号"><a href="#查询每个国家下的部门个数大于2的国家编号" class="headerlink" title="查询每个国家下的部门个数大于2的国家编号"></a>查询每个国家下的部门个数大于2的国家编号</h4><pre><code>#有一点点难
SELECT
    country_id,
    count(*) 
FROM
    departments d,
    locations l 
WHERE
    l.location_id = d.location_id 
GROUP BY
    country_id 
HAVING
    count(*)&gt; 2;</code></pre>
<h4 id="选择指定员工的姓名、员工号，以及他的管理者的姓名和员工号"><a href="#选择指定员工的姓名、员工号，以及他的管理者的姓名和员工号" class="headerlink" title="选择指定员工的姓名、员工号，以及他的管理者的姓名和员工号"></a>选择指定员工的姓名、员工号，以及他的管理者的姓名和员工号</h4><pre><code>结果类似下面的格式：
employees    Emp#    manager Mgr#
kochhar     101        king    100</code></pre>
<p>代码如下：<br>自连接，有一点点绕</p>
<pre><code>SELECT
    e.last_name employees,
    e.employee_id &#39;Emp#&#39;,
    m.last_name manager,
    m.manager_id &#39;Mgr#&#39; 
FROM
    employees e, #自己的员工表
    employees m  #自己的管理表
WHERE
    e.manager_id = m.employee_id;</code></pre>
<h4 id="查询编号-gt-3的女神的男朋友信息，如果有则列出详细的信息，如果没有，则用null填充"><a href="#查询编号-gt-3的女神的男朋友信息，如果有则列出详细的信息，如果没有，则用null填充" class="headerlink" title="查询编号&gt;3的女神的男朋友信息，如果有则列出详细的信息，如果没有，则用null填充"></a>查询编号&gt;3的女神的男朋友信息，如果有则列出详细的信息，如果没有，则用<code>null</code>填充</h4><pre><code>SELECT
    be.id,
    be.NAME,
    bo.* 
FROM
    beauty be
    LEFT JOIN boys bo ON be.boyfriend_id = bo.id 
WHERE
    be.id &gt; 3;</code></pre>
<h4 id="查询哪个城市没有部门"><a href="#查询哪个城市没有部门" class="headerlink" title="查询哪个城市没有部门"></a>查询哪个城市没有部门</h4><pre><code>SELECT
    city,
    department_name 
FROM
    locations l
    LEFT JOIN departments d ON l.location_id = d.location_id 
WHERE
    department_name IS NULL;</code></pre>
<h4 id="查询部门名称为SAL或IT的员工信息"><a href="#查询部门名称为SAL或IT的员工信息" class="headerlink" title="查询部门名称为SAL或IT的员工信息"></a>查询部门名称为<code>SAL</code>或<code>IT</code>的员工信息</h4><pre><code>SELECT
    e.*,
    department_name 
FROM
    employees e
    LEFT JOIN departments d ON e.department_id = d.department_id 
WHERE
    department_name IN ( &#39;SAL&#39;, &#39;IT&#39; );</code></pre>
<h4 id="查询和Zlotkey相同部门的员工姓名和工资"><a href="#查询和Zlotkey相同部门的员工姓名和工资" class="headerlink" title="查询和Zlotkey相同部门的员工姓名和工资"></a>查询和<code>Zlotkey</code>相同部门的员工姓名和工资</h4><pre><code>SELECT
    last_name,
    salary 
FROM
    employees 
WHERE
    department_id IN ( SELECT department_id FROM employees WHERE last_name = &#39;Zlotkey&#39; );</code></pre>
<h4 id="查询工资比公司平均工资高的员工的员工号，姓名，工资"><a href="#查询工资比公司平均工资高的员工的员工号，姓名，工资" class="headerlink" title="查询工资比公司平均工资高的员工的员工号，姓名，工资"></a>查询工资比公司平均工资高的员工的员工号，姓名，工资</h4><pre><code>SELECT
    employee_id,
    last_name,
    salary 
FROM
    employees 
WHERE
    salary &gt; ( SELECT AVG( salary ) FROM employees );</code></pre>
<h4 id="查询各部门中工资比本部门平均工资高的员工号，姓名，工资"><a href="#查询各部门中工资比本部门平均工资高的员工号，姓名，工资" class="headerlink" title="查询各部门中工资比本部门平均工资高的员工号，姓名，工资"></a>查询各部门中工资比本部门平均工资高的员工号，姓名，工资</h4><p>这题有点难，我的话不分步反应不过来</p>
<pre><code>#1.各部门的平均工资：
SELECT
    department_id,
    AVG( salary ) 
FROM
    employees 
GROUP BY
    department_id;
#2.加一个连接查，用department_id连接两个表：
SELECT
    employee_id,
    last_name,
    salary,
    e.department_id 
FROM
    employees e
    LEFT JOIN ( SELECT department_id, AVG( salary ) ag_sal FROM employees GROUP BY department_id ) d ON e.department_id = d.department_id 
WHERE
    e.salary &gt; d.ag_sal;</code></pre>
<h4 id="查询和姓名中包含-字母u的员工-在相同部门的员工-的员工号和姓名"><a href="#查询和姓名中包含-字母u的员工-在相同部门的员工-的员工号和姓名" class="headerlink" title="查询和姓名中包含 字母u的员工 在相同部门的员工 的员工号和姓名"></a>查询和姓名中包含 字母<code>u</code>的员工 在相同部门的员工 的员工号和姓名</h4><pre><code>#1.上一个会做，这个就也还行，先查字母u的员工：
SELECT
    employee_id,
    last_name 
FROM
    employees 
WHERE
    last_name LIKE &#39;%u%&#39;;
#2.和上面这个在一个部门的员工：
SELECT
    employee_id,
    last_name 
FROM
    employees 
WHERE
    department_id IN ( SELECT department_id FROM employees WHERE last_name LIKE &#39;%u%&#39; );</code></pre>
<h4 id="查询在部门的location-id为1700的部门工作的员工的员工号"><a href="#查询在部门的location-id为1700的部门工作的员工的员工号" class="headerlink" title="查询在部门的location_id为1700的部门工作的员工的员工号"></a>查询在部门的<code>location_id</code>为1700的部门工作的员工的员工号</h4><pre><code>SELECT
    employee_id 
FROM
    employees 
WHERE
    department_id IN ( SELECT department_id FROM departments WHERE location_id = 1700 );</code></pre>
<h4 id="查询管理者是k-ing的员工姓名和工资"><a href="#查询管理者是k-ing的员工姓名和工资" class="headerlink" title="查询管理者是k_ing的员工姓名和工资"></a>查询管理者是<code>k_ing</code>的员工姓名和工资</h4><pre><code>SELECT
    last_name,
    salary 
FROM
    employees 
WHERE
    manager_id IN ( SELECT employee_id FROM employees WHERE last_name = &#39;K_ing&#39; );</code></pre>
<h4 id="查询工资最高的员工的姓名，要求first和last-name显示为一列，列名为姓名"><a href="#查询工资最高的员工的姓名，要求first和last-name显示为一列，列名为姓名" class="headerlink" title="查询工资最高的员工的姓名，要求first和last_name显示为一列，列名为姓名"></a>查询工资最高的员工的姓名，要求first和last_name显示为一列，列名为姓名</h4><pre><code>SELECT
    CONCAT( first_name, last_name ) &#39;姓名&#39;,
    salary 
FROM
    employees 
WHERE
    salary = ( SELECT MAX( salary ) FROM employees );


已知表stuinfo                    已知表age
id        学号                    id            年级编号
name    姓名                    gradeName    年级名称
email    邮箱
gradeID    年级编号
sex        性别
age        年龄</code></pre>
<h4 id="查询所有学员的邮箱的用户名"><a href="#查询所有学员的邮箱的用户名" class="headerlink" title="查询所有学员的邮箱的用户名"></a>查询所有学员的邮箱的用户名</h4><pre><code>#即查询@前的字符
SELECT
    SUBSTR( email, 1, INSTR( email, &#39;@&#39; )- 1 ) &#39;用户名&#39; 
FROM
    stuinfo;</code></pre>
<h4 id="查询男生和女生的个数"><a href="#查询男生和女生的个数" class="headerlink" title="查询男生和女生的个数"></a>查询男生和女生的个数</h4><pre><code>SELECT
    sex,
    COUNT(*) 
FROM
    stuinfo 
GROUP BY
    sex;</code></pre>
<h4 id="查询年龄-gt-18岁的所有学生的姓名和年级名称"><a href="#查询年龄-gt-18岁的所有学生的姓名和年级名称" class="headerlink" title="查询年龄&gt;18岁的所有学生的姓名和年级名称"></a>查询年龄&gt;18岁的所有学生的姓名和年级名称</h4><pre><code>SELECT
    name,
    gradeName 
FROM
    stuinfo s
    INNER JOIN grade g ON s.gradeId = g.id 
WHERE
    age &gt; 18;</code></pre>
<h4 id="查询哪个年纪的学生最小年龄-gt-20岁"><a href="#查询哪个年纪的学生最小年龄-gt-20岁" class="headerlink" title="查询哪个年纪的学生最小年龄&gt;20岁"></a>查询哪个年纪的学生最小年龄&gt;20岁</h4><pre><code>SELECT
    MIN( age ),
    gradeid 
FROM
    stuinfo 
GROUP BY
    gradeid 
HAVING
    MIN( age )&gt; 20;</code></pre>
<h4 id="总结一般的查询语句"><a href="#总结一般的查询语句" class="headerlink" title="总结一般的查询语句"></a>总结一般的查询语句</h4><pre><code>select 查询列表
from 表
连接类型 join 表2
on 连接条件
where 筛选条件
group by 分组列表
having 分组后的筛选
order by 排序列表
limit 偏移、条目数    </code></pre>
<h4 id="运行以下脚本创建表my-employees"><a href="#运行以下脚本创建表my-employees" class="headerlink" title="运行以下脚本创建表my_employees"></a>运行以下脚本创建表my_employees</h4><pre><code>USE myemployees;
CREATE TABLE my_employees (
    id INT ( 10 ),
    first_name VARCHAR ( 10 ),
    last_name VARCHAR ( 10 ),
    userid VARCHAR ( 10 ),
salary DOUBLE ( 10, 2 ));
CREATE TABLE users ( id INT, userid VARCHAR ( 10 ), department_id INT );</code></pre>
<h4 id="显示表my-employees的结构"><a href="#显示表my-employees的结构" class="headerlink" title="显示表my_employees的结构"></a>显示表my_employees的结构</h4><pre><code>desc my_employees;</code></pre>
<h4 id="向表my-employees中插入以下数据"><a href="#向表my-employees中插入以下数据" class="headerlink" title="向表my_employees中插入以下数据"></a>向表my_employees中插入以下数据</h4><pre><code>#方式一：
INSERT INTO my_employees
VALUES
    ( 1, &#39;patel&#39;, &#39;ralph&#39;, &#39;rpatel&#39;, 895 ),
    ( 2, &#39;dancs&#39;, &#39;betty&#39;, &#39;bdancs&#39;, 860 ),
    ( 3, &#39;biri&#39;, &#39;ben&#39;, &#39;bbiri&#39;, 1100 ),
    ( 4, &#39;newman&#39;, &#39;chad&#39;, &#39;cnewman&#39;, 750 ),
    ( 5, &#39;ropeburn&#39;, &#39;audrey&#39;, &#39;aropebur&#39;, 1550 );
#方式二：
INSERT INTO my_employees SELECT
1,
&#39;patel&#39;,
&#39;ralph&#39;,
&#39;rpatel&#39;,
895 UNION
SELECT
    2,
    &#39;dancs&#39;,
    &#39;betty&#39;,
    &#39;bdancs&#39;,
    860 UNION
SELECT
    3,
    &#39;biri&#39;,
    &#39;ben&#39;,
    &#39;bbiri&#39;,
    1100 UNION
SELECT
    4,
    &#39;newman&#39;,
    &#39;chad&#39;,
    &#39;cnewman&#39;,
    750 UNION
SELECT
    5,
    &#39;ropeburn&#39;,
    &#39;audrey&#39;,
    &#39;aropebur&#39;,
    1550;</code></pre>
<h4 id="向表users中插入以下数据"><a href="#向表users中插入以下数据" class="headerlink" title="向表users中插入以下数据"></a>向表users中插入以下数据</h4><pre><code>INSERT INTO users
VALUES
    ( 1, &#39;rpatel&#39;, 10 ),
    ( 2, &#39;bdancs&#39;, 10 ),
    ( 3, &#39;bbiri&#39;, 20 ),
    ( 4, &#39;cnewman&#39;, 30 ),
    ( 5, &#39;aropebur&#39;, 40 );</code></pre>
<h4 id="将3号员工的last-name修改为“drelxer”"><a href="#将3号员工的last-name修改为“drelxer”" class="headerlink" title="将3号员工的last_name修改为“drelxer”"></a>将3号员工的last_name修改为“drelxer”</h4><pre><code>UPDATE my_employees 
SET last_name = &quot;drelxer&quot; 
WHERE
    id = 3;</code></pre>
<h4 id="将所有工资少与900的员工的工资修改为1000"><a href="#将所有工资少与900的员工的工资修改为1000" class="headerlink" title="将所有工资少与900的员工的工资修改为1000"></a>将所有工资少与900的员工的工资修改为1000</h4><pre><code>UPDATE my_employees 
SET salary = 1000 
WHERE
    salary &lt; 900;</code></pre>
<h4 id="将userid为bbiri的user表和my-employees表的记录全部删除"><a href="#将userid为bbiri的user表和my-employees表的记录全部删除" class="headerlink" title="将userid为bbiri的user表和my_employees表的记录全部删除"></a>将userid为bbiri的user表和my_employees表的记录全部删除</h4><pre><code>DELETE u,
e 
FROM
    users u
    JOIN my_employees e ON u.userid = e.userid 
WHERE
    u.userid = &quot;bbiri&quot;;</code></pre>
<h4 id="删除所有的数据"><a href="#删除所有的数据" class="headerlink" title="删除所有的数据"></a>删除所有的数据</h4><pre><code>DELETE 
FROM    
    my_employees;
DELETE 
FROM
    users;</code></pre>
<h4 id="检查所做的修正"><a href="#检查所做的修正" class="headerlink" title="检查所做的修正"></a>检查所做的修正</h4><pre><code>SELECT
    * 
FROM
    my_employees;
SELECT
    * 
FROM
    users;</code></pre>
<h4 id="清空表my-employees"><a href="#清空表my-employees" class="headerlink" title="清空表my_employees"></a>清空表my_employees</h4><pre><code>TRUNCATE TABLE my_employees;</code></pre>
<h4 id="创建表dept1"><a href="#创建表dept1" class="headerlink" title="创建表dept1"></a>创建表dept1</h4><pre><code>name null type
id        int(7)
name    varchar(25)</code></pre>
<p>代码：</p>
<pre><code>CREATE TABLE dept1 (
id INT ( 7 ),
NAME VARCHAR ( 25 ));</code></pre>
<h4 id="将表department中的数据插入新表dept2"><a href="#将表department中的数据插入新表dept2" class="headerlink" title="将表department中的数据插入新表dept2"></a>将表department中的数据插入新表dept2</h4><pre><code>CREATE TABLE dept2 SELECT
department_id,
department_name 
FROM
    myemployees.departments;    </code></pre>
<h4 id="创建表emp5"><a href="#创建表emp5" class="headerlink" title="创建表emp5"></a>创建表emp5</h4><pre><code>CREATE TABLE emp5 (
    id INT ( 7 ),
    first_name VARCHAR ( 25 ),
last_name VARCHAR ( 25 ),
dept_id INT ( 7 ));</code></pre>
<h4 id="将列last-name的长度增加到50"><a href="#将列last-name的长度增加到50" class="headerlink" title="将列last_name的长度增加到50"></a>将列last_name的长度增加到50</h4><pre><code>ALTER TABLE emp5 MODIFY COLUMN last_name VARCHAR ( 50 );</code></pre>
<h4 id="根据表employees创建employees2"><a href="#根据表employees创建employees2" class="headerlink" title="根据表employees创建employees2"></a>根据表employees创建employees2</h4><pre><code>CREATE TABLE employees2 LIKE myemployees.employees;</code></pre>
<h4 id="删除表emp5"><a href="#删除表emp5" class="headerlink" title="删除表emp5"></a>删除表emp5</h4><pre><code>DROP TABLE
IF
    EXISTS emp5;</code></pre>
<h4 id="将表employees重命名为emp5"><a href="#将表employees重命名为emp5" class="headerlink" title="将表employees重命名为emp5"></a>将表employees重命名为emp5</h4><pre><code>ALTER TABLE employees RENAME TO emp5;</code></pre>
<h4 id="在表emp5中添加新列test-column，并检查所做的操作"><a href="#在表emp5中添加新列test-column，并检查所做的操作" class="headerlink" title="在表emp5中添加新列test_column，并检查所做的操作"></a>在表emp5中添加新列test_column，并检查所做的操作</h4><pre><code>ALTER TABLE emp5 ADD COLUMN test_column INT;</code></pre>
<h4 id="直接删除表emp5中的列dept-id"><a href="#直接删除表emp5中的列dept-id" class="headerlink" title="直接删除表emp5中的列dept_id"></a>直接删除表emp5中的列dept_id</h4><pre><code>ALTER TABLE emp5 DROP COLUMN dept_id;</code></pre>
<h4 id="向表emp2的id列中添加PRIMARY-KEY约束（my-emp-id-pk）"><a href="#向表emp2的id列中添加PRIMARY-KEY约束（my-emp-id-pk）" class="headerlink" title="向表emp2的id列中添加PRIMARY KEY约束（my_emp_id_pk）"></a>向表emp2的id列中添加PRIMARY KEY约束（my_emp_id_pk）</h4><pre><code>ALTER TABLE emp2 MODIFY COLUMN id intprimary KEY;#不支持起名字
ALTER TABLE emp2 ADD constrain my_emp_id_pk PRIMARY KEY;#但是主键起了名字也白搭</code></pre>
<h4 id="向表dep2的id列中添加PRIMARY-KEY约束（my-dep-id-pk）"><a href="#向表dep2的id列中添加PRIMARY-KEY约束（my-dep-id-pk）" class="headerlink" title="向表dep2的id列中添加PRIMARY KEY约束（my_dep_id_pk）"></a>向表dep2的id列中添加PRIMARY KEY约束（my_dep_id_pk）</h4><pre><code>ALTER TABLE dep2 ADD constrain my_dep_id_pk PRIMARY KEY;#同上</code></pre>
<h4 id="向表emp2中添加列dept-id，并在其中定义FOREIGN-KEY约束，与之相关联的列是dept2表中的id列"><a href="#向表emp2中添加列dept-id，并在其中定义FOREIGN-KEY约束，与之相关联的列是dept2表中的id列" class="headerlink" title="向表emp2中添加列dept_id，并在其中定义FOREIGN KEY约束，与之相关联的列是dept2表中的id列"></a>向表emp2中添加列dept_id，并在其中定义FOREIGN KEY约束，与之相关联的列是dept2表中的id列</h4><pre><code>ALTER TABLE emp2 ADD COLUMN dept_id INT;
ALTER TABLE emp2 ADD cpmstraint fk_emp2_dept2 FOREIGN KEY ( dept_id ) REFERENCES dept2 ( id );

位置                支持的约束类型         是否可以起约束名
列级约束：列的后面                 都支持                不可以
表级约束：所有列的下面     默认和非空不支持            可以</code></pre>
<h4 id="创建视图emp-v1，要求查询电话号码以”011”开头的员工姓名和工资、邮箱"><a href="#创建视图emp-v1，要求查询电话号码以”011”开头的员工姓名和工资、邮箱" class="headerlink" title="创建视图emp_v1，要求查询电话号码以”011”开头的员工姓名和工资、邮箱"></a>创建视图emp_v1，要求查询电话号码以”011”开头的员工姓名和工资、邮箱</h4><pre><code>CREATE 
    OR REPLACE VIEW emp_v1 AS SELECT
    last_name,
    salary,
    email 
FROM
    employees 
WHERE
    phone_number LIKE &#39;011%&#39;;</code></pre>
<h4 id="创建视图emp-v2，要求查询部门的最高工资高于12000的部门信息"><a href="#创建视图emp-v2，要求查询部门的最高工资高于12000的部门信息" class="headerlink" title="创建视图emp_v2，要求查询部门的最高工资高于12000的部门信息"></a>创建视图emp_v2，要求查询部门的最高工资高于12000的部门信息</h4><pre><code>#1. 视图方法：
CREATE 
    OR REPLACE VIEW emp_v2 AS SELECT
    max( salary ) mx_sal,
    department_id 
FROM
    employees 
GROUP BY
    department_id 
HAVING
    max( salary )&gt; 12000;

#
SELECT
    d.*,
    m.mx_sal 
FROM
    departments d
    JOIN emp_v2 m ON m.department_id = d.department_id;
#2. 子查询方法：
SELECT
    d.*,
    m.mx_sal 
FROM
    departments d
    JOIN ( SELECT max( salary ) mx_sal, department_id FROM employees GROUP BY department_id HAVING max( salary )&gt; 12000 ) m ON m.department_id = d.department_id;</code></pre>
<h4 id="无题-1"><a href="#无题-1" class="headerlink" title="无题"></a>无题</h4><p>创建表Book表，字段如下：</p>
<pre><code>bid 整型，要求主键
bname 字符型，要求设置唯一键，并非空
price 浮点型，要求有默认值10
btypeID 类型编号，要求引用bookType表的id字段</code></pre>
<p>已知booktype表(不用创建)，字段如下：</p>
<pre><code>id
name

#代码:
CREATE TABLE Book (
    bid INT PRIMARY KEY,
    bname VARCHAR ( 20 ) UNIQUE NOT NULL,
    price FLOAT DEFAULT 10,
    btypeId INT,
FOREIGN KEY ( btypeId ),
REFERENCES bookType ( id ));</code></pre>
<h4 id="开启事务，向表中插入一行数据，并结束"><a href="#开启事务，向表中插入一行数据，并结束" class="headerlink" title="开启事务，向表中插入一行数据，并结束"></a>开启事务，向表中插入一行数据，并结束</h4><pre><code>SET autocommit = 0;
INSERT INTO book ( bid, bname, price, btypeId )
VALUES
    (
    1,
    &#39;小李飞刀&#39;， 100，1)</code></pre>
<h4 id="创建视图，实现查询价格大于100的书名和类型名"><a href="#创建视图，实现查询价格大于100的书名和类型名" class="headerlink" title="创建视图，实现查询价格大于100的书名和类型名"></a>创建视图，实现查询价格大于100的书名和类型名</h4><pre><code>CREATE VIEW myv1 AS SELECT
bname,
NAME 
FROM
    book b
    JOIN bookType t ON b.btype = t.id 
WHERE
    price &gt; 100;</code></pre>
<h4 id="修改视图，实现查询价格在90-120之间的书名和价格"><a href="#修改视图，实现查询价格在90-120之间的书名和价格" class="headerlink" title="修改视图，实现查询价格在90-120之间的书名和价格"></a>修改视图，实现查询价格在90-120之间的书名和价格</h4><pre><code>CREATE 
    OR REPLACE VIEW myv1 AS SELECT
    bname,
    price 
FROM
    book 
WHERE
    price BETWEEN 90 
    AND 120;</code></pre>
<h4 id="删除刚才建的视图"><a href="#删除刚才建的视图" class="headerlink" title="删除刚才建的视图"></a>删除刚才建的视图</h4><pre><code>DROP VIEW myv1;</code></pre>
<h4 id="创建存储过程实现传入用户名和密码，插入到admin表中"><a href="#创建存储过程实现传入用户名和密码，插入到admin表中" class="headerlink" title="创建存储过程实现传入用户名和密码，插入到admin表中"></a>创建存储过程实现传入用户名和密码，插入到admin表中</h4><pre><code>CREATE PROCEDURE test_pro1 (
    IN username VARCHAR ( 20 ),
    IN loginPwd VARCHAR ( 20 )) BEGIN
    INSERT INTO admin ( admin.username, PASSWORD )
    VALUES
        ( username, loginpwd );

END </code></pre>
<h4 id="创建存储过程实现传入女神编号，返回女神名称和女神电话"><a href="#创建存储过程实现传入女神编号，返回女神名称和女神电话" class="headerlink" title="创建存储过程实现传入女神编号，返回女神名称和女神电话"></a>创建存储过程实现传入女神编号，返回女神名称和女神电话</h4><pre><code>CREATE PROCEDURE test_pro2 (
    IN id INT,
    OUT NAME VARCHAR ( 20 ),
    OUT PHONE VARCHAR ( 20 )) BEGIN
    SELECT
        b.NAME,
        b.phone INTO NAME,
        phone 
    FROM
        beauty b 
    WHERE
        b.id = id;

END</code></pre>
<h4 id="创建存储过程或函数实现传入两个女神生日，返回大小"><a href="#创建存储过程或函数实现传入两个女神生日，返回大小" class="headerlink" title="创建存储过程或函数实现传入两个女神生日，返回大小"></a>创建存储过程或函数实现传入两个女神生日，返回大小</h4><pre><code>CREATE PROCEDURE test_pro3 ( IN birth1 datetime, IN birth2 datetime, OUT result INT ) BEGIN
    SELECT
        datediff( birth1, birth2 ) INTO result;

END
CALL test_pro3(&#39;1998-1-1&#39;,now(),@result)
SELECT @result</code></pre>
<h4 id="创建函数，实现传入两个float，返回二者之和"><a href="#创建函数，实现传入两个float，返回二者之和" class="headerlink" title="创建函数，实现传入两个float，返回二者之和"></a>创建函数，实现传入两个float，返回二者之和</h4><pre><code>CREATE FUNCTION test_fun1 ( num1 FLOAT, num2 FLOAT ) RETURNS FLOAT BEGIN
    DECLARE
        SUM FLOAT DEFAULT 0;

    SET SUM = num1 + num2;
    RETURN SUM;

END SELECT
    test_fun1 ( 1, 2 )</code></pre>
]]></content>
      <categories>
        <category>learning notes</category>
      </categories>
      <tags>
        <tag>learn</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>《基于plotly的可视化绘图》笔记3</title>
    <url>/2020/12/13/%E3%80%8A%E5%9F%BA%E4%BA%8Eplotly%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BB%98%E5%9B%BE%E3%80%8B%E7%AC%94%E8%AE%B03/</url>
    <content><![CDATA[<p>《python数据分析 基于plotly的动态可视化绘图》, 孙洋洋 王硕 邢梦来 袁泉 吴娜著, 电子工业出版社.</p>
<p>看到这里有点乏味了，下周打算去爬个房价数据画着试试。</p>
<a id="more"></a>
<h1 id="分类回归与聚类"><a href="#分类回归与聚类" class="headerlink" title="分类回归与聚类"></a>分类回归与聚类</h1><h2 id="鸢尾花-SVM-分类"><a href="#鸢尾花-SVM-分类" class="headerlink" title="鸢尾花 SVM 分类"></a>鸢尾花 SVM 分类</h2><p><img src="https://s3.ax1x.com/2020/12/13/rmrCAP.png" alt="SVM分类图"></p>
<p>画图步骤为两步，一是绘制热力图，即背景图；<br>另一个是绘制样本点，需要将颜色与分类标签挂钩，即<code>color=Y</code>，保证同类样本显示同样的颜色。但是我不明白为什么：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x_min, x_max = X[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, X[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">y_min, y_max = X[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, X[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">x_ = np.arange(x_min, x_max, h)  <span class="comment"># x、y是两个特征</span></span><br><span class="line">y_ =  np.arange(y_min, y_max, h) <span class="comment"># 生成等差h的的序列</span></span><br></pre></td></tr></table></figure>
<p>这个处理为什么如此正好。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm, datasets</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">X = iris.data[:, :<span class="number">2</span>] <span class="comment"># 只取前两个特征</span></span><br><span class="line">Y = iris.target      <span class="comment"># 分类标签 0 1 2</span></span><br><span class="line">h = <span class="number">.02</span>  <span class="comment"># 设定网格大小</span></span><br><span class="line">clf = svm.SVC(kernel=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line">clf.fit(X, Y)</span><br><span class="line"></span><br><span class="line">x_min, x_max = X[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, X[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">y_min, y_max = X[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, X[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">x_ = np.arange(x_min, x_max, h)  <span class="comment"># x、y是两个特征</span></span><br><span class="line">y_ =  np.arange(y_min, y_max, h) <span class="comment"># 生成等差h的的序列</span></span><br><span class="line">xx, yy = np.meshgrid(x_, y_)</span><br><span class="line">Z = clf.predict(np.c_[xx.ravel(), yy.ravel()]) <span class="comment"># xx.ravel() 将多维数组转化为一维的； np.c_将数组按行转化为矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Put the result into a color plot</span></span><br><span class="line">Z = Z.reshape(xx.shape) <span class="comment"># 分类得到的结果矩阵 220*280</span></span><br><span class="line"></span><br><span class="line">cmap = [<span class="string">&#x27;RGB(10,64,159)&#x27;</span>,<span class="string">&#x27;RGB(5,159,126)&#x27;</span>,<span class="string">&#x27;RGB(159,26,64)&#x27;</span>] <span class="comment">#源代码多了个中括号</span></span><br><span class="line"><span class="comment"># 画布</span></span><br><span class="line">trace1 = go.Heatmap(x=x_, y=y_, z=Z,</span><br><span class="line">                    colorscale=cmap,</span><br><span class="line">                    showscale=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画点</span></span><br><span class="line">trace2 = go.Scatter(x=X[:, <span class="number">0</span>], y=X[:, <span class="number">1</span>], </span><br><span class="line">                    mode=<span class="string">&#x27;markers&#x27;</span>,</span><br><span class="line">                    marker=<span class="built_in">dict</span>(color=Y, </span><br><span class="line">                                colorscale=cmap, </span><br><span class="line">                                showscale=<span class="literal">False</span>,</span><br><span class="line">                                line=<span class="built_in">dict</span>(color=<span class="string">&#x27;black&#x27;</span>, width=<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">layout = go.Layout(title=<span class="string">&quot;基于线性核的SVM的多分类&quot;</span>)</span><br><span class="line">fig = go.Figure(data= [trace1, trace2], layout=layout)</span><br><span class="line">pyplt(fig)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="随机数据-SVM-回归"><a href="#随机数据-SVM-回归" class="headerlink" title="随机数据 SVM 回归"></a>随机数据 SVM 回归</h2><p><img src="https://s3.ax1x.com/2020/12/13/rmrp7t.png" alt="SVM回归图"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVR</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">X = np.sort(<span class="number">5</span> * np.random.rand(<span class="number">40</span>, <span class="number">1</span>), axis=<span class="number">0</span>)</span><br><span class="line">y = np.sin(X).ravel()</span><br><span class="line">y[::<span class="number">5</span>] += <span class="number">3</span> * (<span class="number">0.5</span> - np.random.rand(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">svr_rbf = SVR(kernel=<span class="string">&#x27;rbf&#x27;</span>, C=<span class="number">1e3</span>, gamma=<span class="number">0.1</span>)</span><br><span class="line">svr_lin = SVR(kernel=<span class="string">&#x27;linear&#x27;</span>, C=<span class="number">1e3</span>)</span><br><span class="line">svr_poly = SVR(kernel=<span class="string">&#x27;poly&#x27;</span>, C=<span class="number">1e3</span>, degree=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">y_rbf = svr_rbf.fit(X, y).predict(X)</span><br><span class="line">y_lin = svr_lin.fit(X, y).predict(X)</span><br><span class="line">y_poly = svr_poly.fit(X, y).predict(X)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_to_plotly</span>(<span class="params">x</span>):</span></span><br><span class="line">    k = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(x)):</span><br><span class="line">        k.append(x[i][<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line">lw = <span class="number">2</span></span><br><span class="line">p1 = go.Scatter(x=data_to_plotly(X), y=y, <span class="comment"># 原始点的xy</span></span><br><span class="line">                mode=<span class="string">&#x27;markers&#x27;</span>,</span><br><span class="line">                marker=<span class="built_in">dict</span>(color=<span class="string">&#x27;darkorange&#x27;</span>),</span><br><span class="line">                name=<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p2 = go.Scatter(x=data_to_plotly(X), y=y_rbf, <span class="comment"># RBF拟合的结果</span></span><br><span class="line">                mode=<span class="string">&#x27;lines&#x27;</span>,</span><br><span class="line">                line=<span class="built_in">dict</span>(color=<span class="string">&#x27;navy&#x27;</span>, width=lw),</span><br><span class="line">                name=<span class="string">&#x27;RBF model&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p3 = go.Scatter(x=data_to_plotly(X), y=y_lin,  <span class="comment"># 线性拟合</span></span><br><span class="line">                mode=<span class="string">&#x27;lines&#x27;</span>,</span><br><span class="line">                line=<span class="built_in">dict</span>(color=<span class="string">&#x27;cyan&#x27;</span>, width=lw),</span><br><span class="line">                name=<span class="string">&#x27;Linear model&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p4 = go.Scatter(x=data_to_plotly(X), y=y_poly,  <span class="comment"># 多项式拟合</span></span><br><span class="line">                mode=<span class="string">&#x27;lines&#x27;</span>, </span><br><span class="line">                line=<span class="built_in">dict</span>(color=<span class="string">&#x27;cornflowerblue&#x27;</span>, width=lw),</span><br><span class="line">                name=<span class="string">&#x27;Polynomial model&#x27;</span>)</span><br><span class="line"></span><br><span class="line">layout = go.Layout(title=<span class="string">&#x27;SVM回归&#x27;</span>,</span><br><span class="line">                   hovermode=<span class="string">&#x27;closest&#x27;</span>,</span><br><span class="line">                   xaxis=<span class="built_in">dict</span>(title=<span class="string">&#x27;data&#x27;</span>),</span><br><span class="line">                   yaxis=<span class="built_in">dict</span>(title=<span class="string">&#x27;target&#x27;</span>))</span><br><span class="line"></span><br><span class="line">fig = go.Figure(data=[p1, p2, p3, p4], layout=layout)</span><br><span class="line">pyplt(fig)</span><br></pre></td></tr></table></figure>

<h2 id="聚类图"><a href="#聚类图" class="headerlink" title="聚类图"></a>聚类图</h2><p>本案例比较的是<code>K-means</code>和<code>MiniBatchKmeans</code>.</p>
<p>本案例分为三部分：产生聚类的数据；两种方法训练模型；绘制聚类图。</p>
<p>会得到三个图，前两个分别是两种方法的分类结果，第三张图片会突出两种分类结果的差异。</p>
<p><img src="https://s3.ax1x.com/2020/12/13/rmrS0I.png" alt="聚类图"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">from</span> plotly <span class="keyword">import</span> tools</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> MiniBatchKMeans, KMeans</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics.pairwise <span class="keyword">import</span> pairwise_distances_argmin</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets.samples_generator <span class="keyword">import</span> make_blobs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成随机数据</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">45</span></span><br><span class="line">centers = [[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">-1</span>, <span class="number">-1</span>], [<span class="number">1</span>, <span class="number">-1</span>]] </span><br><span class="line">n_clusters = <span class="built_in">len</span>(centers)</span><br><span class="line">X, labels_true = make_blobs(n_samples = <span class="number">3000</span>, centers = centers, cluster_std = <span class="number">0.7</span>) <span class="comment">#书上说的不对，centers是聚类中心。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># n_samples是待生成的样本的总数</span></span><br><span class="line"><span class="comment"># cluster_std表示每个类别的方差，例如我们希望生成2类数据，其中一类比另一类具有更大的方差，可以将cluster_std设置为[1.0,3.0]。</span></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line"><span class="comment"># 使用K-means算法</span></span><br><span class="line">k_means = KMeans(init = <span class="string">&#x27;k-means++&#x27;</span>, n_clusters = <span class="number">3</span>, n_init = <span class="number">10</span>)</span><br><span class="line">t0 = time.time()</span><br><span class="line">k_means.fit(X)</span><br><span class="line">t_batch = time.time() - t0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用MiniBatchKMeans算法</span></span><br><span class="line">mbk = MiniBatchKMeans(init = <span class="string">&#x27;k-means++&#x27;</span>, n_clusters = <span class="number">3</span>, batch_size = batch_size,</span><br><span class="line">                      n_init = <span class="number">10</span>, max_no_improvement = <span class="number">10</span>, verbose = <span class="number">0</span>)</span><br><span class="line">t0 = time.time()</span><br><span class="line">mbk.fit(X)</span><br><span class="line">t_mini_batch = time.time() - t0</span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line">colors = [<span class="string">&#x27;#4EACC5&#x27;</span>, <span class="string">&#x27;#FF9C34&#x27;</span>, <span class="string">&#x27;#4E9A06&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 希望MiniBatchKMeans和KMeans算法中的同一个集群有相同的颜色</span></span><br><span class="line">k_means_cluster_centers = np.sort(k_means.cluster_centers_, axis=<span class="number">0</span>)</span><br><span class="line">mbk_means_cluster_centers = np.sort(mbk.cluster_centers_, axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 计算一个点和一组点之间的最小距离</span></span><br><span class="line">k_means_labels = pairwise_distances_argmin(X, k_means_cluster_centers)</span><br><span class="line">mbk_means_labels = pairwise_distances_argmin(X, mbk_means_cluster_centers)</span><br><span class="line">order = pairwise_distances_argmin(k_means_cluster_centers,</span><br><span class="line">                                  mbk_means_cluster_centers)</span><br><span class="line"></span><br><span class="line">fig = tools.make_subplots(rows=<span class="number">1</span>, cols=<span class="number">3</span>,</span><br><span class="line">                          print_grid=<span class="literal">False</span>,</span><br><span class="line">                          subplot_titles=(<span class="string">&#x27;KMeans&lt;br&gt;train time: %.2fs\ninertia: %f&#x27;</span> %</span><br><span class="line">                                          (t_mini_batch, mbk.inertia_),</span><br><span class="line">                                          <span class="string">&#x27;MiniBatchKmeans&lt;br&gt;train time: %.2fs\ninertia: %f&#x27;</span> %</span><br><span class="line">                                          (t_mini_batch, mbk.inertia_), </span><br><span class="line">                                          <span class="string">&#x27;Difference&#x27;</span>))</span><br><span class="line"><span class="comment"># 第一张图</span></span><br><span class="line"><span class="keyword">for</span> k, col <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(n_clusters), colors):</span><br><span class="line">    my_members = k_means_labels == k</span><br><span class="line">    cluster_center = k_means_cluster_centers[k]</span><br><span class="line">    kmeans1 = go.Scatter(x=X[my_members, <span class="number">0</span>], y=X[my_members, <span class="number">1</span>],</span><br><span class="line">                         showlegend=<span class="literal">False</span>,</span><br><span class="line">                         mode=<span class="string">&#x27;markers&#x27;</span>, marker=<span class="built_in">dict</span>(color=col, size=<span class="number">4</span>))</span><br><span class="line">    kmeans2 = go.Scatter(x=[cluster_center[<span class="number">0</span>]], y=[cluster_center[<span class="number">1</span>]],</span><br><span class="line">                         showlegend=<span class="literal">False</span>,</span><br><span class="line">                         mode=<span class="string">&#x27;markers&#x27;</span>, marker=<span class="built_in">dict</span>(color=col, size=<span class="number">14</span>,</span><br><span class="line">                                                    line=<span class="built_in">dict</span>(color=<span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">                                                              width=<span class="number">1</span>)))</span><br><span class="line">    fig.append_trace(kmeans1, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    fig.append_trace(kmeans2, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>][<span class="string">&#x27;xaxis1&#x27;</span>].update(showticklabels=<span class="literal">False</span>, ticks=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                               zeroline=<span class="literal">False</span>, showgrid=<span class="literal">False</span>)</span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>][<span class="string">&#x27;yaxis1&#x27;</span>].update(showticklabels=<span class="literal">False</span>, ticks=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                               zeroline=<span class="literal">False</span>, showgrid=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 第二张图</span></span><br><span class="line"><span class="keyword">for</span> k, col <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(n_clusters), colors):</span><br><span class="line">    my_members = mbk_means_labels == order[k]</span><br><span class="line">    cluster_center = mbk_means_cluster_centers[order[k]]</span><br><span class="line">    minibatchkmeans1 = go.Scatter(x=X[my_members, <span class="number">0</span>], y=X[my_members, <span class="number">1</span>],</span><br><span class="line">                                 showlegend=<span class="literal">False</span>,</span><br><span class="line">                                 mode=<span class="string">&#x27;markers&#x27;</span>, marker=<span class="built_in">dict</span>(color=col, size=<span class="number">4</span>))</span><br><span class="line">    minibatchkmeans2 = go.Scatter(x=[cluster_center[<span class="number">0</span>]], y=[cluster_center[<span class="number">1</span>]],</span><br><span class="line">                                 showlegend=<span class="literal">False</span>,</span><br><span class="line">                                 mode=<span class="string">&#x27;markers&#x27;</span>, marker=<span class="built_in">dict</span>(color=col, size=<span class="number">14</span>,</span><br><span class="line">                                                            line=<span class="built_in">dict</span>(color=<span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">                                                                      width=<span class="number">1</span>)))</span><br><span class="line">    fig.append_trace(minibatchkmeans1, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fig.append_trace(minibatchkmeans2, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>][<span class="string">&#x27;xaxis2&#x27;</span>].update(showticklabels=<span class="literal">False</span>, ticks=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                               zeroline=<span class="literal">False</span>, showgrid=<span class="literal">False</span>)</span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>][<span class="string">&#x27;yaxis2&#x27;</span>].update(showticklabels=<span class="literal">False</span>, ticks=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                               zeroline=<span class="literal">False</span>, showgrid=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三张图</span></span><br><span class="line">different = (mbk_means_labels == <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n_clusters):</span><br><span class="line">    different += ((k_means_labels == k) != (mbk_means_labels == order[k]))</span><br><span class="line"></span><br><span class="line">identic = np.logical_not(different)</span><br><span class="line">difference1 = go.Scatter(x=X[identic, <span class="number">0</span>], y=X[identic, <span class="number">1</span>],</span><br><span class="line">                         showlegend=<span class="literal">False</span>,</span><br><span class="line">                         mode=<span class="string">&#x27;markers&#x27;</span>, marker=<span class="built_in">dict</span>(color=<span class="string">&#x27;#bbbbbb&#x27;</span>, size=<span class="number">4</span>))</span><br><span class="line">        </span><br><span class="line">difference2 = go.Scatter(x=X[different, <span class="number">0</span>], y=X[different, <span class="number">1</span>], </span><br><span class="line">                         showlegend=<span class="literal">False</span>,</span><br><span class="line">                         mode=<span class="string">&#x27;markers&#x27;</span>, marker=<span class="built_in">dict</span>(color=<span class="string">&#x27;magenta&#x27;</span>, size=<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">fig.append_trace(difference1, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">fig.append_trace(difference2, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>][<span class="string">&#x27;xaxis3&#x27;</span>].update(showticklabels=<span class="literal">False</span>, ticks=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                               zeroline=<span class="literal">False</span>, showgrid=<span class="literal">False</span>)</span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>][<span class="string">&#x27;yaxis3&#x27;</span>].update(showticklabels=<span class="literal">False</span>, ticks=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                               zeroline=<span class="literal">False</span>, showgrid=<span class="literal">False</span>)</span><br><span class="line">pyplt(fig)</span><br></pre></td></tr></table></figure>
<h1 id="visdom与plotly"><a href="#visdom与plotly" class="headerlink" title="visdom与plotly"></a>visdom与plotly</h1><p><code>visdom</code>是一个可交互式工具组件，绘图底层用的是<code>plotly</code>的<code>js</code>接口，支持<code>torch</code>和<code>numpy</code>。</p>
<h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><p>在<code>jupyter</code>里使用：</p>
<pre><code>!pip install visdom -i https://pypi.tuna.tsinghua.edu.cn/simple</code></pre>
<p>启动服务器：</p>
<pre><code>!python -m visdom.server
python -m visdom.server</code></pre>
<p>启动不了，好像是得下点东西，有需要再说吧。</p>
<h1 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h1><p>这本书真的不错，是我太菜了，经验忒少。</p>
<p>在用<code>matplotlib</code>绘图的时候，是在一个<code>figure</code>对象上，可以画多个<code>axes</code>对象。<br>每个<code>axes</code>对象都是一个拥有自己坐标系统的绘图区域。</p>
<ul>
<li>axes 设置坐标轴边界、颜色、坐标刻度值大小和网格的显示。</li>
<li>figure 设置边界颜色、图形大小和子区。</li>
<li>font 字体 字号 样式</li>
<li>grid 网格颜色和线型</li>
<li>legend 图例和文本显示</li>
<li>lines 线条颜色线型宽度 标记</li>
<li>savefig 对保存的图形单独设置</li>
<li>xtick ytick 坐标轴刻度的值 为xy轴的主刻度和次刻度设置颜色、大小、方向和标签大小。</li>
<li>text 添加文字说明</li>
<li>axis 坐标范围</li>
<li>xlim 调整坐标范围</li>
<li>annotate 文本注释 需考虑两个点：被注释的地方和插入文本的地方</li>
<li>subplot 子图</li>
</ul>
<h2 id="线性函数"><a href="#线性函数" class="headerlink" title="线性函数"></a>线性函数</h2><p><img src="https://s3.ax1x.com/2020/12/13/rmDvXd.png" alt="线性函数"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#使用import导入模块matplotlib.pyplot，并简写成plt</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#使用import导入模块numpy，并简写成np</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">x = np.linspace(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="comment"># np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)</span></span><br><span class="line"><span class="comment"># 参数解释：start,stop是开始，结束的数字，num是生成多少个数字，默认50个；endpoint是最后一个stop数字是否包含进去，默认包含；retstep,是两个数字间的间距，默认不显示；dtype默认。</span></span><br><span class="line">y = x*<span class="number">3</span> + <span class="number">5</span></span><br><span class="line"><span class="comment">#线性方程y= x*3 + 5</span></span><br><span class="line">plt.title(<span class="string">&quot;线性函数&quot;</span>)</span><br><span class="line"><span class="comment">#设置标题</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;x 值&quot;</span>)</span><br><span class="line"><span class="comment">#设置x轴标签</span></span><br><span class="line">plt.ylabel(<span class="string">&quot;y 值&quot;</span>)</span><br><span class="line"><span class="comment">#设置y轴标签</span></span><br><span class="line">ax.plot(x, y)</span><br><span class="line"><span class="comment">#画图</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h2 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p><img src="https://s3.ax1x.com/2020/12/13/rmDj6H.png" alt="子图1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"></span><br><span class="line">pympl = py.offline.iplot_mpl</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"></span><br><span class="line">x1 = np.arange(<span class="number">0.0</span>, <span class="number">3.0</span>, <span class="number">0.01</span>)</span><br><span class="line">x2 = np.arange(<span class="number">0.0</span>, <span class="number">4.0</span>, <span class="number">0.01</span>)</span><br><span class="line"><span class="comment">#产生x1，x2数据</span></span><br><span class="line">y1 = np.cos(<span class="number">2</span> * np.pi * x1) * np.exp(-x1)</span><br><span class="line">y2 = np.cos(<span class="number">2</span> * np.pi * x2)</span><br><span class="line"><span class="comment">#产生数据y1，y2</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># pyplot通过调用subplot或者add_subplot来增加子图，如p1 = plt.subplot(211) 或者 p1 = plt.subplot(2,1,1)， 表示创建一个2行，1列的图，p1为第一个子图，然后在p1上画曲线，设置标注标题图例等，就可以使用p1来调用相关的函数，可以直接使用pyplot画图，添加label，等。</span></span><br><span class="line">plt.plot(x1, y1)</span><br><span class="line">plt.title(<span class="string">&#x27;子图1&#x27;</span>)</span><br><span class="line"><span class="comment">#添加标题</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;y1 值&#x27;</span>)</span><br><span class="line"><span class="comment">#添加y轴名称</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">#添加子图</span></span><br><span class="line">plt.plot(x2, y2)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;数量&#x27;</span>)</span><br><span class="line"><span class="comment">#添加标签</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;y2 值&#x27;</span>)</span><br><span class="line"><span class="comment">#添加y轴名称</span></span><br><span class="line">plot_url = pympl(fig, show_link=<span class="literal">False</span>,resize=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>不想整了，暂时用不到的东西学着学着就兴致不高了。</p>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p><img src="https://s3.ax1x.com/2020/12/13/rmDOpD.png" alt="子图2"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line">pympl = py.offline.iplot_mpl</span><br><span class="line"><span class="comment"># 配置中文显示</span></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="keyword">return</span> np.cos(<span class="number">2</span>*np.pi*t)</span><br><span class="line"><span class="comment">#产生f(t)函数</span></span><br><span class="line">t1 = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.5</span>)</span><br><span class="line">t2 = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.01</span>)</span><br><span class="line"><span class="comment">#产生t1，t2数据</span></span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line"><span class="comment">#添加子图</span></span><br><span class="line">plt.plot(t1, f(t1), <span class="string">&#x27;bo&#x27;</span>, t2, f(t2), <span class="string">&#x27;k&#x27;</span>)</span><br><span class="line"><span class="comment">#画图</span></span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line"><span class="comment">#添加子图</span></span><br><span class="line">plt.plot(np.cos(<span class="number">2</span>*np.pi*t2), <span class="string">&#x27;r--&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plot_url = pympl(fig, show_link=<span class="literal">False</span>,resize=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="确定坐标范围"><a href="#确定坐标范围" class="headerlink" title="确定坐标范围"></a>确定坐标范围</h2><p><img src="https://s3.ax1x.com/2020/12/13/rmDHk6.png" alt="确定坐标范围"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"></span><br><span class="line">pympl = py.offline.iplot_mpl</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-5.0</span>, <span class="number">5.0</span>, <span class="number">0.02</span>)</span><br><span class="line"><span class="comment"># x = np.linspace(-5, 5, num=50, endpoint=True, retstep=False, dtype=None)</span></span><br><span class="line">y1 = x**<span class="number">2</span>+<span class="number">1</span></span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;x 值&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;y1 值&#x27;</span>)</span><br><span class="line"><span class="comment">#设置x轴范围，x轴只显示（-5,3），总区间（-5,5)</span></span><br><span class="line">xlim(<span class="number">-5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">#设置y轴范围</span></span><br><span class="line">ylim(<span class="number">-10</span>, <span class="number">50</span>)</span><br><span class="line">plt.plot(x,y1)</span><br><span class="line">fig= plt.gcf()</span><br><span class="line">plot_url = pympl(fig, show_link=<span class="literal">False</span>,resize=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="概率图"><a href="#概率图" class="headerlink" title="概率图"></a>概率图</h2><p>这个案例由于版本的问题，改了两处错误。</p>
<p><img src="https://s3.ax1x.com/2020/12/13/rmDo01.png" alt="概率图"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> norm</span><br><span class="line">pympl = py.offline.iplot_mpl</span><br><span class="line"></span><br><span class="line"><span class="comment">#正太分布函数等和其他函数都在matplotlib.mlab库里面</span></span><br><span class="line">np.random.seed(<span class="number">2020</span>)</span><br><span class="line"><span class="comment">#产生随机种子</span></span><br><span class="line">mu = <span class="number">100</span></span><br><span class="line">sigma = <span class="number">15</span></span><br><span class="line">x = mu + sigma * np.random.randn(<span class="number">437</span>)</span><br><span class="line"><span class="comment">#生产数据</span></span><br><span class="line">num_bins = <span class="number">50</span></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">n, bins, patches = ax.hist(x, num_bins, density=<span class="number">1</span>) <span class="comment"># 版本更新，把normed改成density</span></span><br><span class="line"><span class="comment">#产生直方图</span></span><br><span class="line">y = norm.pdf(bins, mu, sigma) <span class="comment"># 这里也改了</span></span><br><span class="line"><span class="comment">#normpdf：正态概率密度函数</span></span><br><span class="line"><span class="comment">#Y = normpdf(X,mu,sigma)</span></span><br><span class="line"><span class="comment">#mu：均值</span></span><br><span class="line"><span class="comment">#sigma：标准差</span></span><br><span class="line"><span class="comment">#Y：正态概率密度函数在x处的值</span></span><br><span class="line">ax.plot(bins, y, <span class="string">&#x27;--&#x27;</span>)</span><br><span class="line"><span class="comment">#画图</span></span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;X 轴&#x27;</span>)</span><br><span class="line"><span class="comment">#x轴标签</span></span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;概率密度&#x27;</span>)</span><br><span class="line"><span class="comment">#y轴标签</span></span><br><span class="line">ax.set_title(<span class="string">r&#x27;柱状图IQ: $\mu=100$, $\sigma=15$&#x27;</span>)</span><br><span class="line"><span class="comment">#设置标题</span></span><br><span class="line">fig.tight_layout()</span><br><span class="line"><span class="comment">#产生紧凑的图片</span></span><br><span class="line">plot_url = pympl(fig, show_link=<span class="literal">False</span>,resize=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><h3 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h3><p><img src="https://s3.ax1x.com/2020/12/13/rmDTTx.png" alt="散点图1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"></span><br><span class="line">pympl = py.offline.iplot_mpl</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"><span class="comment">#产生测试数据</span></span><br><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">30</span>)</span><br><span class="line">y =np.sin(x)</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"><span class="comment">#设置标题i</span></span><br><span class="line">ax1.set_title(<span class="string">&#x27;散点图&#x27;</span>)</span><br><span class="line"><span class="comment">#设置X轴标签</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line"><span class="comment">#设置Y轴标签</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line"><span class="comment">#画散点图</span></span><br><span class="line">lValue = x</span><br><span class="line">ax1.scatter(x,y,c=<span class="string">&#x27;r&#x27;</span>,s= <span class="number">100</span>,linewidths=lValue,marker=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line"><span class="comment">#设置图标</span></span><br><span class="line">plt.legend(<span class="string">&#x27;x1&#x27;</span>)</span><br><span class="line">plot_url = pympl(fig, show_link=<span class="literal">False</span>,resize=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>不好看啊</p>
<h3 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h3><p><img src="https://s3.ax1x.com/2020/12/13/rmDbtK.png" alt="散点图2"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> rand<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"></span><br><span class="line">pympl = py.offline.iplot_mpl</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]:</span><br><span class="line">    n = <span class="number">500</span></span><br><span class="line">    x, y = rand(<span class="number">2</span>, n)<span class="comment">#产生2*n的矩阵</span></span><br><span class="line">    ax.scatter(x, y, c=color, label=color,</span><br><span class="line">               alpha=<span class="number">0.3</span>, edgecolors=<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line"><span class="comment">#设置每个点的颜色，x,y分别代表的横纵坐标，通过横纵坐标确定点的位置，c表示点的颜色color，s表示点的大小size，alpha表示点的透明度，1是不透明，0是透明。</span></span><br><span class="line">ax.legend()</span><br><span class="line">ax.grid(<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#设置网格</span></span><br><span class="line">plot_url = pympl(fig, show_link=<span class="literal">False</span>,resize=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><h3 id="1-2"><a href="#1-2" class="headerlink" title="1"></a>1</h3><p><img src="https://s3.ax1x.com/2020/12/13/rmDqfO.png" alt="柱状图1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"></span><br><span class="line">pympl = py.offline.iplot_mpl</span><br><span class="line">plt.figure(figsize=(<span class="number">7</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">X = np.arange(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line"><span class="comment">#X是1,2,3,4,5,6,7,8,柱的个数</span></span><br><span class="line"><span class="comment"># numpy.random.uniform(low=0.0, high=1.0, size=None), normal</span></span><br><span class="line"><span class="comment">#uniform均匀分布的随机数，normal是正态分布的随机数，0.5-1均匀分布的数，一共有n个</span></span><br><span class="line">Y1 = np.random.uniform(<span class="number">0.5</span>,<span class="number">1.0</span>,<span class="number">5</span>)</span><br><span class="line">Y2 = np.random.uniform(<span class="number">0.5</span>,<span class="number">1.0</span>,<span class="number">5</span>)</span><br><span class="line">plt.bar(X,Y1,width = <span class="number">0.35</span>,facecolor = <span class="string">&#x27;lightskyblue&#x27;</span>,edgecolor = <span class="string">&#x27;white&#x27;</span>)</span><br><span class="line"><span class="comment">#width:柱的宽度</span></span><br><span class="line">plt.bar(X+<span class="number">0.35</span>,Y2,width = <span class="number">0.20</span>,facecolor = <span class="string">&#x27;yellowgreen&#x27;</span>,edgecolor = <span class="string">&#x27;white&#x27;</span>)</span><br><span class="line"><span class="comment">#水平柱状图plt.barh，属性中宽度width变成了高度height</span></span><br><span class="line"><span class="comment">#打两组数据时用+</span></span><br><span class="line"><span class="comment">#facecolor柱状图里填充的颜色</span></span><br><span class="line"><span class="comment">#edgecolor是边框的颜色</span></span><br><span class="line"><span class="comment">#想把一组数据打到下边，在数据前使用负号</span></span><br><span class="line">fig = plt.gcf()</span><br><span class="line">plot_url = pympl(fig, show_link=<span class="literal">False</span>,resize=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-2"><a href="#2-2" class="headerlink" title="2"></a>2</h3><p><img src="https://s3.ax1x.com/2020/12/13/rmDX1e.png" alt="柱状图2"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="comment">#使用import导入模块numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="comment">#使用import导入模块matplotlib.pyplot</span></span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py  <span class="comment"># 导入plotly库并命名为py</span></span><br><span class="line"></span><br><span class="line">pympl = py.offline.iplot_mpl</span><br><span class="line">np.random.seed(<span class="number">2020</span>)</span><br><span class="line"></span><br><span class="line">n_bins = <span class="number">10</span></span><br><span class="line">x = np.random.randn(<span class="number">1000</span>, <span class="number">3</span>) <span class="comment">#产生1000*3的矩阵</span></span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(nrows=<span class="number">2</span>, ncols=<span class="number">2</span>)</span><br><span class="line">ax0, ax1, ax2, ax3 = axes.flatten()</span><br><span class="line"></span><br><span class="line">colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;lime&#x27;</span>] <span class="comment">#设置颜色</span></span><br><span class="line"></span><br><span class="line">ax0.hist(x, n_bins, density=<span class="number">1</span>, histtype=<span class="string">&#x27;bar&#x27;</span>, color=colors, label=colors) <span class="comment">#设置柱状图的信息</span></span><br><span class="line">ax0.legend(prop=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">10</span>&#125;)</span><br><span class="line">ax0.set_title(<span class="string">&#x27;图例bar&#x27;</span>) <span class="comment">#添加标题</span></span><br><span class="line"></span><br><span class="line">ax1.hist(x, n_bins, density=<span class="number">1</span>, histtype=<span class="string">&#x27;bar&#x27;</span>, stacked=<span class="literal">True</span>)</span><br><span class="line">ax1.set_title(<span class="string">&#x27;堆积bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax2.hist(x, n_bins, density=<span class="number">1</span>, histtype=<span class="string">&#x27;bar&#x27;</span>, stacked=<span class="literal">True</span>, fill=<span class="literal">False</span>)</span><br><span class="line">ax2.set_title(<span class="string">&#x27;堆积bar（非填充）&#x27;</span>)</span><br><span class="line"></span><br><span class="line">x_multi = [np.random.randn(n) <span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">10000</span>, <span class="number">5000</span>, <span class="number">2000</span>]]</span><br><span class="line">ax3.hist(x_multi, n_bins, histtype=<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line">ax3.set_title(<span class="string">&#x27;不同样本容量&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fig.tight_layout() <span class="comment">#使图形紧凑</span></span><br><span class="line"><span class="comment">#plt.show()</span></span><br><span class="line">fig1= plt.gcf()</span><br><span class="line">pympl(fig1)</span><br></pre></td></tr></table></figure>
<p>这个代码是有错的，没找出来咋改，气死我了睡觉了。</p>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p>visdom使用,<a href="https://www.cnblogs.com/fanghao/p/10256287.html">https://www.cnblogs.com/fanghao/p/10256287.html</a><br>visdom激活服务失败,<a href="https://blog.csdn.net/zl1107604962/article/details/104229548?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-3.control">https://blog.csdn.net/zl1107604962/article/details/104229548?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-3.control</a></p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>青岛房价可视化与价格分析</title>
    <url>/2021/02/09/%E9%9D%92%E5%B2%9B%E4%BA%8C%E6%89%8B%E6%88%BF%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B8%8E%E4%BB%B7%E6%A0%BC%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>新房、二手房、租房：从爬虫到建模</p>
<a id="more"></a>

<p>逛B站看到一个爬链家的视频，正好课程论文不知道写什么，遂上手试了试，一不做二不休，陆陆续续完成了这篇博客。</p>
<h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><h2 id="新房"><a href="#新房" class="headerlink" title="新房"></a>新房</h2><p>爬取的内容长这样：</p>
<p><img src="https://s3.ax1x.com/2021/02/12/yrZOYD.png"></p>
<h2 id="二手房"><a href="#二手房" class="headerlink" title="二手房"></a>二手房</h2><h2 id="租房"><a href="#租房" class="headerlink" title="租房"></a>租房</h2><h1 id="—下面是新房的—"><a href="#—下面是新房的—" class="headerlink" title="—下面是新房的—"></a>—下面是新房的—</h1><h1 id="数据概览"><a href="#数据概览" class="headerlink" title="数据概览"></a>数据概览</h1><p>导入基础包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> statistics <span class="keyword">as</span> stat</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> warnings<span class="comment">#忽略错误</span></span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"><span class="comment">#中文注释</span></span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"><span class="comment">#正常显示负号</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>导入文件的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readdata</span>():</span></span><br><span class="line">    columns_name = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;sale&#x27;</span>, <span class="string">&#x27;rooms&#x27;</span>, <span class="string">&#x27;areas&#x27;</span>, <span class="string">&#x27;city&#x27;</span>, <span class="string">&#x27;per_price&#x27;</span>, <span class="string">&#x27;total_price&#x27;</span>]</span><br><span class="line">    df = pd.read_csv(<span class="string">&#x27;../data/lianjia_qdxinfang.csv&#x27;</span>, names = columns_name)</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure>
<p>导入之后长这样：</p>
<p><img src="https://s3.ax1x.com/2021/02/12/yrZHw6.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 933 entries, 0 to 932
Data columns (total 8 columns):
 #   Column       Non-Null Count  Dtype 
---  ------       --------------  ----- 
 0   name         933 non-null    object
 1   type         933 non-null    object
 2   sale         933 non-null    object
 3   rooms        723 non-null    object
 4   areas        730 non-null    object
 5   city         933 non-null    object
 6   per_price    933 non-null    object
 7   total_price  620 non-null    object
dtypes: object(8)
memory usage: 58.4+ KB</code></pre>
<p>变量的格式都是object</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>




<pre><code>name             0
type             0
sale             0
rooms          210
areas          203
city             0
per_price        0
total_price    313
dtype: int64</code></pre>
<p>删掉rooms这210个数据，但是total_price怎么也删了一些，还剩下185个缺失值的，也就是说total_price不是唯一缺失的列，他的缺失是因为rooms和areas.</p>
<h2 id="初步清洗数据"><a href="#初步清洗数据" class="headerlink" title="初步清洗数据"></a>初步清洗数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">step1</span>(<span class="params">df</span>):</span></span><br><span class="line">    df.dropna(axis = <span class="number">0</span>, subset=[<span class="string">&#x27;areas&#x27;</span>,<span class="string">&#x27;rooms&#x27;</span>, <span class="string">&#x27;total_price&#x27;</span>], how = <span class="string">&#x27;any&#x27;</span>, inplace=<span class="literal">True</span>) <span class="comment">#加上了total_price</span></span><br><span class="line">    <span class="comment"># 对于 total_price 的处理 把 nan 处理为0</span></span><br><span class="line">    df.fillna(<span class="number">0</span>,inplace = <span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 把 per_price 的 价格待定 处理为0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> df.index:</span><br><span class="line">        <span class="keyword">if</span> df[<span class="string">&#x27;per_price&#x27;</span>][i] == <span class="string">&#x27;价格待定&#x27;</span>:</span><br><span class="line">            df[<span class="string">&#x27;per_price&#x27;</span>][i] = <span class="number">0</span></span><br><span class="line">    df.reset_index(drop = <span class="literal">True</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 538 entries, 0 to 537
Data columns (total 8 columns):
 #   Column       Non-Null Count  Dtype 
---  ------       --------------  ----- 
 0   name         538 non-null    object
 1   type         538 non-null    object
 2   sale         538 non-null    object
 3   rooms        538 non-null    object
 4   areas        538 non-null    object
 5   city         538 non-null    object
 6   per_price    538 non-null    object
 7   total_price  538 non-null    object
dtypes: object(8)
memory usage: 33.8+ KB</code></pre>
<h2 id="正则-尝试"><a href="#正则-尝试" class="headerlink" title="正则 尝试"></a>正则 尝试</h2><p>第一次自己写正则表达式，先试试提了个啥出来再写函数</p>
<p>total_price处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = re.findall(<span class="string">&#x27;\d&#x27;</span>, df[<span class="string">&#x27;total_price&#x27;</span>][<span class="number">1</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join(a)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;675&#39;</code></pre>
<p>areas处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = re.findall(<span class="string">&#x27;\d*&#x27;</span>,df[<span class="string">&#x27;areas&#x27;</span>][<span class="number">0</span>])</span><br><span class="line">a[<span class="number">0</span>].split(<span class="string">&#x27;-&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;49&#39;, &#39;105&#39;]</code></pre>
<p>rooms处理，单纯分成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = re.findall(<span class="string">&#x27;\d&#x27;</span>,df[<span class="string">&#x27;rooms&#x27;</span>][<span class="number">0</span>])</span><br><span class="line">a = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br><span class="line">stat.mean(a)</span><br></pre></td></tr></table></figure>




<pre><code>1.5</code></pre>
<h2 id="切分字符串-函数"><a href="#切分字符串-函数" class="headerlink" title="切分字符串 函数"></a>切分字符串 函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">step2</span>(<span class="params">df</span>):</span> </span><br><span class="line">    area_min, area_max = [], []</span><br><span class="line">    rooms_mean, price, per_price = [], [], []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> df.index:</span><br><span class="line">        <span class="comment"># per_price</span></span><br><span class="line">        per_price.append(<span class="built_in">int</span>(df[<span class="string">&#x27;per_price&#x27;</span>][i]))</span><br><span class="line">        <span class="comment"># cnm 先弄 areas</span></span><br><span class="line">        a1 = re.findall(<span class="string">&#x27;\d*[-]\d*&#x27;</span>,df[<span class="string">&#x27;areas&#x27;</span>][i]) <span class="comment"># tmd有的是范围有的是一个给定值 这里是范围的正则式子</span></span><br><span class="line">        <span class="keyword">if</span> a1 == []:</span><br><span class="line">            list1 = <span class="string">&quot;&quot;</span>.join(re.findall(<span class="string">&#x27;[\d*]&#x27;</span>,df[<span class="string">&#x27;areas&#x27;</span>][i])) <span class="comment"># list1 是要添加的那个值</span></span><br><span class="line">            area_min.append(<span class="built_in">int</span>(list1))</span><br><span class="line">            area_max.append(<span class="built_in">int</span>(list1))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a1 = a1[<span class="number">0</span>].split(<span class="string">&#x27;-&#x27;</span>) <span class="comment">#[&#x27;49-105&#x27;] 切分一下 变为 [&#x27;49&#x27;, &#x27;105&#x27;]</span></span><br><span class="line">            list1 = [<span class="built_in">int</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> a1] <span class="comment"># 将列表中的字符串转换为数字</span></span><br><span class="line"></span><br><span class="line">            area_min.append(list1[<span class="number">0</span>])</span><br><span class="line">            area_max.append(list1[<span class="number">1</span>])</span><br><span class="line">        <span class="comment"># ok 好起来了 再弄rooms 算平均值</span></span><br><span class="line">        a2 = [<span class="built_in">int</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> re.findall(<span class="string">&#x27;\d&#x27;</span>,df[<span class="string">&#x27;rooms&#x27;</span>][i])] <span class="comment"># 这里就缩写了</span></span><br><span class="line">        rooms_mean.append(ceil(stat.mean(a2))) <span class="comment"># 不需要起名字 list3 了</span></span><br><span class="line">        <span class="comment"># total_price</span></span><br><span class="line">        <span class="keyword">if</span> df[<span class="string">&#x27;total_price&#x27;</span>][i] == <span class="number">0</span>: <span class="comment"># 我把nan用0全部填充了</span></span><br><span class="line">            price.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a3 = re.findall(<span class="string">&#x27;\d&#x27;</span>, df[<span class="string">&#x27;total_price&#x27;</span>][i])</span><br><span class="line">            list3 = <span class="string">&#x27;&#x27;</span>.join(a3)</span><br><span class="line">            price.append(<span class="built_in">int</span>(list3))</span><br><span class="line">    df[<span class="string">&#x27;area_min&#x27;</span>] = area_min</span><br><span class="line">    df[<span class="string">&#x27;area_max&#x27;</span>] = area_max</span><br><span class="line">    df[<span class="string">&#x27;rooms_mean&#x27;</span>] = rooms_mean</span><br><span class="line">    df[<span class="string">&#x27;total_price&#x27;</span>] = price</span><br><span class="line">    df[<span class="string">&#x27;per_price&#x27;</span>] = per_price</span><br><span class="line">    df.drop(df.columns[[<span class="number">3</span>,<span class="number">4</span>]], axis = <span class="number">1</span>, inplace = <span class="literal">True</span>) <span class="comment"># 删掉 areas 和 rooms</span></span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure>

<h1 id="数据探索"><a href="#数据探索" class="headerlink" title="数据探索"></a>数据探索</h1><h2 id="词云图-词频统计"><a href="#词云图-词频统计" class="headerlink" title="词云图 词频统计"></a>词云图 词频统计</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">title_cloud = df[<span class="string">&#x27;name&#x27;</span>].tolist()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;../sub/cloud_xinfang.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> title_cloud:</span><br><span class="line">        f.write(i+<span class="string">&#x27;\n&#x27;</span>) <span class="comment">#\t也行 不行再换</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="comment">#import jieba.analyse as analyse</span></span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_wordcloud</span>():</span></span><br><span class="line">    comment_text = <span class="built_in">open</span>(<span class="string">&#x27;../sub/cloud_xinfang.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    cut_text = <span class="string">&quot; &quot;</span>.join(jieba.cut(comment_text))</span><br><span class="line">    color_mask = imageio.imread(<span class="string">&quot;../pic/dance_girl01.png&quot;</span>) <span class="comment"># 读取背景图片</span></span><br><span class="line">    cloud = WordCloud(</span><br><span class="line">        <span class="comment">#设置字体，不指定就会出现乱码</span></span><br><span class="line">        font_path = <span class="string">&quot;../pic/STFANGSO.ttf&quot;</span>,        </span><br><span class="line">        <span class="comment">#设置背景色</span></span><br><span class="line">        background_color = <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">        <span class="comment">#词云形状</span></span><br><span class="line">        mask = color_mask,</span><br><span class="line">        <span class="comment">#允许最大词汇</span></span><br><span class="line">        max_words = <span class="number">800</span>,</span><br><span class="line">        <span class="comment">#最大号字体</span></span><br><span class="line">        max_font_size = <span class="number">40</span></span><br><span class="line">    )</span><br><span class="line">    word_cloud = cloud.generate(cut_text) <span class="comment"># 产生词云</span></span><br><span class="line">    word_cloud.to_file(<span class="string">&quot;../sub/cloud_xinfang.jpg&quot;</span>) <span class="comment">#保存图片</span></span><br><span class="line">    <span class="comment">#  显示词云图片</span></span><br><span class="line">    plt.imshow(word_cloud)</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    draw_wordcloud()</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2021/02/12/yrZbTK.jpg" alt="词云图"></p>
<h2 id="热力图-相关分析"><a href="#热力图-相关分析" class="headerlink" title="热力图 相关分析"></a>热力图 相关分析</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#分析各个特征与房价的相关性，相关性的分析最好使用热力图</span></span><br><span class="line">corrmat = df.corr()</span><br><span class="line">fig, axs = plt.subplots(figsize=(<span class="number">12</span>,<span class="number">9</span>))</span><br><span class="line">sns.heatmap(corrmat, square=<span class="literal">True</span>, cmap=<span class="string">&#x27;coolwarm&#x27;</span>)</span><br><span class="line">axs.set_title(<span class="string">&#x27;相关分析 - 热力图&#x27;</span>, size=<span class="number">15</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2021/02/12/yrZoO1.png" alt="热力图"></p>
<h2 id="正态分布图-分布"><a href="#正态分布图-分布" class="headerlink" title="正态分布图 分布"></a>正态分布图 分布</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cont_features = [<span class="string">&#x27;total_price&#x27;</span>, <span class="string">&#x27;per_price&#x27;</span>]</span><br><span class="line">fig, axs = plt.subplots(figsize=(<span class="number">20</span>, <span class="number">8</span>),nrows = <span class="number">1</span>, ncols = <span class="number">2</span>)</span><br><span class="line">plt.subplots_adjust(right=<span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, feature <span class="keyword">in</span> <span class="built_in">enumerate</span>(cont_features):    </span><br><span class="line">    sns.distplot(df[feature], hist=<span class="literal">True</span>, color=<span class="string">&#x27;#2ecc71&#x27;</span>, ax=axs[i])</span><br><span class="line">    axs[i].set_xlabel(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    axs[i].tick_params(axis=<span class="string">&#x27;x&#x27;</span>, labelsize=<span class="number">20</span>)</span><br><span class="line">    axs[i].tick_params(axis=<span class="string">&#x27;y&#x27;</span>, labelsize=<span class="number">20</span>)</span><br><span class="line">    axs[i].legend(loc=<span class="string">&#x27;upper right&#x27;</span>, prop=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">20</span>&#125;)</span><br><span class="line">    axs[i].set_title(<span class="string">&#x27;&#123;&#125;变量的正态分布图&#x27;</span>.<span class="built_in">format</span>(feature), size=<span class="number">20</span>, y=<span class="number">1.05</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>



<p><img src="https://s3.ax1x.com/2021/02/12/yrZLFO.png" alt="正态分布图"></p>
<h2 id="箱线图-分布"><a href="#箱线图-分布" class="headerlink" title="箱线图 分布"></a>箱线图 分布</h2><p>箱线图是一种用作显示一组数据分散情况资料的统计图，因形状如箱子而得名。它能显示出一组数据的最大值、最小值、中位数、及上下四分位数。<br>箱形图绘制须使用常用的统计量，能提供有关数据位置和分散情况的关键信息，尤其在比较不同的母体数据时更可表现其差异。<br>箱形图的绘制主要包含六个数据节点，需要先将数据从大到小进行排列，然后分别计算出它的上边缘，上四分位数，中位数，下四分位数，下边缘，还有一个异常值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f,ax = plt.subplots(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">fig = sns.boxplot(x = <span class="string">&#x27;city&#x27;</span>, y = <span class="string">&#x27;total_price&#x27;</span>, data = df)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;总价（万元）&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;不同城区的新房总价对比箱线图&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#plt.savefig(&#x27;../sub/boxplot1.png&#x27;,width=6,height=4, dpi=900,bbox_inches=&#x27;tight&#x27;)</span></span><br></pre></td></tr></table></figure>


<p><img src="https://s3.ax1x.com/2021/02/12/yrZXfe.png" alt="箱线图"></p>
<h1 id="特征type-插入"><a href="#特征type-插入" class="headerlink" title="特征type 插入"></a>特征type 插入</h1><p>为什么什么type这个列？还不是因为数据偏态分布严重，所以想把房价分成两部分，一种是95%，另一种是那剩下的5%。<br>95%象征的就是大部分人可以接受的价格。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bak</span>(<span class="params">tmp</span>):</span></span><br><span class="line">    g = df.groupby(<span class="string">&#x27;city&#x27;</span>).describe()</span><br><span class="line">    g = g.total_price</span><br><span class="line">    df1 = pd.DataFrame()</span><br><span class="line">    df2 = pd.DataFrame()</span><br><span class="line">    list1, list2 = [], []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> g.index:</span><br><span class="line">        q3 = g.loc[j][<span class="number">6</span>]</span><br><span class="line">        q1 = g.loc[j][<span class="number">4</span>]</span><br><span class="line">        up = q3 + <span class="number">1.5</span> *(q3 - q1)</span><br><span class="line">        down = q1 - <span class="number">1.5</span> *(q3 - q1)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> df.index:</span><br><span class="line">            <span class="keyword">if</span> df.city[i] == j:</span><br><span class="line">                <span class="keyword">if</span> (tmp.loc[i,<span class="string">&#x27;total_price&#x27;</span>] &lt;= up) &amp; (tmp.loc[i,<span class="string">&#x27;total_price&#x27;</span>] &gt;= down): <span class="comment"># 正态分布的</span></span><br><span class="line">                    list1.append(i) </span><br><span class="line">                    tmp1 = tmp.drop(list1)  <span class="comment"># 扔掉</span></span><br><span class="line">                <span class="keyword">if</span> (tmp.loc[i,<span class="string">&#x27;total_price&#x27;</span>] &lt; down) | (tmp.loc[i,<span class="string">&#x27;total_price&#x27;</span>] &gt; up): <span class="comment"># 过大过小的 </span></span><br><span class="line">                    list2.append(i)</span><br><span class="line">                    tmp2 = tmp.drop(list2) <span class="comment"># 扔掉</span></span><br><span class="line">    tmp1.reset_index(drop = <span class="literal">True</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">    tmp2.reset_index(drop = <span class="literal">True</span>, inplace = <span class="literal">True</span>) <span class="comment"># df1 是异常值， df2是属于正态分布的</span></span><br><span class="line">    tmp1[<span class="string">&#x27;y&#x27;</span>] = <span class="number">0</span> </span><br><span class="line">    tmp2[<span class="string">&#x27;y&#x27;</span>] = <span class="number">1</span> <span class="comment"># 正态分布</span></span><br><span class="line">    <span class="keyword">return</span> tmp1, tmp2    </span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2021/02/12/yrZ7ex.png"></p>
<h1 id="数据探索-1"><a href="#数据探索-1" class="headerlink" title="数据探索"></a>数据探索</h1><p>接回上一章节的数据探索</p>
<p>主程序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    df = readdata()</span><br><span class="line">    df = step1(df)</span><br><span class="line">    df = step2(df)</span><br><span class="line">    df1, df2 = bak(df)</span><br></pre></td></tr></table></figure>

<h2 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h2><p>重新做箱线图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f,ax = plt.subplots(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">fig = sns.boxplot(x = <span class="string">&#x27;city&#x27;</span>, y = <span class="string">&#x27;total_price&#x27;</span>, data = df2)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;总价（万元）&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;不同城区的新房总价对比箱线图&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#plt.savefig(&#x27;../sub/boxplot1.png&#x27;,width=6,height=4, dpi=900,bbox_inches=&#x27;tight&#x27;)</span></span><br></pre></td></tr></table></figure>


<p><img src="https://s3.ax1x.com/2021/02/12/yrZvSH.png"></p>
<h2 id="小提琴图-分布"><a href="#小提琴图-分布" class="headerlink" title="小提琴图 分布"></a>小提琴图 分布</h2><p>是用来展示多组数据的分布状态以及概率密度。这种图表结合了箱形图和密度图的特征，主要用来显示数据的分布形状。跟箱形图类似，但是在密度层面展示更好。在数据量非常大不方便一个一个展示的时候小提琴图特别适用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.violinplot(data=df1[<span class="string">&#x27;total_price&#x27;</span>], color=<span class="string">&#x27;#e74c3c&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2a80366a128&gt;</code></pre>
<p><img src="https://s3.ax1x.com/2021/02/12/yrZxld.png"></p>
<h2 id="频数条形图-统计个数"><a href="#频数条形图-统计个数" class="headerlink" title="频数条形图 统计个数"></a>频数条形图 统计个数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, axs = plt.subplots(figsize=(<span class="number">20</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">sns.countplot(x=<span class="string">&#x27;city&#x27;</span>, data = df[df[<span class="string">&#x27;sale&#x27;</span>] == <span class="string">&#x27;在售&#x27;</span>])</span><br><span class="line">plt.xlabel(<span class="string">&#x27;城区&#x27;</span>, size=<span class="number">15</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;房屋个数累计&#x27;</span>, size=<span class="number">15</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;x&#x27;</span>, labelsize=<span class="number">15</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, labelsize=<span class="number">15</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper right&#x27;</span>, prop=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">15</span>&#125;)</span><br><span class="line">plt.title(<span class="string">&#x27;各个城区在售的房屋数量柱状图&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<pre><code>No handles with labels found to put in legend.</code></pre>
<p><img src="https://s3.ax1x.com/2021/02/12/yrZz6A.png"></p>
<p>提取sale状态为在售的房子，对各个城区进行计数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, axs = plt.subplots(figsize=(<span class="number">20</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">sns.countplot(x=<span class="string">&#x27;rooms_mean&#x27;</span>, hue=<span class="string">&#x27;city&#x27;</span>, data=df)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;室厅数&#x27;</span>, size=<span class="number">15</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;房屋个数累计&#x27;</span>, size=<span class="number">15</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;x&#x27;</span>, labelsize=<span class="number">15</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, labelsize=<span class="number">15</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper right&#x27;</span>, prop=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">15</span>&#125;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://s3.ax1x.com/2021/02/12/yreSOI.png"></p>
<p>各个城市的室厅数，一般都是几室几厅的说，这个由于原数据的问题，只能取一个新特征。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, axs = plt.subplots(figsize=(<span class="number">20</span>, <span class="number">8</span>))</span><br><span class="line">sns.countplot(x=<span class="string">&#x27;city&#x27;</span>, hue=<span class="string">&#x27;sale&#x27;</span>, data = df)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;城区&#x27;</span>, size=<span class="number">15</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;房屋个数累计&#x27;</span>, size=<span class="number">15</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;x&#x27;</span>, labelsize=<span class="number">15</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, labelsize=<span class="number">15</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper right&#x27;</span>, prop=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">15</span>&#125;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://s3.ax1x.com/2021/02/12/yre9mt.png"></p>
<p>各个城区的房子销售情况，取值是在售、售罄、未开盘。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, axs = plt.subplots(figsize=(<span class="number">20</span>, <span class="number">8</span>))</span><br><span class="line">sns.countplot(x=<span class="string">&#x27;city&#x27;</span>, hue=<span class="string">&#x27;type&#x27;</span>, data = df)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;城区&#x27;</span>, size=<span class="number">15</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;房屋个数累计&#x27;</span>, size=<span class="number">15</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;x&#x27;</span>, labelsize=<span class="number">15</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, labelsize=<span class="number">15</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper right&#x27;</span>, prop=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">15</span>&#125;)</span><br><span class="line">plt.title(<span class="string">&#x27;在售房种类&#x27;</span>, size = <span class="number">15</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://s3.ax1x.com/2021/02/12/yreC0P.png"></p>
<p>各个城区挂卖的房子种类</p>
<h1 id="—下面是二手房—"><a href="#—下面是二手房—" class="headerlink" title="—下面是二手房—"></a>—下面是二手房—</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> statistics <span class="keyword">as</span> stat</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> warnings<span class="comment">#忽略错误</span></span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line"><span class="keyword">from</span> xgboost.sklearn <span class="keyword">import</span> XGBClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_curve, auc</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> StratifiedKFold</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder, LabelEncoder, StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder, LabelEncoder, StandardScaler</span><br></pre></td></tr></table></figure>

<h1 id="导入文件"><a href="#导入文件" class="headerlink" title="导入文件"></a>导入文件</h1><p>导入数据 并合并所有的数据文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2</span></span><br><span class="line">upath = <span class="string">&#x27;C:/.../data/ershoufang/&#x27;</span> <span class="comment"># 举例</span></span><br><span class="line">list1 = os.listdir(upath)</span><br><span class="line"><span class="keyword">for</span> filename, i <span class="keyword">in</span> <span class="built_in">zip</span>(list1, <span class="built_in">range</span>(<span class="built_in">len</span>(list1))): </span><br><span class="line">    columns_name = [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;address&#x27;</span>, <span class="string">&#x27;houseInfo&#x27;</span>, <span class="string">&#x27;followInfo&#x27;</span>, <span class="string">&#x27;tags&#x27;</span>, <span class="string">&#x27;totalPrice&#x27;</span>, <span class="string">&#x27;unitPrice&#x27;</span>]</span><br><span class="line">    <span class="comment">#name1 = re.findall(&#x27;^[a-z]*[_][a-z]*[_][a-z]*&#x27;, filename[i])</span></span><br><span class="line">        </span><br><span class="line">    tmp = pd.read_csv(upath + filename, names = columns_name) <span class="comment"># 读取文件后的临时变量</span></span><br><span class="line">    tmp[<span class="string">&#x27;city&#x27;</span>] = re.findall(<span class="string">&#x27;[a-z]*&#x27;</span>,filename)[<span class="number">4</span>] <span class="comment"># shinan</span></span><br><span class="line">    tmp.drop(<span class="string">&#x27;followInfo&#x27;</span>, axis = <span class="number">1</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        df = tmp</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        df = pd.concat([df,tmp] ,axis = <span class="number">0</span>) <span class="comment">#ignore_index=True</span></span><br><span class="line">df.reset_index(drop = <span class="literal">True</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>title</th>
      <th>address</th>
      <th>houseInfo</th>
      <th>tags</th>
      <th>totalPrice</th>
      <th>unitPrice</th>
      <th>city</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>美立方套三精装修满五唯一 户型方正 南北通透</td>
      <td>天泰城美立方 ,十梅庵</td>
      <td>3室1厅 | 89.84平米 | 南 北 | 精装 | 中楼层(共11层) | 2011年建...</td>
      <td>VR房源,房本满五年,随时看房</td>
      <td>142.0</td>
      <td>单价15806元/平米</td>
      <td>chengyang</td>
    </tr>
    <tr>
      <th>1</th>
      <td>白沙河公园套二洋房，户型方正，刚需好房</td>
      <td>崂山水岸绿洲 ,夏庄</td>
      <td>2室2厅 | 87.99平米 | 南 | 精装 | 中楼层(共6层)  | 板楼</td>
      <td>VR房源,房本满五年</td>
      <td>105.0</td>
      <td>单价11934元/平米</td>
      <td>chengyang</td>
    </tr>
    <tr>
      <th>2</th>
      <td>精装小套三，次顶楼，看河看景，全天采光</td>
      <td>卓越蔚蓝群岛 ,女姑</td>
      <td>3室2厅 | 85.65平米 | 南 | 精装 | 高楼层(共11层) | 2015年建 | 板楼</td>
      <td>VR房源,房本满五年,随时看房</td>
      <td>124.0</td>
      <td>单价14478元/平米</td>
      <td>chengyang</td>
    </tr>
    <tr>
      <th>3</th>
      <td>急售，精装修，好楼层，价格可议，随时可看房。</td>
      <td>中铁华胥美邦 ,流亭</td>
      <td>3室2厅 | 88.87平米 | 南 北 | 精装 | 中楼层(共13层) | 2014年建...</td>
      <td>VR房源,房本满两年,随时看房</td>
      <td>135.0</td>
      <td>单价15191元/平米</td>
      <td>chengyang</td>
    </tr>
    <tr>
      <th>4</th>
      <td>天泰城美立方套三双卫自住装修保持好</td>
      <td>天泰城美立方 ,十梅庵</td>
      <td>3室2厅 | 123.93平米 | 南 北 | 精装 | 中楼层(共9层) | 2012年建...</td>
      <td>VR房源,房本满两年,随时看房</td>
      <td>186.0</td>
      <td>单价15009元/平米</td>
      <td>chengyang</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 23169 entries, 0 to 23168
Data columns (total 7 columns):
 #   Column      Non-Null Count  Dtype  
---  ------      --------------  -----  
 0   title       23169 non-null  object 
 1   address     23169 non-null  object 
 2   houseInfo   23169 non-null  object 
 3   tags        22440 non-null  object 
 4   totalPrice  23169 non-null  float64
 5   unitPrice   23169 non-null  object 
 6   city        23169 non-null  object 
dtypes: float64(1), object(6)
memory usage: 1.2+ MB</code></pre>
<h1 id="切分字符串-提取有用内容"><a href="#切分字符串-提取有用内容" class="headerlink" title="切分字符串 提取有用内容"></a>切分字符串 提取有用内容</h1><p>提取含信息的变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">floor_count</span>(<span class="params">a</span>):</span> </span><br><span class="line">    <span class="comment">#中楼层(共11层)</span></span><br><span class="line">    <span class="comment"># 第一个汉字</span></span><br><span class="line">    hanzi = re.findall(<span class="string">&#x27;^[\u4e00-\u9fa5]&#x27;</span>, a)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#print(hanzi)</span></span><br><span class="line">    <span class="comment"># 数字</span></span><br><span class="line">    shuzi = re.findall(<span class="string">&#x27;\d+&#x27;</span>, a)[<span class="number">0</span>]</span><br><span class="line">    shuzi = <span class="built_in">int</span>(shuzi)</span><br><span class="line">    <span class="comment">#print(shuzi)</span></span><br><span class="line">    <span class="keyword">if</span> hanzi ==  <span class="string">&#x27;低&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>((shuzi/<span class="number">3</span>)/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> hanzi ==  <span class="string">&#x27;中&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>((shuzi/<span class="number">3</span>)*<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> hanzi ==  <span class="string">&#x27;高&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(shuzi-((shuzi/<span class="number">3</span>)/<span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">city_change</span>(<span class="params">b</span>):</span></span><br><span class="line">    <span class="comment"># chengyang</span></span><br><span class="line">    <span class="comment"># 市南市北李沧崂山黄岛城阳胶州即墨平度莱西</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="string">&#x27;shinan&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;市南&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="string">&#x27;shibei&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;市北&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="string">&#x27;licang&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;李沧&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="string">&#x27;laoshan&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;崂山&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="string">&#x27;huangdao&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;黄岛&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="string">&#x27;chengyang&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;城阳&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="string">&#x27;jiaozhou&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;胶州&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="string">&#x27;jimo&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;即墨&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="string">&#x27;pingdu&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;平度&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="string">&#x27;laixi&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;莱西&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_age</span>(<span class="params">c</span>):</span></span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2021</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">2021</span>-<span class="built_in">int</span>(c <span class="keyword">or</span> <span class="number">0</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">step2</span>(<span class="params">df</span>):</span></span><br><span class="line">    c=<span class="number">1</span></span><br><span class="line">    shi, ting, area, category, age, floor = [], [], [], [], [], []</span><br><span class="line">    price,city2 = [], []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line">        <span class="comment"># 提取 厅室</span></span><br><span class="line">        list1 = df.loc[i,<span class="string">&#x27;houseInfo&#x27;</span>]</span><br><span class="line">        <span class="comment">#print(list1)</span></span><br><span class="line">        list1 = list1.split(<span class="string">&#x27; | &#x27;</span>) <span class="comment"># [&#x27;3室1厅&#x27;, &#x27;89.84平米&#x27;, &#x27;南 北&#x27;, &#x27;精装&#x27;, &#x27;中楼层(共11层)&#x27;, &#x27;2011年建&#x27;, &#x27;板楼&#x27;]</span></span><br><span class="line">        shi.append(<span class="built_in">int</span>(re.findall(<span class="string">&#x27;\d*&#x27;</span>, list1[<span class="number">0</span>])[<span class="number">0</span>])) <span class="comment"># &#x27;3室1厅&#x27; # [&#x27;3&#x27;, &#x27;&#x27;, &#x27;1&#x27;, &#x27;&#x27;, &#x27;&#x27;] # 3</span></span><br><span class="line">        ting.append(<span class="built_in">int</span>(re.findall(<span class="string">&#x27;\d*&#x27;</span>, list1[<span class="number">0</span>])[<span class="number">2</span>])) <span class="comment"># 1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 提取 面积</span></span><br><span class="line">        area.append(<span class="built_in">float</span>(re.findall(<span class="string">&#x27;\d+.\d+|\d+&#x27;</span>, list1[<span class="number">1</span>])[<span class="number">0</span>]))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 精装 毛坯 其他</span></span><br><span class="line">        category.append(list1[<span class="number">3</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 楼层 </span></span><br><span class="line">        f = list1[<span class="number">4</span>] <span class="comment"># &#x27;中楼层(共11层)&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(f) &gt; <span class="number">5</span> : <span class="comment"># 一般是8 9， 有的只有层数 我看到的</span></span><br><span class="line">            floor.append(floor_count(f))</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># 3 层</span></span><br><span class="line">            floor.append(<span class="built_in">int</span>(re.findall(<span class="string">&#x27;\d+&#x27;</span>, f)[<span class="number">0</span>])) <span class="comment"># 3</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 房龄</span></span><br><span class="line">        age.append(count_age(re.findall(<span class="string">&#x27;\d*&#x27;</span>, list1[<span class="number">5</span>])[<span class="number">0</span>])) <span class="comment"># 有的没有这个 所以不用+ 匹配0次和无数次</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># unitprice 单价</span></span><br><span class="line">        price.append(<span class="built_in">int</span>(re.findall(<span class="string">&#x27;\d+&#x27;</span>, df[<span class="string">&#x27;unitPrice&#x27;</span>][i])[<span class="number">0</span>]))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># city</span></span><br><span class="line">        city2.append(city_change(df[<span class="string">&#x27;city&#x27;</span>][i])) <span class="comment"># chengyang</span></span><br><span class="line">        </span><br><span class="line">    df[<span class="string">&#x27;shi&#x27;</span>] = shi</span><br><span class="line">    df[<span class="string">&#x27;ting&#x27;</span>] = ting</span><br><span class="line">    df[<span class="string">&#x27;area&#x27;</span>] = area</span><br><span class="line">    df[<span class="string">&#x27;category&#x27;</span>] = category</span><br><span class="line">    df[<span class="string">&#x27;age&#x27;</span>] = age</span><br><span class="line">    df[<span class="string">&#x27;floor&#x27;</span>] = floor</span><br><span class="line">    df[<span class="string">&#x27;per_price&#x27;</span>] = price</span><br><span class="line">    df[<span class="string">&#x27;region&#x27;</span>] = city2</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删掉之前的变量 删掉houseinfo tags unitprice;address我也不知道关联啊，删了吧</span></span><br><span class="line">    df.drop(df.columns[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>]], axis = <span class="number">1</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删掉age是2020的行， 删掉floor缺失的行 floor怎么会缺失呢 他应该早给我报错啊..</span></span><br><span class="line">    df = df[-df.age.isin([<span class="number">2021</span>])]</span><br><span class="line">    df = df[-df.age.isin([<span class="number">-78</span>])]</span><br><span class="line">    <span class="comment">#后面发现floor有缺失 我怀疑是类型的事 直接删了吧不做深究</span></span><br><span class="line">    df = df.dropna()</span><br><span class="line">    <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    df = step2(df)</span><br><span class="line">    df.head()</span><br></pre></td></tr></table></figure>

<h1 id="删除负值"><a href="#删除负值" class="headerlink" title="删除负值"></a>删除负值</h1><p>负值这个是后面画图发现的，我现在想想应该是我数据清洗考虑的不全面，这些东西可能做一个describe()就看出来了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># df[df.totalPrice &lt; 0]</span></span><br><span class="line">df[df.per_price &lt; <span class="number">0</span>]</span><br><span class="line"><span class="comment"># df.drop(index=df[df.age &lt; 0].index, inplace=True)</span></span><br><span class="line"><span class="comment"># df  </span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>title</th>
      <th>totalPrice</th>
      <th>shi</th>
      <th>ting</th>
      <th>area</th>
      <th>category</th>
      <th>age</th>
      <th>floor</th>
      <th>per_price</th>
      <th>region</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>美立方套三精装修满五唯一 户型方正 南北通透</td>
      <td>142.0</td>
      <td>3</td>
      <td>1</td>
      <td>89.84</td>
      <td>精装</td>
      <td>10</td>
      <td>7.0</td>
      <td>15806</td>
      <td>城阳</td>
    </tr>
    <tr>
      <th>2</th>
      <td>精装小套三，次顶楼，看河看景，全天采光</td>
      <td>124.0</td>
      <td>3</td>
      <td>2</td>
      <td>85.65</td>
      <td>精装</td>
      <td>6</td>
      <td>9.0</td>
      <td>14478</td>
      <td>城阳</td>
    </tr>
    <tr>
      <th>3</th>
      <td>急售，精装修，好楼层，价格可议，随时可看房。</td>
      <td>135.0</td>
      <td>3</td>
      <td>2</td>
      <td>88.87</td>
      <td>精装</td>
      <td>7</td>
      <td>8.0</td>
      <td>15191</td>
      <td>城阳</td>
    </tr>
    <tr>
      <th>4</th>
      <td>天泰城美立方套三双卫自住装修保持好</td>
      <td>186.0</td>
      <td>3</td>
      <td>2</td>
      <td>123.93</td>
      <td>精装</td>
      <td>9</td>
      <td>6.0</td>
      <td>15009</td>
      <td>城阳</td>
    </tr>
    <tr>
      <th>5</th>
      <td>天泰奥园，平层套三双卫，南北通透，全明户型，公摊低</td>
      <td>180.0</td>
      <td>3</td>
      <td>2</td>
      <td>128.59</td>
      <td>精装</td>
      <td>14</td>
      <td>1.0</td>
      <td>13998</td>
      <td>城阳</td>
    </tr>
  </tbody>
</table>
</div>



<h1 id="title-是户主用来描述自家房子的叙述"><a href="#title-是户主用来描述自家房子的叙述" class="headerlink" title="title 是户主用来描述自家房子的叙述"></a>title 是户主用来描述自家房子的叙述</h1><p>我们要做的工作是 把他的文字提取出来，保存为txt，然后做<strong>词云图</strong>进行展示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="built_in">type</span>(df[<span class="string">&#x27;title&#x27;</span>].tolist()))</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">title_cloud = df[<span class="string">&#x27;title&#x27;</span>].tolist()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;../sub/title_cloud.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> title_cloud:</span><br><span class="line">        f.write(i+<span class="string">&#x27;\n&#x27;</span>) <span class="comment">#\t也行 不行再换</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!pip install jieba -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="comment">#import jieba.analyse as analyse</span></span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_wordcloud</span>():</span></span><br><span class="line">    comment_text = <span class="built_in">open</span>(<span class="string">&#x27;../sub/title_cloud.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    cut_text = <span class="string">&quot; &quot;</span>.join(jieba.cut(comment_text))</span><br><span class="line">    color_mask = imageio.imread(<span class="string">&quot;../pic/dance_girl01.png&quot;</span>) <span class="comment"># 读取背景图片</span></span><br><span class="line">    cloud = WordCloud(</span><br><span class="line">        <span class="comment">#设置字体，不指定就会出现乱码</span></span><br><span class="line">        font_path = <span class="string">&quot;../pic/STFANGSO.ttf&quot;</span>,        </span><br><span class="line">        <span class="comment">#设置背景色</span></span><br><span class="line">        background_color = <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">        <span class="comment">#词云形状</span></span><br><span class="line">        mask = color_mask,</span><br><span class="line">        <span class="comment">#允许最大词汇</span></span><br><span class="line">        max_words = <span class="number">800</span>,</span><br><span class="line">        <span class="comment">#最大号字体</span></span><br><span class="line">        max_font_size = <span class="number">40</span></span><br><span class="line">    )</span><br><span class="line">    word_cloud = cloud.generate(cut_text) <span class="comment"># 产生词云</span></span><br><span class="line">    word_cloud.to_file(<span class="string">&quot;../sub/pic1.jpg&quot;</span>) <span class="comment">#保存图片</span></span><br><span class="line">    <span class="comment">#  显示词云图片</span></span><br><span class="line">    plt.imshow(word_cloud)</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    draw_wordcloud()</span><br></pre></td></tr></table></figure>

<h2 id="热力图-相关分析-1"><a href="#热力图-相关分析-1" class="headerlink" title="热力图 相关分析"></a>热力图 相关分析</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">corrmat = df.corr()</span><br><span class="line">fig, axs = plt.subplots(figsize=(<span class="number">12</span>,<span class="number">9</span>))</span><br><span class="line">sns.heatmap(corrmat, square=<span class="literal">True</span>, cmap=<span class="string">&#x27;coolwarm&#x27;</span>)</span><br><span class="line">axs.set_title(<span class="string">&#x27;相关分析 - 热力图&#x27;</span>, size=<span class="number">15</span>)</span><br></pre></td></tr></table></figure>




<pre><code>Text(0.5, 1.0, &#39;相关分析 - 热力图&#39;)</code></pre>
<p><img src="https://s3.ax1x.com/2021/02/12/yrlbJP.png"></p>
<p>可以看到主要是面积和单价哈</p>
<h1 id="totalprice-单位是万元，也就是房屋的总价"><a href="#totalprice-单位是万元，也就是房屋的总价" class="headerlink" title="totalprice 单位是万元，也就是房屋的总价"></a>totalprice 单位是万元，也就是房屋的总价</h1><p>作图，与region的折线图，也就是探索房价和城区的关系，最后是要做回归的话，也就是房价是因变量，其他的是自变量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.distplot(df[<span class="string">&#x27;totalPrice&#x27;</span>],bins = <span class="number">50</span>)</span><br><span class="line">print(<span class="string">&quot;skewness:%f&quot;</span>%df[<span class="string">&#x27;totalPrice&#x27;</span>].skew())</span><br><span class="line">print(<span class="string">&quot;kurtosis:%f&quot;</span>%df[<span class="string">&#x27;totalPrice&#x27;</span>].kurtosis())</span><br></pre></td></tr></table></figure>

<pre><code>skewness:4.204764
kurtosis:35.250381</code></pre>
<p><img src="https://s3.ax1x.com/2021/02/12/yrlIZd.png"></p>
<p>正偏态，有峰值，多处于0-500w之间</p>
<h1 id="箱形图（Box-plot）"><a href="#箱形图（Box-plot）" class="headerlink" title="箱形图（Box-plot）"></a>箱形图（Box-plot）</h1><p>又称为盒须图、盒式图或箱线图<br>是一种用作显示一组数据分散情况资料的统计图，因形状如箱子而得名。它能显示出一组数据的最大值、最小值、中位数、及上下四分位数。<br>箱形图绘制须使用常用的统计量，能提供有关数据位置和分散情况的关键信息，尤其在比较不同的母体数据时更可表现其差异。<br>箱形图的绘制主要包含六个数据节点，需要先将数据从大到小进行排列，然后分别计算出它的上边缘，上四分位数，中位数，下四分位数，下边缘，还有一个异常值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f,ax = plt.subplots(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">fig = sns.boxplot(x = <span class="string">&#x27;region&#x27;</span>, y = <span class="string">&#x27;totalPrice&#x27;</span>, data = df)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;总价（万元）&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;不同城区的二手房总价对比箱线图&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#plt.savefig(&#x27;../sub/boxplot1.png&#x27;,width=6,height=4, dpi=900,bbox_inches=&#x27;tight&#x27;)</span></span><br></pre></td></tr></table></figure>


<p><img src="https://s3.ax1x.com/2021/02/12/yrlTII.png"></p>
<p>异常值，也不能说是异常值，就是房屋的价格跨度还是太大了，所以接下来我想根据 总价 切分属于正态分布的房价和“异常值”</p>
<p>即 大于箱线图 的上边缘 和 小于 箱线图的下边缘</p>
<h1 id="重新标记数据集-type"><a href="#重新标记数据集-type" class="headerlink" title="重新标记数据集 type"></a>重新标记数据集 type</h1><p>我用重新读入数据的方法，并新建一列type，取值为0和1，0是“异常值”，1是正态分布的值；这样就将某个城区的房屋总价分成正常值和异常值(过高过低，主要是过高的房子)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backspace</span>(<span class="params">tmp</span>):</span></span><br><span class="line"><span class="comment">#     print(tmp.describe())</span></span><br><span class="line">    q3 = tmp.describe().iloc[<span class="number">6</span>,<span class="number">0</span>]</span><br><span class="line">    q1 = tmp.describe().iloc[<span class="number">4</span>,<span class="number">0</span>]</span><br><span class="line">    up = q3 + <span class="number">1.5</span> *(q3 - q1)</span><br><span class="line">    down = q1 - <span class="number">1.5</span> *(q3 - q1) </span><br><span class="line"></span><br><span class="line">    tmp2 = tmp.drop(tmp[(tmp[<span class="string">&#x27;totalPrice&#x27;</span>] &lt; down) | (tmp[<span class="string">&#x27;totalPrice&#x27;</span>] &gt; up)].index) <span class="comment"># tmp2过大过小的</span></span><br><span class="line">    tmp.drop(tmp[(tmp[<span class="string">&#x27;totalPrice&#x27;</span>] &lt;= up) &amp; (tmp[<span class="string">&#x27;totalPrice&#x27;</span>] &gt;= down)].index, inplace = <span class="literal">True</span>) <span class="comment"># tmp1正态分布的</span></span><br><span class="line">    <span class="keyword">return</span> tmp, tmp2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cuttdown</span>(<span class="params">upath</span>):</span></span><br><span class="line">    list1 = os.listdir(upath)</span><br><span class="line">    <span class="keyword">for</span> filename, i <span class="keyword">in</span> <span class="built_in">zip</span>(list1, <span class="built_in">range</span>(<span class="built_in">len</span>(list1))):  <span class="comment">#range(len(list1))</span></span><br><span class="line">        columns_name = [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;address&#x27;</span>, <span class="string">&#x27;houseInfo&#x27;</span>, <span class="string">&#x27;followInfo&#x27;</span>, <span class="string">&#x27;tags&#x27;</span>, <span class="string">&#x27;totalPrice&#x27;</span>, <span class="string">&#x27;unitPrice&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        tmp = pd.read_csv(upath + filename, names = columns_name) <span class="comment"># 读取文件后的临时变量</span></span><br><span class="line">        tmp[<span class="string">&#x27;city&#x27;</span>] = re.findall(<span class="string">&#x27;[a-z]*&#x27;</span>,filename)[<span class="number">4</span>] <span class="comment"># shinan</span></span><br><span class="line">        tmp.drop(<span class="string">&#x27;followInfo&#x27;</span>, axis = <span class="number">1</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#         print(tmp.info())</span></span><br><span class="line">        tmp1, tmp2 = backspace(tmp)</span><br><span class="line"><span class="comment">#         print(tmp1.info())</span></span><br><span class="line"><span class="comment">#         print(tmp2.info())</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            df1 = tmp1</span><br><span class="line">            df2 = tmp2</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            df1 = pd.concat([df1,tmp1] ,axis = <span class="number">0</span>) <span class="comment">#ignore_index=True</span></span><br><span class="line">            df2 = pd.concat([df2,tmp2] ,axis = <span class="number">0</span>)</span><br><span class="line">            </span><br><span class="line">    df1.reset_index(drop = <span class="literal">True</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">    df2.reset_index(drop = <span class="literal">True</span>, inplace = <span class="literal">True</span>) <span class="comment"># df1 是异常值， df2是属于正态分布的</span></span><br><span class="line">    df1[<span class="string">&#x27;type&#x27;</span>] = <span class="number">0</span> <span class="comment"># 异常值</span></span><br><span class="line">    df2[<span class="string">&#x27;type&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> df1, df2</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    path = <span class="string">&#x27;C:/Users/ASUS/Desktop/学位课/应用回归分析/大作业/data/ershoufang/&#x27;</span></span><br><span class="line">    df1, df2 = cuttdown(path)</span><br><span class="line">    df1 = step2(df1)</span><br><span class="line">    df2 = step2(df2)</span><br><span class="line">    df = pd.concat([df1,df2] ,axis = <span class="number">0</span>) <span class="comment"># 19545个样本数 与 第一次读取一样 不同点在于 加了 type 区分 总价的高低水平</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>title</th>
      <th>totalPrice</th>
      <th>type</th>
      <th>shi</th>
      <th>ting</th>
      <th>area</th>
      <th>category</th>
      <th>age</th>
      <th>floor</th>
      <th>per_price</th>
      <th>region</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>香溪庭院 边户 精装修 一楼带老人房 低总价 拎包入住</td>
      <td>370.0</td>
      <td>0</td>
      <td>5</td>
      <td>2</td>
      <td>198.33</td>
      <td>简装</td>
      <td>12</td>
      <td>4.0</td>
      <td>18656</td>
      <td>城阳</td>
    </tr>
    <tr>
      <th>1</th>
      <td>实际287平下叠别墅 带院子 带车位</td>
      <td>310.0</td>
      <td>0</td>
      <td>5</td>
      <td>2</td>
      <td>178.33</td>
      <td>毛坯</td>
      <td>7</td>
      <td>0.0</td>
      <td>17384</td>
      <td>城阳</td>
    </tr>
    <tr>
      <th>2</th>
      <td>高新区 世茂意墅湾 312万住联排 生活配套齐全就这一套</td>
      <td>312.0</td>
      <td>0</td>
      <td>3</td>
      <td>2</td>
      <td>180.44</td>
      <td>毛坯</td>
      <td>6</td>
      <td>3.0</td>
      <td>17292</td>
      <td>城阳</td>
    </tr>
    <tr>
      <th>3</th>
      <td>三层精装别墅出售，独门独院，环境优美，安静不临街</td>
      <td>450.0</td>
      <td>0</td>
      <td>4</td>
      <td>3</td>
      <td>167.85</td>
      <td>精装</td>
      <td>8</td>
      <td>3.0</td>
      <td>26810</td>
      <td>城阳</td>
    </tr>
    <tr>
      <th>5</th>
      <td>世茂玲珑台联排别墅 户型方正 地下室80平 带车位</td>
      <td>400.0</td>
      <td>0</td>
      <td>4</td>
      <td>3</td>
      <td>201.30</td>
      <td>其他</td>
      <td>7</td>
      <td>3.0</td>
      <td>19871</td>
      <td>城阳</td>
    </tr>
  </tbody>
</table>
</div>



<p>然后再看箱线图，果然好很多了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f,ax = plt.subplots(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">fig = sns.boxplot(x = <span class="string">&#x27;region&#x27;</span>, y = <span class="string">&#x27;totalPrice&#x27;</span>, data = df2)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;总价（万元）&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;不同城区的二手房总价对比箱线图&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#plt.savefig(&#x27;../sub/boxplot1.png&#x27;,width=6,height=4, dpi=900,bbox_inches=&#x27;tight&#x27;)</span></span><br></pre></td></tr></table></figure>


<p><img src="https://s3.ax1x.com/2021/02/12/yrlhse.png"></p>
<h1 id="小提琴图-Violin-Plot"><a href="#小提琴图-Violin-Plot" class="headerlink" title="小提琴图 (Violin Plot)"></a>小提琴图 (Violin Plot)</h1><p>是用来展示多组数据的分布状态以及概率密度。这种图表结合了箱形图和密度图的特征，主要用来显示数据的分布形状。跟箱形图类似，但是在密度层面展示更好。在数据量非常大不方便一个一个展示的时候小提琴图特别适用。</p>
<p>本质上还是结合了上面的两个图。</p>
<p>下为df2，正常值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.violinplot(data=df2[<span class="string">&#x27;totalPrice&#x27;</span>], color=<span class="string">&#x27;#e74c3c&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x148a880e160&gt;</code></pre>
<p><img src="https://s3.ax1x.com/2021/02/12/yrlodA.png"></p>
<p>我看有的人图是数据大的在左边 降序排列了</p>
<h1 id="shi-ting-分别对应的是室厅"><a href="#shi-ting-分别对应的是室厅" class="headerlink" title="shi ting 分别对应的是室厅"></a>shi ting 分别对应的是室厅</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.shi.unique()</span><br></pre></td></tr></table></figure>




<pre><code>array([5., 3., 4., 6., 1., 8., 7., 9., 2., 0.])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.ting.unique()</span><br></pre></td></tr></table></figure>




<pre><code>array([2., 3., 4., 1., 7., 5., 0.])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, axs = plt.subplots(figsize=(<span class="number">20</span>, <span class="number">8</span>))</span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">sns.countplot(x=<span class="string">&#x27;shi&#x27;</span>, hue=<span class="string">&#x27;type&#x27;</span>, data=df)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;室&#x27;</span>, size=<span class="number">15</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;房屋个数累计&#x27;</span>, size=<span class="number">15</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;x&#x27;</span>, labelsize=<span class="number">15</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, labelsize=<span class="number">15</span>)</span><br><span class="line">plt.legend([<span class="string">&#x27;异常值&#x27;</span>, <span class="string">&#x27;正常值&#x27;</span>], loc=<span class="string">&#x27;upper right&#x27;</span>, prop=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">15</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">sns.countplot(x=<span class="string">&#x27;ting&#x27;</span>, hue=<span class="string">&#x27;type&#x27;</span>, data=df)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;厅&#x27;</span>, size=<span class="number">15</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;房屋个数累计&#x27;</span>, size=<span class="number">15</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;x&#x27;</span>, labelsize=<span class="number">15</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, labelsize=<span class="number">15</span>)</span><br><span class="line">plt.legend([<span class="string">&#x27;异常值&#x27;</span>, <span class="string">&#x27;正常值&#x27;</span>], loc=<span class="string">&#x27;upper right&#x27;</span>, prop=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">15</span>&#125;)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://s3.ax1x.com/2021/02/12/yrl4qH.png"></p>
<h1 id="area-前面有户型，这里是面积"><a href="#area-前面有户型，这里是面积" class="headerlink" title="area 前面有户型，这里是面积"></a>area 前面有户型，这里是面积</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.violinplot(data=df2[<span class="string">&#x27;area&#x27;</span>], color=<span class="string">&#x27;#e74c3c&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;面积&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>Text(0.5, 0, &#39;面积&#39;)</code></pre>
<p><img src="https://s3.ax1x.com/2021/02/12/yrlHit.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f,ax = plt.subplots(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">fig = sns.boxplot(x = <span class="string">&#x27;region&#x27;</span>, y = <span class="string">&#x27;area&#x27;</span>, data = df2)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;平方米&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;不同城区的二手房面积箱线图&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#plt.savefig(&#x27;../sub/boxplot1.png&#x27;,width=6,height=4, dpi=900,bbox_inches=&#x27;tight&#x27;)</span></span><br></pre></td></tr></table></figure>


<p><img src="https://s3.ax1x.com/2021/02/12/yrlqRf.png"></p>
<h1 id="category-这边主要是有-精装-别墅等"><a href="#category-这边主要是有-精装-别墅等" class="headerlink" title="category 这边主要是有 精装 别墅等"></a>category 这边主要是有 精装 别墅等</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.category.unique()</span><br></pre></td></tr></table></figure>




<pre><code>array([&#39;精装&#39;, &#39;毛坯&#39;, &#39;其他&#39;, &#39;简装&#39;], dtype=object)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_all_decks[<span class="string">&#x27;即墨&#x27;</span>][<span class="string">&#x27;简装&#x27;</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>




<pre><code>370</code></pre>
<p>这个叫堆砌柱状图哈</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pclass_dist</span>(<span class="params">df</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个字典，为每个城区上的每个房子类型计数</span></span><br><span class="line">    city_counts = &#123;<span class="string">&#x27;城阳&#x27;</span>: &#123;&#125;, <span class="string">&#x27;黄岛&#x27;</span>: &#123;&#125;, <span class="string">&#x27;胶州&#x27;</span>: &#123;&#125;, <span class="string">&#x27;即墨&#x27;</span>: &#123;&#125;, <span class="string">&#x27;莱西&#x27;</span>: &#123;&#125;, <span class="string">&#x27;崂山&#x27;</span>: &#123;&#125;, <span class="string">&#x27;李沧&#x27;</span>: &#123;&#125;, <span class="string">&#x27;市北&#x27;</span>: &#123;&#125;, <span class="string">&#x27;市南&#x27;</span>: &#123;&#125;&#125;</span><br><span class="line">    citys = df.columns.levels[<span class="number">0</span>]    </span><br><span class="line"><span class="comment">#     print(citys)</span></span><br><span class="line">    <span class="keyword">for</span> city <span class="keyword">in</span> citys:</span><br><span class="line">        <span class="keyword">for</span> category <span class="keyword">in</span> [<span class="string">&#x27;其他&#x27;</span>,<span class="string">&#x27;毛坯&#x27;</span>,<span class="string">&#x27;简装&#x27;</span>,<span class="string">&#x27;精装&#x27;</span>]:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                count = df[city][category][<span class="number">0</span>]</span><br><span class="line">                city_counts[city][category] = count </span><br><span class="line">            <span class="keyword">except</span> KeyError:</span><br><span class="line">                city_counts[city][category] = <span class="number">0</span></span><br><span class="line">                </span><br><span class="line">    df_citys = pd.DataFrame(city_counts)</span><br><span class="line"><span class="comment">#     print(df_citys)</span></span><br><span class="line">    city_percentages = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> df_citys.columns:</span><br><span class="line">        city_percentages[col] = [(count / df_citys[col].<span class="built_in">sum</span>()) * <span class="number">100</span> <span class="keyword">for</span> count <span class="keyword">in</span> df_citys[col]]</span><br><span class="line">    <span class="keyword">return</span> city_counts, city_percentages</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display_pclass_dist</span>(<span class="params">percentages</span>):</span></span><br><span class="line"></span><br><span class="line">    df_percentages = pd.DataFrame(percentages).transpose()</span><br><span class="line">    city_names = (<span class="string">&#x27;城阳&#x27;</span>, <span class="string">&#x27;黄岛&#x27;</span>, <span class="string">&#x27;胶州&#x27;</span>, <span class="string">&#x27;即墨&#x27;</span>, <span class="string">&#x27;莱西&#x27;</span>, <span class="string">&#x27;崂山&#x27;</span>, <span class="string">&#x27;李沧&#x27;</span>, <span class="string">&#x27;市北&#x27;</span>, <span class="string">&#x27;市南&#x27;</span>)</span><br><span class="line">    bar_count = np.arange(<span class="built_in">len</span>(city_names))  </span><br><span class="line">    bar_width = <span class="number">0.85</span></span><br><span class="line"></span><br><span class="line">    c1 = df_percentages[<span class="number">0</span>]</span><br><span class="line">    c2 = df_percentages[<span class="number">1</span>]</span><br><span class="line">    c3 = df_percentages[<span class="number">2</span>]</span><br><span class="line">    c4 = df_percentages[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">20</span>, <span class="number">10</span>))</span><br><span class="line">    plt.bar(bar_count, c1, color=<span class="string">&#x27;#aba3d5&#x27;</span>, edgecolor=<span class="string">&#x27;white&#x27;</span>, width=bar_width, label=<span class="string">&#x27;其他&#x27;</span>)</span><br><span class="line">    plt.bar(bar_count, c2, bottom=c1, color=<span class="string">&#x27;#b5ffb9&#x27;</span>, edgecolor=<span class="string">&#x27;white&#x27;</span>, width=bar_width, label=<span class="string">&#x27;毛坯&#x27;</span>)</span><br><span class="line">    plt.bar(bar_count, c3, bottom=c1 + c2, color=<span class="string">&#x27;#a3acff&#x27;</span>, edgecolor=<span class="string">&#x27;white&#x27;</span>, width=bar_width, label=<span class="string">&#x27;简装&#x27;</span>)</span><br><span class="line">    plt.bar(bar_count, c4, bottom=c1 + c2 + c3, color=<span class="string">&#x27;#f9bc86&#x27;</span>, edgecolor=<span class="string">&#x27;white&#x27;</span>, width=bar_width, label=<span class="string">&#x27;精装&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Deck&#x27;</span>, size=<span class="number">15</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;房屋类型的百分比&#x27;</span>, size=<span class="number">15</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">    plt.xticks(bar_count, city_names)    </span><br><span class="line">    plt.tick_params(axis=<span class="string">&#x27;x&#x27;</span>, labelsize=<span class="number">15</span>)</span><br><span class="line">    plt.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, labelsize=<span class="number">15</span>)</span><br><span class="line">    </span><br><span class="line">    plt.legend(loc=<span class="string">&#x27;upper left&#x27;</span>, bbox_to_anchor=(<span class="number">1</span>, <span class="number">1</span>), prop=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">15</span>&#125;)</span><br><span class="line">    plt.title(<span class="string">&#x27;城区中的房型分布&#x27;</span>, size=<span class="number">18</span>, y=<span class="number">1.05</span>)   </span><br><span class="line">    </span><br><span class="line">    plt.show()    </span><br><span class="line"></span><br><span class="line">df_all = df</span><br><span class="line">df_all_decks = df_all.groupby([<span class="string">&#x27;region&#x27;</span>, <span class="string">&#x27;category&#x27;</span>]).count().drop(columns=[<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;shi&#x27;</span>, <span class="string">&#x27;ting&#x27;</span>, <span class="string">&#x27;area&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, </span><br><span class="line">                                                                        <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;per_price&#x27;</span>]).rename(columns=&#123;<span class="string">&#x27;totalPrice&#x27;</span>: <span class="string">&#x27;Count&#x27;</span>&#125;).transpose()</span><br><span class="line"></span><br><span class="line">all_deck_count, all_deck_per = get_pclass_dist(df_all_decks)</span><br><span class="line">display_pclass_dist(all_deck_per)</span><br></pre></td></tr></table></figure>


<p><img src="https://s3.ax1x.com/2021/02/12/yrljsg.png"></p>
<h1 id="变量分箱"><a href="#变量分箱" class="headerlink" title="变量分箱"></a>变量分箱</h1><h2 id="age-房屋的年龄"><a href="#age-房屋的年龄" class="headerlink" title="age 房屋的年龄"></a>age 房屋的年龄</h2><p>下面是条形图哈</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.age.unique()</span><br></pre></td></tr></table></figure>




<pre><code>array([12,  7,  6,  8, 10,  9, 11, 13,  4, 17,  5,  3, 14, 15, 16, 18, 20,
       19, 25, 21,  1, 22, 23, 24, 27,  2, 26, 28, 32, 33, 41, 34, 51, 31,
       38, 42, 35, 39, 29, 30, 36, 37, 43, 40, 44, 46, 72, 57, 45, 71, 76,
       56, 68, 49, 47, 64], dtype=int64)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;age&#x27;</span>] = pd.qcut(df[<span class="string">&#x27;age&#x27;</span>], <span class="number">9</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, axs = plt.subplots(figsize=(<span class="number">22</span>, <span class="number">9</span>))</span><br><span class="line">sns.countplot(x=<span class="string">&#x27;age&#x27;</span>, hue=<span class="string">&#x27;type&#x27;</span>, data = df)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;房龄&#x27;</span>, size=<span class="number">15</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;房屋计数&#x27;</span>, size=<span class="number">15</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;x&#x27;</span>, labelsize=<span class="number">10</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, labelsize=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">plt.legend([<span class="string">&#x27;异常值&#x27;</span>, <span class="string">&#x27;正常值&#x27;</span>], loc=<span class="string">&#x27;upper right&#x27;</span>, prop=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">15</span>&#125;)</span><br><span class="line">plt.title(<span class="string">&#x27;正常房价在房龄中的分布&#x27;</span>, size=<span class="number">15</span>, y=<span class="number">1.05</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://s3.ax1x.com/2021/02/12/yrlLz8.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.age.unique()</span><br></pre></td></tr></table></figure>




<pre><code>[(10.0, 13.0], (5.0, 7.0], (-0.001, 5.0], (7.0, 10.0], (13.0, 17.0], (17.0, 22.0], (22.0, 75.0]]
Categories (7, interval[float64]): [(-0.001, 5.0] &lt; (5.0, 7.0] &lt; (7.0, 10.0] &lt; (10.0, 13.0] &lt; (13.0, 17.0] &lt; (17.0, 22.0] &lt; (22.0, 75.0]]</code></pre>
<h2 id="floor-所在的层数"><a href="#floor-所在的层数" class="headerlink" title="floor 所在的层数"></a>floor 所在的层数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.floor.unique()</span><br></pre></td></tr></table></figure>




<pre><code>array([ 4.,  0.,  3.,  2., 10.,  1.,  9., 12., 17.,  5.,  7., 19., 14.,
       16.,  6., 20., 11., 15.,  8., 21., 25., 18., 23., 26., 27., 13.,
       32., 24., 35., 22., 30., 36., 29., 37., 39., 49., 28., 45., 44.,
       34., 33., 31.])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;floor&#x27;</span>] = pd.qcut(df[<span class="string">&#x27;floor&#x27;</span>], <span class="number">9</span>,duplicates = <span class="string">&#x27;drop&#x27;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, axs = plt.subplots(figsize=(<span class="number">22</span>, <span class="number">9</span>))</span><br><span class="line">sns.countplot(x=<span class="string">&#x27;floor&#x27;</span>, hue=<span class="string">&#x27;type&#x27;</span>, data = df)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;楼层&#x27;</span>, size=<span class="number">15</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;房屋计数&#x27;</span>, size=<span class="number">15</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;x&#x27;</span>, labelsize=<span class="number">10</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, labelsize=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">plt.legend([<span class="string">&#x27;异常值&#x27;</span>, <span class="string">&#x27;正常值&#x27;</span>], loc=<span class="string">&#x27;upper right&#x27;</span>, prop=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">15</span>&#125;)</span><br><span class="line">plt.title(<span class="string">&#x27;正常房价在楼层中的分布&#x27;</span>, size=<span class="number">15</span>, y=<span class="number">1.05</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://s3.ax1x.com/2021/02/12/yrlXQS.png"></p>
<h1 id="per-price-均价"><a href="#per-price-均价" class="headerlink" title="per_price 均价"></a>per_price 均价</h1><p>正态分布图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cont_features = [<span class="string">&#x27;totalPrice&#x27;</span>, <span class="string">&#x27;per_price&#x27;</span>]</span><br><span class="line">norm = df[<span class="string">&#x27;type&#x27;</span>] == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">fig, axs = plt.subplots(figsize=(<span class="number">20</span>, <span class="number">8</span>),nrows = <span class="number">1</span>, ncols = <span class="number">2</span>)</span><br><span class="line">plt.subplots_adjust(right=<span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, feature <span class="keyword">in</span> <span class="built_in">enumerate</span>(cont_features):    </span><br><span class="line"></span><br><span class="line">    sns.distplot(df[~norm][feature], label=<span class="string">&#x27;异常值&#x27;</span>, hist=<span class="literal">True</span>, color=<span class="string">&#x27;#e74c3c&#x27;</span>, ax=axs[i])</span><br><span class="line">    sns.distplot(df[norm][feature], label=<span class="string">&#x27;正常值&#x27;</span>, hist=<span class="literal">True</span>, color=<span class="string">&#x27;#2ecc71&#x27;</span>, ax=axs[i])</span><br><span class="line">    </span><br><span class="line">    axs[i].set_xlabel(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    axs[i].tick_params(axis=<span class="string">&#x27;x&#x27;</span>, labelsize=<span class="number">20</span>)</span><br><span class="line">    axs[i].tick_params(axis=<span class="string">&#x27;y&#x27;</span>, labelsize=<span class="number">20</span>)</span><br><span class="line">    </span><br><span class="line">    axs[i].legend(loc=<span class="string">&#x27;upper right&#x27;</span>, prop=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">20</span>&#125;)</span><br><span class="line">    axs[i].set_title(<span class="string">&#x27;&#123;&#125;变量的正态分布图&#x27;</span>.<span class="built_in">format</span>(feature), size=<span class="number">20</span>, y=<span class="number">1.05</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.subplot(212)</span></span><br><span class="line"><span class="comment"># sns.distplot(df[cont_features], hist=True)</span></span><br><span class="line"><span class="comment"># axs[0].legend(loc=&#x27;upper right&#x27;, prop=&#123;&#x27;size&#x27;: 20&#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://s3.ax1x.com/2021/02/12/yr1Sds.png"></p>
<h1 id="region-青岛的哪个区"><a href="#region-青岛的哪个区" class="headerlink" title="region 青岛的哪个区"></a>region 青岛的哪个区</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.region.unique()</span><br></pre></td></tr></table></figure>




<pre><code>array([&#39;城阳&#39;, &#39;黄岛&#39;, &#39;胶州&#39;, &#39;即墨&#39;, &#39;莱西&#39;, &#39;崂山&#39;, &#39;李沧&#39;, &#39;市北&#39;, &#39;市南&#39;], dtype=object)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">8</span>))</span><br><span class="line"><span class="comment"># sns.countplot(x=&#x27;region&#x27;, hue=&#x27;category&#x27;, data=df1)</span></span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line">sns.countplot(x=<span class="string">&#x27;region&#x27;</span>, hue=<span class="string">&#x27;category&#x27;</span>, data=df1)</span><br><span class="line"> </span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line">sns.countplot(x=<span class="string">&#x27;region&#x27;</span>, hue=<span class="string">&#x27;category&#x27;</span>, data=df2)</span><br><span class="line"> </span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">sns.countplot(x=<span class="string">&#x27;region&#x27;</span>, hue=<span class="string">&#x27;category&#x27;</span>, data=df)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="https://s3.ax1x.com/2021/02/12/yrlvLQ.png"></p>
<p>从总体来看，精装房还是最多的，毛坯房占比最少。</p>
<p>结合前面的分析，个人感觉房价高的城区，例如崂山区和李沧区，精装房的比例非常大，所以这个变量可能会很影响房屋的总价。</p>
<p>高价房屋和正常价格的房屋，都是精装房较多，由于爬到的信息无经纬度或者街道数据，所以无法考虑地段，这应该是非常遗憾的一点。</p>
<h1 id="特征重编码"><a href="#特征重编码" class="headerlink" title="特征重编码"></a>特征重编码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train = StandardScaler().fit_transform(df.drop(columns=<span class="string">&#x27;type&#x27;</span>))</span><br><span class="line">y_train = df[<span class="string">&#x27;type&#x27;</span>].values</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;X_train shape: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(X_train.shape))</span><br><span class="line">print(<span class="string">&#x27;y_train shape: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(y_train.shape))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>X_train shape: (18528, 9)
y_train shape: (18528,)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># df1.drop(columns=&#x27;title&#x27;, inplace=True)</span></span><br><span class="line"><span class="comment"># df2.drop(columns=&#x27;title&#x27;, inplace=True)</span></span><br><span class="line">df.drop(columns=<span class="string">&#x27;title&#x27;</span>, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">non_numeric_features = [<span class="string">&#x27;category&#x27;</span>, <span class="string">&#x27;region&#x27;</span>]</span><br><span class="line"></span><br><span class="line">df_feature = pd.get_dummies(df, columns = non_numeric_features )</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_feature.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
Int64Index: 19544 entries, 0 to 21830
Data columns (total 21 columns):
 #   Column       Non-Null Count  Dtype  
---  ------       --------------  -----  
 0   totalPrice   19544 non-null  float64
 1   type         19544 non-null  int64  
 2   shi          19544 non-null  int64  
 3   ting         19544 non-null  int64  
 4   area         19544 non-null  float64
 5   age          19544 non-null  int64  
 6   floor        19544 non-null  float64
 7   per_price    19544 non-null  int64  
 8   category_其他  19544 non-null  uint8  
 9   category_毛坯  19544 non-null  uint8  
 10  category_简装  19544 non-null  uint8  
 11  category_精装  19544 non-null  uint8  
 12  region_即墨    19544 non-null  uint8  
 13  region_城阳    19544 non-null  uint8  
 14  region_崂山    19544 non-null  uint8  
 15  region_市北    19544 non-null  uint8  
 16  region_市南    19544 non-null  uint8  
 17  region_李沧    19544 non-null  uint8  
 18  region_胶州    19544 non-null  uint8  
 19  region_莱西    19544 non-null  uint8  
 20  region_黄岛    19544 non-null  uint8  
dtypes: float64(3), int64(5), uint8(13)
memory usage: 1.6 MB</code></pre>
<h1 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####读取数据</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> sort</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBClassifier</span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> plot_importance</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> precision_recall_curve</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectFromModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####确定训练集和测试集</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(df_feature.drop(columns=<span class="string">&#x27;type&#x27;</span>), df_feature[<span class="string">&#x27;type&#x27;</span>], test_size = <span class="number">0.2</span>, random_state = <span class="number">2021</span>)</span><br><span class="line"><span class="comment">###############模型 ： 全特征 + xgb</span></span><br><span class="line">model = XGBClassifier(learning_rate=<span class="number">0.1</span>,</span><br><span class="line">                      n_estimators=<span class="number">1000</span>,         <span class="comment"># 树的个数--1000棵树建立xgboost</span></span><br><span class="line">                      max_depth=<span class="number">6</span>,               <span class="comment"># 树的深度</span></span><br><span class="line">                      min_child_weight = <span class="number">1</span>,      <span class="comment"># 叶子节点最小权重</span></span><br><span class="line">                      gamma=<span class="number">0.</span>,                  <span class="comment"># 惩罚项中叶子结点个数前的参数</span></span><br><span class="line">                      subsample=<span class="number">0.8</span>,             <span class="comment"># 随机选择80%样本建立决策树</span></span><br><span class="line">                      colsample_btree=<span class="number">0.8</span>,       <span class="comment"># 随机选择80%特征建立决策树</span></span><br><span class="line">                      objective=<span class="string">&#x27;binary:logistic&#x27;</span>, <span class="comment"># 指定损失函数</span></span><br><span class="line">                      scale_pos_weight=<span class="number">1</span>,        <span class="comment"># 解决样本个数不平衡的问题</span></span><br><span class="line">                      random_state=<span class="number">27</span>            <span class="comment"># 随机数</span></span><br><span class="line">                      )</span><br><span class="line"></span><br><span class="line">model.fit(x_train,</span><br><span class="line">          y_train,</span><br><span class="line">          eval_set = [(x_test,y_test)],</span><br><span class="line">          eval_metric = <span class="string">&quot;error&quot;</span>,</span><br><span class="line">          early_stopping_rounds = <span class="number">10</span>, verbose = <span class="number">500</span>)</span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">fig,ax = plt.subplots(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plot_importance(model,</span><br><span class="line">                height=<span class="number">0.5</span>,</span><br><span class="line">                ax=ax)</span><br><span class="line">plt.show()</span><br><span class="line">pred = model.predict(x_test)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;F1-score:%.4f&#x27;</span> % metrics.f1_score(y_test,pred))</span><br><span class="line">print(<span class="string">&#x27;AUC:%.4f&#x27;</span> % metrics.roc_auc_score(y_test,pred))</span><br><span class="line">print(<span class="string">&#x27;ACC:%.4f&#x27;</span> % metrics.accuracy_score(y_test,pred))</span><br><span class="line">print(<span class="string">&#x27;Recall:%.4f&#x27;</span> % metrics.recall_score(y_test,pred))</span><br><span class="line">print(<span class="string">&#x27;Precesion:%.4f&#x27;</span> % metrics.precision_score(y_test,pred))</span><br><span class="line"><span class="comment">#metrics.confusion_matrix(test_y,pred)</span></span><br><span class="line">precision,recall,thresholds = precision_recall_curve(y_train,model.predict(x_train))</span><br><span class="line">print(classification_report(y_test,pred,target_names=[<span class="string">&#x27;up&#x27;</span>,<span class="string">&#x27;down&#x27;</span>]))</span><br></pre></td></tr></table></figure>

<pre><code>[0]    validation_0-error:0.017907
Will train until validation_0-error hasn&#39;t improved in 10 rounds.
Stopping. Best iteration:
[50]    validation_0-error:0.001791</code></pre>
<p><img src="https://s3.ax1x.com/2021/02/12/yr1Xfx.png"></p>
<pre><code>F1-score:0.9991
AUC:0.9868
ACC:0.9982
Recall:0.9995
Precesion:0.9987
              precision    recall  f1-score   support

          up       0.99      0.97      0.98       194
        down       1.00      1.00      1.00      3715

    accuracy                           1.00      3909
   macro avg       0.99      0.99      0.99      3909
weighted avg       1.00      1.00      1.00      3909</code></pre>
<h1 id="重编码-注"><a href="#重编码-注" class="headerlink" title="重编码 注"></a>重编码 注</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;category&#x27;</span>]  = LabelEncoder().fit_transform(df[<span class="string">&#x27;category&#x27;</span>]) </span><br><span class="line">df[<span class="string">&#x27;region&#x27;</span>] = LabelEncoder().fit_transform(df[<span class="string">&#x27;region&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">map1 = &#123;<span class="string">&#x27;精装&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;简装&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;毛坯&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;其他&#x27;</span>:<span class="number">4</span>&#125;</span><br><span class="line">df[<span class="string">&#x27;category&#x27;</span>] = df[<span class="string">&#x27;category&#x27;</span>].<span class="built_in">map</span>(map1)</span><br></pre></td></tr></table></figure>

<h1 id="—再来一点租房的—"><a href="#—再来一点租房的—" class="headerlink" title="—再来一点租房的—"></a>—再来一点租房的—</h1><p>我直接放图 </p>
<p><img src="https://s3.ax1x.com/2021/02/12/yrFY60.png"></p>
<p>我又可以了xdm</p>
<h1 id="final-finish"><a href="#final-finish" class="headerlink" title="final finish"></a>final finish</h1>]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>visualization</tag>
      </tags>
  </entry>
  <entry>
    <title>《基于plotly的可视化绘图》读书笔记</title>
    <url>/2020/12/02/%E3%80%8A%E5%9F%BA%E4%BA%8Eplotly%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BB%98%E5%9B%BE%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>《python数据分析 基于plotly的动态可视化绘图》, 孙洋洋 王硕 邢梦来 袁泉 吴娜著, 电子工业出版社.</p>
<p>有点plotly中文使用手册的感觉，很厉害</p>
<a id="more"></a>

<h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><p>他说，pandas和plotly是python数据分析和量化分析两大重量级模块库：<br>pandas是业界公认的大数据工程一线最好解决方案；<br>plotly是史上最好的绘图工具之一。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install plotly -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>

<p>我安完是<code>4.13.0</code>的，所以我感觉以前主流的<code>v3</code>版本可能有些地方的写法需要变化。<br>我在桌面上建了个叫<code>python</code>的文件夹，操作用<code>jupyter</code>。<br>而且书中给的网址好像也不是那个了，不过依然可以跳转，现在好像应该是<a href="https://plotly.com/python/v4-migration/">plotlt.com</a></p>
<p>更多官方案例见<a href="https://plotly.com/python/">官网</a></p>
<p>需要什么语言的就对应地改网址就好。</p>
<h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><p>然后这个作者说要注册个账号，保存在线绘图。<br>对于做数据分析的人员来说，一般用的都是离线的，在线绘图duck不必。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">py.offline.init_notebook_mode() <span class="comment">#初始化 告诉是jupyter</span></span><br><span class="line"></span><br><span class="line">plotly.offine.plot()</span><br><span class="line">plotly.offine.iplot()</span><br></pre></td></tr></table></figure>

<p>都是离线画图的方法；前者是打开一个单独的<code>html</code>，下面语句可以命名文件名，<code>.html</code>加不加都可吧。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">py.offline.plot(data, filename = <span class="string">&#x27;first_offline_start&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>后者加个<code>i</code>是直接在<code>jupyter</code>下面输出。</p>
<p>举例区分一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">py.offline.plot(data, filename = <span class="string">&#x27;first_offline_start&#x27;</span>) <span class="comment">#跟下句一样</span></span><br><span class="line">py.offline.plot(data, filename = <span class="string">&#x27;first_offline_start.html&#x27;</span>) <span class="comment">#打开网页first_offline_start.html</span></span><br><span class="line">py.offline.plot(data) <span class="comment">#打开网页temp-plot.html</span></span><br><span class="line">py.offline.iplot(data, filename = <span class="string">&#x27;first_offline_start&#x27;</span>) <span class="comment">#不生成网页</span></span><br><span class="line">py.offline.iplot(data) <span class="comment">#同上，直接在下面输出</span></span><br></pre></td></tr></table></figure>

<h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p><img src="https://s3.ax1x.com/2020/12/06/DXvp6A.png" alt="示例"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">from</span> plotly.graph_objs <span class="keyword">import</span> Scatter, Layout, Data</span><br><span class="line"></span><br><span class="line">py.offline.init_notebook_mode()</span><br><span class="line"></span><br><span class="line">trace0 = Scatter(</span><br><span class="line">    x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    y=[<span class="number">10</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">17</span>]</span><br><span class="line">)</span><br><span class="line">trace1 = Scatter(</span><br><span class="line">    x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    y=[<span class="number">16</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">9</span>]</span><br><span class="line">)</span><br><span class="line">data = Data([trace0, trace1])</span><br><span class="line"></span><br><span class="line">py.offline.iplot(data)</span><br></pre></td></tr></table></figure>

<p><code>trace0</code>和<code>trace1</code>各自为一组画图的数据，然后以<code>列表[]</code>的形式输入到Data中</p>
<h2 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h2><p>记住<code>jupyter</code>就是加<code>i</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly</span><br><span class="line"><span class="built_in">help</span>(plotly.offline.iplot)</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在线画图是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.ployly <span class="keyword">as</span> py</span><br><span class="line">py.plot</span><br></pre></td></tr></table></figure>

<p>离线画图是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly</span><br><span class="line">plotly.offline.iplot</span><br></pre></td></tr></table></figure>

<p>这一点区别和用法不知道你搞懂了吗</p>
<h1 id="plotly基础图形"><a href="#plotly基础图形" class="headerlink" title="plotly基础图形"></a>plotly基础图形</h1><p>基本的流程模板：</p>
<ul>
<li>添加图形数据，例如scatter等</li>
<li>设置画面布局，layout</li>
<li>集成图形、布局数据，Data、Figure</li>
<li>图形的输出，offine.iplot，自定义的短命令是pyplt</li>
</ul>
<h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><h3 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot <span class="comment">#自定义一下</span></span><br><span class="line"></span><br><span class="line">N = <span class="number">100</span></span><br><span class="line">random_x = np.linspace(<span class="number">0</span>, <span class="number">1</span>, N)</span><br><span class="line">random_y0 = np.random.randn(N)+<span class="number">5</span></span><br><span class="line">random_y1 = np.random.randn(N)</span><br><span class="line">random_y2 = np.random.randn(N)<span class="number">-5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">trace0 = go.Scatter(</span><br><span class="line">    x = random_x,</span><br><span class="line">    y = random_y0,</span><br><span class="line">    mode = <span class="string">&#x27;markers&#x27;</span>, <span class="comment"># 纯散点的绘图</span></span><br><span class="line">    name = <span class="string">&#x27;markers&#x27;</span> <span class="comment"># 曲线名称</span></span><br><span class="line">)</span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x = random_x,</span><br><span class="line">    y = random_y1,</span><br><span class="line">    mode = <span class="string">&#x27;lines+markers&#x27;</span>, <span class="comment"># 散点+线的绘图</span></span><br><span class="line">    name = <span class="string">&#x27;lines+markers&#x27;</span></span><br><span class="line">)</span><br><span class="line">trace2 = go.Scatter(</span><br><span class="line">    x = random_x,</span><br><span class="line">    y = random_y2,</span><br><span class="line">    mode = <span class="string">&#x27;lines&#x27;</span>, <span class="comment"># 线的绘图</span></span><br><span class="line">    name = <span class="string">&#x27;lines&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = [trace0, trace1, trace2]</span><br><span class="line">pyplt(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/DXvSld.png" alt="散点图1"></p>
<p>仔细看除了数据差异以外，三个线的样式不同，是因为<code>mode</code>的参数不同。</p>
<h3 id="样式设置"><a href="#样式设置" class="headerlink" title="样式设置"></a>样式设置</h3><p><img src="https://s3.ax1x.com/2020/12/06/DXv9OI.png" alt="散点图2"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">N = <span class="number">500</span></span><br><span class="line">x = np.random.randn(N)</span><br><span class="line"></span><br><span class="line">trace0 = go.Scatter(</span><br><span class="line">    x = np.random.randn(N),</span><br><span class="line">    y = np.random.randn(N)+<span class="number">2</span>,</span><br><span class="line">    name = <span class="string">&#x27;Above&#x27;</span>,</span><br><span class="line">    mode = <span class="string">&#x27;markers+lines&#x27;</span>,</span><br><span class="line">    marker = <span class="built_in">dict</span>(</span><br><span class="line">        size = <span class="number">10</span>, <span class="comment"># 设置点的宽度</span></span><br><span class="line">        color = <span class="string">&#x27;rgba(152, 0, 0, .8)&#x27;</span>, <span class="comment"># 设置曲线的颜色</span></span><br><span class="line">        line = <span class="built_in">dict</span>(</span><br><span class="line">            width = <span class="number">2</span>, <span class="comment"># 设置线条的宽度</span></span><br><span class="line">            color = <span class="string">&#x27;rgb(0, 0, 0)&#x27;</span> <span class="comment"># 设置线条的颜色</span></span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x = np.random.randn(N),</span><br><span class="line">    y = np.random.randn(N) - <span class="number">2</span>,</span><br><span class="line">    name = <span class="string">&#x27;Below&#x27;</span>,</span><br><span class="line">    mode = <span class="string">&#x27;markers&#x27;</span>,</span><br><span class="line">    marker = <span class="built_in">dict</span>(</span><br><span class="line">        size = <span class="number">10</span>,</span><br><span class="line">        color = <span class="string">&#x27;rgba(255, 182, 193, .9)&#x27;</span>,</span><br><span class="line">        line = <span class="built_in">dict</span>(</span><br><span class="line">            width = <span class="number">2</span>,</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = [trace0, trace1]</span><br><span class="line"></span><br><span class="line">layout = <span class="built_in">dict</span>(title = <span class="string">&#x27;Styled Scatter&#x27;</span>,</span><br><span class="line">              yaxis = <span class="built_in">dict</span>(zeroline = <span class="literal">True</span>), <span class="comment"># 显示y轴的0刻度线</span></span><br><span class="line">              xaxis = <span class="built_in">dict</span>(zeroline = <span class="literal">False</span>) <span class="comment"># 不显示x轴的0刻度线</span></span><br><span class="line">             )</span><br><span class="line"></span><br><span class="line">fig = <span class="built_in">dict</span>(data=data, layout=layout)</span><br><span class="line">pyplt(fig)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>scatter</code>参数很多，我肯定不能把书中代码和所有的参数含义都贴进来，也没有实战过。</p>
<p>其实有需要也可以购买电子版，好保存，查起来也方便。</p>
<h2 id="气泡图"><a href="#气泡图" class="headerlink" title="气泡图"></a>气泡图</h2><p>还是散点图的命令，就是调整了点的大小。</p>
<h3 id="简单案例-1"><a href="#简单案例-1" class="headerlink" title="简单案例"></a>简单案例</h3><p><img src="https://s3.ax1x.com/2020/12/06/DXvepQ.png" alt="气泡图1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">trace0 = go.Scatter(</span><br><span class="line">    x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    y=[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>],</span><br><span class="line">    mode=<span class="string">&#x27;markers&#x27;</span>,</span><br><span class="line">    marker=<span class="built_in">dict</span>(  <span class="comment">###数据节点大小，包括颜色，大小，格式</span></span><br><span class="line">        size=[<span class="number">40</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">100</span>],  </span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = [trace0]</span><br><span class="line">pyplt(data)</span><br></pre></td></tr></table></figure>
<h3 id="样式设置-1"><a href="#样式设置-1" class="headerlink" title="样式设置"></a>样式设置</h3><p><img src="https://s3.ax1x.com/2020/12/06/DXjvfe.png" alt="气泡图2"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">trace0 = go.Scatter(</span><br><span class="line">    x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    y=[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>],</span><br><span class="line">    mode=<span class="string">&#x27;markers&#x27;</span>,</span><br><span class="line">    text=[<span class="string">&#x27;A&lt;br&gt;size: 40&#x27;</span>, <span class="string">&#x27;B&lt;br&gt;size: 60&#x27;</span>, <span class="string">&#x27;C&lt;br&gt;size: 80&#x27;</span>, <span class="string">&#x27;D&lt;br&gt;size: 100&#x27;</span>],   <span class="comment">###指定每个点的悬浮文字</span></span><br><span class="line">    marker=<span class="built_in">dict</span>(</span><br><span class="line">        color= [<span class="number">120</span>, <span class="number">125</span>, <span class="number">130</span>, <span class="number">135</span>],  <span class="comment">###点的颜色</span></span><br><span class="line">        opacity=[<span class="number">1</span>, <span class="number">0.8</span>, <span class="number">0.6</span>, <span class="number">0.4</span>],  <span class="comment">###点的透明度</span></span><br><span class="line">        size=[<span class="number">40</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">100</span>],  <span class="comment">###点的大小</span></span><br><span class="line">        showscale= <span class="literal">True</span>,  <span class="comment">###是否显示右边的颜色条</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = [trace0]</span><br><span class="line">pyplt(data)</span><br></pre></td></tr></table></figure>
<h3 id="缩放设置"><a href="#缩放设置" class="headerlink" title="缩放设置"></a>缩放设置</h3><p><img src="https://s3.ax1x.com/2020/12/06/DXjjYD.png" alt="气泡图3"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">trace0 = go.Scatter(</span><br><span class="line">    x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    y=[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>],</span><br><span class="line">    text=[<span class="string">&#x27;A&lt;/br&gt;size: 40&lt;/br&gt;default&#x27;</span>, <span class="string">&#x27;B&lt;/br&gt;size: 60&lt;/br&gt;default&#x27;</span>, <span class="string">&#x27;C&lt;/br&gt;size: 80&lt;/br&gt;default&#x27;</span>, <span class="string">&#x27;D&lt;/br&gt;size: 100&lt;/br&gt;default&#x27;</span>],</span><br><span class="line">    mode=<span class="string">&#x27;markers&#x27;</span>,</span><br><span class="line">    name=<span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">    marker=<span class="built_in">dict</span>(</span><br><span class="line">        size=[<span class="number">400</span>, <span class="number">600</span>, <span class="number">800</span>, <span class="number">1000</span>],</span><br><span class="line">        sizemode=<span class="string">&#x27;area&#x27;</span>, </span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    y=[<span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>],</span><br><span class="line">    text=[<span class="string">&#x27;A&lt;/br&gt;size: 40&lt;/br&gt;sizeref: 0.2&#x27;</span>, <span class="string">&#x27;B&lt;/br&gt;size: 60&lt;/br&gt;sizeref: 0.2&#x27;</span>, <span class="string">&#x27;C&lt;/br&gt;size: 80&lt;/br&gt;sizeref: 0.2&#x27;</span>, <span class="string">&#x27;D&lt;/br&gt;size: 100&lt;/br&gt;sizeref: 0.2&#x27;</span>],</span><br><span class="line">    mode=<span class="string">&#x27;markers&#x27;</span>,</span><br><span class="line">    name = <span class="string">&#x27;ref0.2&#x27;</span>,</span><br><span class="line">    marker=<span class="built_in">dict</span>(</span><br><span class="line">        size=[<span class="number">400</span>, <span class="number">600</span>, <span class="number">800</span>, <span class="number">1000</span>],</span><br><span class="line">        sizeref=<span class="number">0.2</span>,</span><br><span class="line">        sizemode=<span class="string">&#x27;area&#x27;</span>, </span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace2 = go.Scatter(</span><br><span class="line">    x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    y=[<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>],</span><br><span class="line">    text=[<span class="string">&#x27;A&lt;/br&gt;size: 40&lt;/br&gt;sizeref: 2&#x27;</span>, <span class="string">&#x27;B&lt;/br&gt;size: 60&lt;/br&gt;sizeref: 2&#x27;</span>, <span class="string">&#x27;C&lt;/br&gt;size: 80&lt;/br&gt;sizeref: 2&#x27;</span>, <span class="string">&#x27;D&lt;/br&gt;size: 100&lt;/br&gt;sizeref: 2&#x27;</span>],</span><br><span class="line">    mode=<span class="string">&#x27;markers&#x27;</span>,</span><br><span class="line">    name=<span class="string">&#x27;ref2&#x27;</span>,</span><br><span class="line">    marker=<span class="built_in">dict</span>(</span><br><span class="line">        size=[<span class="number">400</span>, <span class="number">600</span>, <span class="number">800</span>, <span class="number">1000</span>], <span class="comment">#对应点的大小，举例这样，那要是实际很多数据呢？？？</span></span><br><span class="line">        sizeref=<span class="number">2</span>, <span class="comment">#缩放比例，2就是原来的1/2</span></span><br><span class="line">        sizemode=<span class="string">&#x27;area&#x27;</span>, <span class="comment">#按照面积缩放</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = [trace0, trace1, trace2]</span><br><span class="line">pyplt(data)</span><br></pre></td></tr></table></figure>

<h2 id="线形图"><a href="#线形图" class="headerlink" title="线形图"></a>线形图</h2><h3 id="基本案例"><a href="#基本案例" class="headerlink" title="基本案例"></a>基本案例</h3><p><img src="https://s3.ax1x.com/2020/12/06/DXjqw6.png" alt="线性图1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"><span class="comment"># 600000浦发银行20170301-20170428涨跌幅度数据，数据来源Wind</span></span><br><span class="line">profit_rate = [<span class="number">-0.001</span>, <span class="number">-0.013</span>, <span class="number">-0.004</span>, <span class="number">0.002</span>, <span class="number">0.003</span>, <span class="number">-0.001</span>, <span class="number">-0.009</span>, <span class="number">0.0</span>, <span class="number">0.007</span>,\</span><br><span class="line">    <span class="number">-0.005</span>, <span class="number">0.0</span>, <span class="number">0.001</span>, <span class="number">-0.006</span>, <span class="number">-0.006</span>, <span class="number">-0.009</span>, <span class="number">-0.013</span>, <span class="number">0.005</span>, <span class="number">0.007</span>,\</span><br><span class="line">    <span class="number">0.004</span>, <span class="number">-0.006</span>, <span class="number">-0.009</span>, <span class="number">-0.004</span>, <span class="number">0.015</span>, <span class="number">0.007</span>, <span class="number">0.001</span>, <span class="number">0.003</span>, <span class="number">-0.009</span>,\</span><br><span class="line">    <span class="number">-0.005</span>, <span class="number">0.001</span>, <span class="number">-0.008</span>, <span class="number">-0.016</span>, <span class="number">0.002</span>, <span class="number">-0.013</span>, <span class="number">-0.009</span>, <span class="number">-0.014</span>, <span class="number">0.009</span>,\</span><br><span class="line">    <span class="number">-0.003</span>, <span class="number">0.002</span>, <span class="number">-0.001</span>, <span class="number">0.011</span>, <span class="number">0.004</span>] <span class="comment">#数据为y轴</span></span><br><span class="line">date = pd.date_range(start = <span class="string">&#x27;3/1/2017&#x27;</span>, end = <span class="string">&#x27;4/30/2017&#x27;</span>)  <span class="comment">#生成对应长度的日期序列，x轴</span></span><br><span class="line">trace = [go.Scatter(</span><br><span class="line">    x = date,</span><br><span class="line">    y = profit_rate</span><br><span class="line">)]</span><br><span class="line"></span><br><span class="line">layout = <span class="built_in">dict</span>(  <span class="comment">#布局设置</span></span><br><span class="line">    title = <span class="string">&#x27;浦发银行20170301-20170428涨跌幅变化&#x27;</span>,</span><br><span class="line">    xaxis = <span class="built_in">dict</span>(title = <span class="string">&#x27;Date&#x27;</span>),</span><br><span class="line">    yaxis = <span class="built_in">dict</span>(title = <span class="string">&#x27;profit_rate&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fig = <span class="built_in">dict</span>(data = trace, layout = layout)</span><br><span class="line">pyplt(fig)</span><br></pre></td></tr></table></figure>

<p>数据缺失的情况和插值的做法等有需要可以再百度。</p>
<h3 id="填充线形图"><a href="#填充线形图" class="headerlink" title="填充线形图"></a>填充线形图</h3><p><img src="https://s3.ax1x.com/2020/12/06/DXjXFO.png" alt="线形图2"></p>
<p>比如书中的例子，绘制一个股票一段时间的最高价和最低价。图上会有三条线分别是这段时间每天的开盘价、最高价和最低价，画图的时候代码是这么做的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">x_rev = x[::<span class="number">-1</span>]</span><br><span class="line">x + x_rev</span><br></pre></td></tr></table></figure>

<pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</code></pre>
<p>然后y值也是一样的处理方法，你可以想象一下，对于第一天来说，y的最高价放在了上面序列第一个1的位置，y的最低价放在了上面序列最后一个1的位置；对于最后一天来说，y的最高价放在了上面序列中间左边那个10的位置，y的最低价放在了右边那个10的位置。</p>
<p>全部代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">x_rev = x[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Line 1 002104恒宝股份20170518-20170602</span></span><br><span class="line">y1 = [<span class="number">8.86</span>, <span class="number">8.85</span>, <span class="number">8.69</span>, <span class="number">8.4</span>, <span class="number">8.62</span>, <span class="number">9</span>, <span class="number">8.99</span>, <span class="number">8.85</span>, <span class="number">8.59</span>, <span class="number">9.31</span>]</span><br><span class="line">y1_upper = [<span class="number">9.05</span>, <span class="number">9.03</span>, <span class="number">9.08</span>, <span class="number">8.76</span>, <span class="number">8.63</span>, <span class="number">9.04</span>, <span class="number">9.09</span>, <span class="number">9.16</span>, <span class="number">8.9</span>, <span class="number">9.45</span>]</span><br><span class="line">y1_lower = [<span class="number">8.86</span>, <span class="number">8.85</span>, <span class="number">8.64</span>, <span class="number">8.36</span>, <span class="number">8.33</span>, <span class="number">8.43</span>, <span class="number">8.93</span>, <span class="number">8.84</span>, <span class="number">8.53</span>, <span class="number">8.52</span>]</span><br><span class="line">y1_lower = y1_lower[::<span class="number">-1</span>] <span class="comment"># 逆序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Line 2 002125湘潭电化20170518-20170602</span></span><br><span class="line">y2 = [<span class="number">10.39</span>, <span class="number">10.35</span>, <span class="number">9.85</span>, <span class="number">9.73</span>, <span class="number">9.77</span>, <span class="number">9.8</span>, <span class="number">9.75</span>, <span class="number">9.65</span>, <span class="number">9.16</span>, <span class="number">9.34</span>]</span><br><span class="line">y2_upper = [<span class="number">10.58</span>, <span class="number">10.52</span>, <span class="number">10.34</span>, <span class="number">10.14</span>, <span class="number">9.87</span>, <span class="number">9.87</span>, <span class="number">9.94</span>, <span class="number">9.6</span>, <span class="number">9.42</span>, <span class="number">9.5</span>]</span><br><span class="line">y2_lower = [<span class="number">10.15</span>, <span class="number">10.21</span>, <span class="number">9.72</span>, <span class="number">9.68</span>, <span class="number">9.24</span>, <span class="number">9.48</span>, <span class="number">9.62</span>, <span class="number">9.12</span>, <span class="number">9.12</span>, <span class="number">9.34</span>]</span><br><span class="line">y2_lower = y2_lower[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Line 3 002077大港股份20170518-20170602</span></span><br><span class="line">y3 = [<span class="number">11.88</span>, <span class="number">13.07</span>, <span class="number">12.75</span>, <span class="number">12.02</span>, <span class="number">12.1</span>, <span class="number">12.61</span>, <span class="number">12.42</span>, <span class="number">12.42</span>, <span class="number">11.18</span>, <span class="number">10.72</span>]</span><br><span class="line">y3_upper = [<span class="number">11.98</span>, <span class="number">13.07</span>, <span class="number">13.4</span>, <span class="number">12.91</span>, <span class="number">12.45</span>, <span class="number">13.1</span>, <span class="number">12.61</span>, <span class="number">12.65</span>, <span class="number">12.45</span>, <span class="number">11.16</span>]</span><br><span class="line">y3_lower = [<span class="number">11.6</span>, <span class="number">11.75</span>, <span class="number">12.75</span>, <span class="number">12.02</span>, <span class="number">11.8</span>, <span class="number">11.92</span>, <span class="number">12.17</span>, <span class="number">12.29</span>, <span class="number">11.18</span>, <span class="number">10.35</span>]</span><br><span class="line">y3_lower = y3_lower[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x = x + x_rev,</span><br><span class="line">    y = y1_upper + y1_lower,</span><br><span class="line">    fill = <span class="string">&#x27;tozerox&#x27;</span>,</span><br><span class="line">    fillcolor = <span class="string">&#x27;rgba(0,0,205,0.2)&#x27;</span>,</span><br><span class="line">    line = go.Line(color = <span class="string">&#x27;rgba(255,0,0,0)&#x27;</span>), <span class="comment">#这里改了</span></span><br><span class="line">    opacity = <span class="number">0</span>,</span><br><span class="line">    showlegend = <span class="literal">False</span>,</span><br><span class="line">    name = <span class="string">&#x27;恒宝股份&#x27;</span>,</span><br><span class="line">)</span><br><span class="line">trace2 = go.Scatter(</span><br><span class="line">    x = x + x_rev,</span><br><span class="line">    y = y2_upper + y2_lower,</span><br><span class="line">    fill = <span class="string">&#x27;tozerox&#x27;</span>,</span><br><span class="line">    fillcolor = <span class="string">&#x27;rgba(30,144,255,0.2)&#x27;</span>,</span><br><span class="line">    line = go.Line(color = <span class="string">&#x27;rgba(255,0,0,0)&#x27;</span>),</span><br><span class="line">    name = <span class="string">&#x27;湘潭电化&#x27;</span>,</span><br><span class="line">    showlegend = <span class="literal">False</span>,</span><br><span class="line">)</span><br><span class="line">trace3 = go.Scatter(</span><br><span class="line">    x = x+x_rev,</span><br><span class="line">    y = y3_upper+y3_lower,</span><br><span class="line">    fill = <span class="string">&#x27;tozerox&#x27;</span>,</span><br><span class="line">    fillcolor = <span class="string">&#x27;rgba(112,128,144,0.2)&#x27;</span>,</span><br><span class="line">    line = go.Line(color = <span class="string">&#x27;rgba(255,0,0,0)&#x27;</span>),</span><br><span class="line">    showlegend = <span class="literal">False</span>,</span><br><span class="line">    name = <span class="string">&#x27;大港股份&#x27;</span>,</span><br><span class="line">)</span><br><span class="line">trace4 = go.Scatter(</span><br><span class="line">    x = x,</span><br><span class="line">    y = y1,</span><br><span class="line">    line = go.Line(color = <span class="string">&#x27;rgb(0,0,205)&#x27;</span>),</span><br><span class="line">    mode = <span class="string">&#x27;lines&#x27;</span>,</span><br><span class="line">    name = <span class="string">&#x27;恒宝股份&#x27;</span>,</span><br><span class="line">)</span><br><span class="line">trace5 = go.Scatter(</span><br><span class="line">    x = x,</span><br><span class="line">    y = y2,</span><br><span class="line">    line = go.Line(color=<span class="string">&#x27;rgb(30,144,255)&#x27;</span>),</span><br><span class="line">    mode = <span class="string">&#x27;lines&#x27;</span>,</span><br><span class="line">    name = <span class="string">&#x27;湘潭电化&#x27;</span>,</span><br><span class="line">)</span><br><span class="line">trace6 = go.Scatter(</span><br><span class="line">    x = x,</span><br><span class="line">    y = y3,</span><br><span class="line">    line = go.Line(color=<span class="string">&#x27;rgb(112,128,144)&#x27;</span>),</span><br><span class="line">    mode = <span class="string">&#x27;lines&#x27;</span>,</span><br><span class="line">    name = <span class="string">&#x27;大港股份&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = go.Data([trace1, trace2, trace3, trace4, trace5, trace6])</span><br><span class="line"><span class="comment">#&quot;&quot;&quot;</span></span><br><span class="line">layout = go.Layout(</span><br><span class="line">    paper_bgcolor = <span class="string">&#x27;rgb(255,255,255)&#x27;</span>,</span><br><span class="line">    plot_bgcolor = <span class="string">&#x27;rgb(229,229,229)&#x27;</span>,</span><br><span class="line">    xaxis = go.XAxis(</span><br><span class="line">        gridcolor = <span class="string">&#x27;rgb(255,255,255)&#x27;</span>,</span><br><span class="line">        <span class="built_in">range</span> = [<span class="number">1</span>,<span class="number">10</span>],</span><br><span class="line">        showgrid = <span class="literal">True</span>,</span><br><span class="line">        showline = <span class="literal">False</span>,</span><br><span class="line">        showticklabels = <span class="literal">True</span>,</span><br><span class="line">        tickcolor = <span class="string">&#x27;rgb(127,127,127)&#x27;</span>,</span><br><span class="line">        ticks = <span class="string">&#x27;outside&#x27;</span>,</span><br><span class="line">        zeroline = <span class="literal">False</span></span><br><span class="line">    ),</span><br><span class="line">    yaxis = go.YAxis(</span><br><span class="line">        gridcolor = <span class="string">&#x27;rgb(255,255,255)&#x27;</span>,</span><br><span class="line">        showgrid = <span class="literal">True</span>,</span><br><span class="line">        showline = <span class="literal">False</span>,</span><br><span class="line">        showticklabels = <span class="literal">True</span>,</span><br><span class="line">        tickcolor = <span class="string">&#x27;rgb(127,127,127)&#x27;</span>,</span><br><span class="line">        ticks = <span class="string">&#x27;outside&#x27;</span>,</span><br><span class="line">        zeroline = <span class="literal">False</span></span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line"><span class="comment">#&quot;&quot;&quot;</span></span><br><span class="line">fig = go.Figure(data = data, layout = layout)</span><br><span class="line">pyplt(fig)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是有个地方我并不确定，那就是这个最高价和最低价的线的透明设置，原代码为：</p>
<pre><code>    line = go.Line(color = &#39;transparent&#39;),</code></pre>
<p>我看懂他的逻辑了，但是我并不能成功运行，可能是版本的问题，我试了试直接写<code>opacity</code>，结果不行，所以暂时把这个参数值替换成了<code>&#39;whitesmoke&#39;</code>(随便取的)</p>
<p>不好意思我会了，<code>rgba</code>里第四个参数是不透明度，那我直接改成白色非常透明就好了，即：</p>
<pre><code>    line = go.Line(color = &#39;rgba(255,0,0,0)&#39;),</code></pre>
<p>有点东西</p>
<h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3><p>加了个应用是因为我觉得这个用循环来写在本书是第一次出现，而且里面的参数也很多，挺有价值。所以就好好看好好学这个写法的逻辑，然后参数我反复看了很久，书上说前面都提到了，其实没有。</p>
<p>我个人认为下面这个应该是写错了：</p>
<pre><code>color = colors,</code></pre>
<p>但我也很怀疑，他能运行出来应该不会是<code>error</code>，但是赋的值是给了<code>color</code>，而且很明显是四次，所以怎么可能是<code>colors</code>，然后我改成了：</p>
<pre><code>color = color,</code></pre>
<p>不仔细看还以为是<code>rgba</code>的写法不对，不过也多亏了这里，我想到了上面的例子设置透明度的办法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">x_data = [ <span class="comment">#横坐标</span></span><br><span class="line">    [<span class="number">2001</span>, <span class="number">2002</span>, <span class="number">2003</span>, <span class="number">2004</span>, <span class="number">2005</span>, <span class="number">2006</span>, <span class="number">2007</span>, <span class="number">2008</span>, <span class="number">2009</span>, <span class="number">2010</span>, <span class="number">2011</span>, <span class="number">2013</span>],</span><br><span class="line">    [<span class="number">2001</span>, <span class="number">2002</span>, <span class="number">2003</span>, <span class="number">2004</span>, <span class="number">2005</span>, <span class="number">2006</span>, <span class="number">2007</span>, <span class="number">2008</span>, <span class="number">2009</span>, <span class="number">2010</span>, <span class="number">2011</span>, <span class="number">2013</span>],</span><br><span class="line">    [<span class="number">2001</span>, <span class="number">2002</span>, <span class="number">2003</span>, <span class="number">2004</span>, <span class="number">2005</span>, <span class="number">2006</span>, <span class="number">2007</span>, <span class="number">2008</span>, <span class="number">2009</span>, <span class="number">2010</span>, <span class="number">2011</span>, <span class="number">2013</span>],</span><br><span class="line">    [<span class="number">2001</span>, <span class="number">2002</span>, <span class="number">2003</span>, <span class="number">2004</span>, <span class="number">2005</span>, <span class="number">2006</span>, <span class="number">2007</span>, <span class="number">2008</span>, <span class="number">2009</span>, <span class="number">2010</span>, <span class="number">2011</span>, <span class="number">2013</span>],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">y_data = [  <span class="comment">#四个线的y</span></span><br><span class="line">    [<span class="number">74</span>, <span class="number">82</span>, <span class="number">80</span>, <span class="number">74</span>, <span class="number">73</span>, <span class="number">72</span>, <span class="number">74</span>, <span class="number">70</span>, <span class="number">70</span>, <span class="number">66</span>, <span class="number">66</span>, <span class="number">69</span>],</span><br><span class="line">    [<span class="number">45</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">46</span>, <span class="number">36</span>, <span class="number">36</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">32</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">28</span>],</span><br><span class="line">    [<span class="number">13</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">35</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">50</span>],</span><br><span class="line">    [<span class="number">18</span>, <span class="number">21</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">16</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">23</span>],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">traces = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">    traces.append(go.Scatter(  <span class="comment">#四个线</span></span><br><span class="line">        x = x_data[i],</span><br><span class="line">        y = y_data[i],</span><br><span class="line">        mode = <span class="string">&#x27;lines&#x27;</span>,</span><br><span class="line">        line = <span class="built_in">dict</span>(color = colors[i], width = line_size[i]), </span><br><span class="line">        connectgaps = <span class="literal">True</span>, <span class="comment">#这个参数是没说的数据连接部分，true表示连接缺失值左右相邻的数据点</span></span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">    traces.append(go.Scatter(  <span class="comment">#格外标记了一下第一个和最后一个点</span></span><br><span class="line">        x = [x_data[i][<span class="number">0</span>], x_data[i][<span class="number">11</span>]],</span><br><span class="line">        y = [y_data[i][<span class="number">0</span>], y_data[i][<span class="number">11</span>]],</span><br><span class="line">        mode = <span class="string">&#x27;markers&#x27;</span>,</span><br><span class="line">        marker = <span class="built_in">dict</span>(color = colors[i], size = mode_size[i])</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">layout = go.Layout(</span><br><span class="line">    xaxis = <span class="built_in">dict</span>(</span><br><span class="line">        showline = <span class="literal">True</span>,</span><br><span class="line">        showgrid = <span class="literal">False</span>,</span><br><span class="line">        showticklabels = <span class="literal">True</span>, <span class="comment"># True显示坐标标记</span></span><br><span class="line">        linecolor = <span class="string">&#x27;rgb(204, 204, 204)&#x27;</span>,<span class="comment"># x轴线的颜色</span></span><br><span class="line">        linewidth = <span class="number">2</span>,</span><br><span class="line">        dtick = <span class="literal">False</span>,  <span class="comment"># True自动删除部分日期标示,False保持原状</span></span><br><span class="line">        ticks = <span class="string">&#x27;outside&#x27;</span>, <span class="comment"># x轴上的刻度线，在图内or图外</span></span><br><span class="line">        tickcolor = <span class="string">&#x27;rgb(204, 204, 204)&#x27;</span>, <span class="comment"># x轴上的刻度线的颜色</span></span><br><span class="line">        tickwidth = <span class="number">2</span>, <span class="comment"># x轴上的刻度线的宽度</span></span><br><span class="line">        ticklen = <span class="number">10</span>,  <span class="comment"># x轴上的刻度线的长度</span></span><br><span class="line">        tickfont=<span class="built_in">dict</span>(         <span class="comment"># x轴上的坐标标记字体样式，大小，颜色</span></span><br><span class="line">            family = <span class="string">&#x27;Arial&#x27;</span>,</span><br><span class="line">            size = <span class="number">12</span>,</span><br><span class="line">            color = <span class="string">&#x27;rgb(82, 82, 82)&#x27;</span>,</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">    yaxis=<span class="built_in">dict</span>(</span><br><span class="line">        showgrid = <span class="literal">False</span>,</span><br><span class="line">        zeroline = <span class="literal">False</span>,</span><br><span class="line">        showline = <span class="literal">False</span>,</span><br><span class="line">        showticklabels = <span class="literal">False</span>,</span><br><span class="line">    ),</span><br><span class="line">    autosize = <span class="literal">False</span>,</span><br><span class="line">    margin = <span class="built_in">dict</span>(</span><br><span class="line">        autoexpand = <span class="literal">False</span>,</span><br><span class="line">        l = <span class="number">100</span>,</span><br><span class="line">        r = <span class="number">20</span>,</span><br><span class="line">        t = <span class="number">110</span>,</span><br><span class="line">    ),</span><br><span class="line">    showlegend = <span class="literal">False</span>,</span><br><span class="line">)  <span class="comment">#参数太多了，有些细微的设置夸几就是一行，属实对新手不友好</span></span><br><span class="line"></span><br><span class="line">annotations = []</span><br><span class="line"></span><br><span class="line">title = <span class="string">&#x27;Main Source for News&#x27;</span></span><br><span class="line"></span><br><span class="line">labels = [<span class="string">&#x27;Television&#x27;</span>, <span class="string">&#x27;Newspaper&#x27;</span>, <span class="string">&#x27;Internet&#x27;</span>, <span class="string">&#x27;Radio&#x27;</span>]</span><br><span class="line"></span><br><span class="line">colors = [<span class="string">&#x27;rgba(67,67,67,1)&#x27;</span>, <span class="string">&#x27;rgba(115,115,115,1)&#x27;</span>, <span class="string">&#x27;rgba(49,130,189, 1)&#x27;</span>, <span class="string">&#x27;rgba(189,189,189,1)&#x27;</span>]</span><br><span class="line"></span><br><span class="line">mode_size = [<span class="number">8</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">line_size = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签注释</span></span><br><span class="line"><span class="keyword">for</span> y_trace, label, color <span class="keyword">in</span> <span class="built_in">zip</span>(y_data, labels, colors):</span><br><span class="line">    <span class="comment"># 标记图的左侧的那个数值</span></span><br><span class="line">    annotations.append(<span class="built_in">dict</span>(xref = <span class="string">&#x27;paper&#x27;</span>, x = <span class="number">0.05</span>, y = y_trace[<span class="number">0</span>],   <span class="comment">#xy就是点一下纸上的位置</span></span><br><span class="line">                                  xanchor = <span class="string">&#x27;right&#x27;</span>, yanchor = <span class="string">&#x27;middle&#x27;</span>,</span><br><span class="line">                                  text = label + <span class="string">&#x27; &#123;&#125;%&#x27;</span>.<span class="built_in">format</span>(y_trace[<span class="number">0</span>]),</span><br><span class="line">                                  font = <span class="built_in">dict</span>(family = <span class="string">&#x27;Arial&#x27;</span>,</span><br><span class="line">                                            size = <span class="number">16</span>,</span><br><span class="line">                                            color = color,),</span><br><span class="line">                                  showarrow = <span class="literal">False</span>))  <span class="comment">#这里我改成True试了试，也看到变化了，但是不知道怎么形容</span></span><br><span class="line">    <span class="comment"># 标记图的右侧的那个数值</span></span><br><span class="line">    annotations.append(<span class="built_in">dict</span>(xref = <span class="string">&#x27;paper&#x27;</span>, x = <span class="number">0.95</span>, y = y_trace[<span class="number">11</span>],</span><br><span class="line">                                  xanchor = <span class="string">&#x27;left&#x27;</span>, yanchor = <span class="string">&#x27;middle&#x27;</span>,</span><br><span class="line">                                  text = <span class="string">&#x27;&#123;&#125;%&#x27;</span>.<span class="built_in">format</span>(y_trace[<span class="number">11</span>]),</span><br><span class="line">                                  font = <span class="built_in">dict</span>(family = <span class="string">&#x27;Arial&#x27;</span>,</span><br><span class="line">                                            size = <span class="number">16</span>,</span><br><span class="line">                                            color = color,),</span><br><span class="line">                                  showarrow = <span class="literal">False</span>))</span><br><span class="line"><span class="comment"># 标题的设置</span></span><br><span class="line">annotations.append(<span class="built_in">dict</span>(xref = <span class="string">&#x27;paper&#x27;</span>, yref = <span class="string">&#x27;paper&#x27;</span>, x = <span class="number">0.0</span>, y = <span class="number">1.05</span>,</span><br><span class="line">                              xanchor = <span class="string">&#x27;left&#x27;</span>, yanchor = <span class="string">&#x27;bottom&#x27;</span>,</span><br><span class="line">                              text = <span class="string">&#x27;Main Source for News&#x27;</span>,</span><br><span class="line">                              font = <span class="built_in">dict</span>(family = <span class="string">&#x27;Arial&#x27;</span>,</span><br><span class="line">                                        size = <span class="number">30</span>,</span><br><span class="line">                                        color = <span class="string">&#x27;rgb(37,37,37)&#x27;</span>),</span><br><span class="line">                              showarrow = <span class="literal">False</span>))</span><br><span class="line"><span class="comment"># 最下面的那行小字</span></span><br><span class="line">annotations.append(<span class="built_in">dict</span>(xref = <span class="string">&#x27;paper&#x27;</span>, yref = <span class="string">&#x27;paper&#x27;</span>, x = <span class="number">0.5</span>, y = <span class="number">-0.2</span>,</span><br><span class="line">                              xanchor = <span class="string">&#x27;center&#x27;</span>, yanchor = <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">                              text = <span class="string">&#x27;Source: PewResearch Center &amp; &#x27;</span> +</span><br><span class="line">                                   <span class="string">&#x27;Storytelling with data&#x27;</span>,</span><br><span class="line">                              font = <span class="built_in">dict</span>(family = <span class="string">&#x27;Arial&#x27;</span>,</span><br><span class="line">                                        size = <span class="number">12</span>,</span><br><span class="line">                                        color = <span class="string">&#x27;rgb(150,150,150)&#x27;</span>),</span><br><span class="line">                              showarrow = <span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line">layout[<span class="string">&#x27;annotations&#x27;</span>] = annotations</span><br><span class="line"></span><br><span class="line">fig = go.Figure(data = traces, layout = layout)</span><br><span class="line">pyplt(fig)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="https://s3.ax1x.com/2020/12/06/DXjbex.png" alt="线形图3"></p>
<h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><h3 id="基本柱状图"><a href="#基本柱状图" class="headerlink" title="基本柱状图"></a>基本柱状图</h3><p><img src="https://s3.ax1x.com/2020/12/06/DXjLTK.png" alt="基本柱状图"></p>
<p>使用的是<code>graph_objs</code>中的<code>Bar</code>函数，再<code>layout</code>中对<code>barmode</code>设置，可以绘制不同类型的柱状图，下面是一个简单案例的示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line"><span class="comment"># Trace</span></span><br><span class="line">trace_basic = [go.Bar(</span><br><span class="line">            x = [<span class="string">&#x27;Variable_1&#x27;</span>, <span class="string">&#x27;Variable_2&#x27;</span>, <span class="string">&#x27;Variable_3&#x27;</span>,<span class="string">&#x27;Variable_4&#x27;</span>,<span class="string">&#x27;Variable_5&#x27;</span>],</span><br><span class="line">            y = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>],</span><br><span class="line">    )]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Layout</span></span><br><span class="line">layout_basic = go.Layout(</span><br><span class="line">            title = <span class="string">&#x27;The Graph Title&#x27;</span>,</span><br><span class="line">            xaxis = go.XAxis(<span class="built_in">range</span> = [<span class="number">-0.5</span>,<span class="number">4.5</span>], domain = [<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure</span></span><br><span class="line">figure_basic = go.Figure(data = trace_basic, layout = layout_basic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">pyplt(figure_basic)</span><br></pre></td></tr></table></figure>

<h3 id="柱状簇"><a href="#柱状簇" class="headerlink" title="柱状簇"></a>柱状簇</h3><p>在上面基础代码的基础上加入多组数据即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"><span class="comment"># Traces</span></span><br><span class="line">trace_1 = go.Bar(</span><br><span class="line">            x = [<span class="string">&quot;上海物贸&quot;</span>, <span class="string">&quot;广东明珠&quot;</span>, <span class="string">&quot;五矿发展&quot;</span>],</span><br><span class="line">            y = [<span class="number">4.12</span>, <span class="number">5.32</span>, <span class="number">0.60</span>],</span><br><span class="line">            name = <span class="string">&quot;201609&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">trace_2 = go.Bar(</span><br><span class="line">            x = [<span class="string">&quot;上海物贸&quot;</span>, <span class="string">&quot;广东明珠&quot;</span>, <span class="string">&quot;五矿发展&quot;</span>],</span><br><span class="line">            y = [<span class="number">3.65</span>, <span class="number">6.14</span>, <span class="number">0.58</span>],</span><br><span class="line">            name = <span class="string">&quot;201612&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">trace_3 = go.Bar(</span><br><span class="line">            x = [<span class="string">&quot;上海物贸&quot;</span>, <span class="string">&quot;广东明珠&quot;</span>, <span class="string">&quot;五矿发展&quot;</span>],</span><br><span class="line">            y = [<span class="number">2.15</span>, <span class="number">1.35</span>, <span class="number">0.19</span>],</span><br><span class="line">            name = <span class="string">&quot;201703&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">trace = [trace_1, trace_2, trace_3]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Layout</span></span><br><span class="line">layout = go.Layout(</span><br><span class="line">            title = <span class="string">&#x27;国际贸易板块净资产收益率对比图&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure</span></span><br><span class="line">figure = go.Figure(data = trace, layout = layout)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">pyplt(figure)</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/DXj7O1.png" alt="柱状簇"></p>
<p>这么看是非常简单的，想必这章主要是学习画图函数。</p>
<p>比方说我再这么一改，数据还是那个数据，表达形式就变了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import plotly as py</span><br><span class="line">import plotly.graph_objs as go</span><br><span class="line">pyplt &#x3D; py.offline.iplot</span><br><span class="line"># Traces</span><br><span class="line">trace_1 &#x3D; go.Bar(</span><br><span class="line">            x &#x3D; [&quot;09&#x2F;2016&quot;, &quot;12&#x2F;2016&quot;, &quot;03&#x2F;2017&quot;],</span><br><span class="line">            y &#x3D; [4.12, 3.65, 2.15],</span><br><span class="line">            name &#x3D; &quot;上海物贸&quot;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">trace_2 &#x3D; go.Bar(</span><br><span class="line">            x &#x3D; [&quot;09&#x2F;2016&quot;, &quot;12&#x2F;2016&quot;, &quot;03&#x2F;2017&quot;],</span><br><span class="line">            y &#x3D; [5.32, 6.14, 1.35],</span><br><span class="line">            name &#x3D; &quot;广东明珠&quot;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">trace_3 &#x3D; go.Bar(</span><br><span class="line">            x &#x3D; [&quot;09&#x2F;2016&quot;, &quot;12&#x2F;2016&quot;, &quot;03&#x2F;2017&quot;],</span><br><span class="line">            y &#x3D; [0.60, 0.58, 0.19],</span><br><span class="line">            name &#x3D; &quot;五矿发展&quot;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">trace &#x3D; [trace_1, trace_2, trace_3]</span><br><span class="line"></span><br><span class="line"># Layout</span><br><span class="line">layout &#x3D; go.Layout(</span><br><span class="line">            title &#x3D; &#39;国际贸易板块净资产收益率对比图&#39;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"># Figure</span><br><span class="line">figure &#x3D; go.Figure(data &#x3D; trace, layout &#x3D; layout)</span><br><span class="line"></span><br><span class="line"># Plot</span><br><span class="line">pyplt(figure)</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/DXjhYF.png" alt="柱状簇2"></p>
<h3 id="层叠柱状图"><a href="#层叠柱状图" class="headerlink" title="层叠柱状图"></a>层叠柱状图</h3><p>或者是叫堆积柱状图，由<code>barmode = &#39;stack&#39;</code>控制，下图示例：</p>
<p>就像看多个饼图一样，个体占比清晰可见。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">trace_1 = go.Bar(</span><br><span class="line">    x = [<span class="string">&#x27;华夏新经济混合&#x27;</span>, <span class="string">&#x27;华夏上证50&#x27;</span>, <span class="string">&#x27;嘉实新机遇混合&#x27;</span>, <span class="string">&#x27;南方消费活力混合&#x27;</span>,<span class="string">&#x27;华泰柏瑞&#x27;</span>],</span><br><span class="line">    y = [<span class="number">0.7252</span>, <span class="number">0.9912</span>, <span class="number">0.5347</span>, <span class="number">0.4436</span>, <span class="number">0.9911</span>],</span><br><span class="line">    name = <span class="string">&#x27;股票投资&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace_2 = go.Bar(</span><br><span class="line">    x = [<span class="string">&#x27;华夏新经济混合&#x27;</span>, <span class="string">&#x27;华夏上证50&#x27;</span>, <span class="string">&#x27;嘉实新机遇混合&#x27;</span>, <span class="string">&#x27;南方消费活力混合&#x27;</span>,<span class="string">&#x27;华泰柏瑞&#x27;</span>],</span><br><span class="line">    y = [<span class="number">0.2072</span>, <span class="number">0</span>, <span class="number">0.4081</span>, <span class="number">0.4955</span>, <span class="number">0.02</span>],</span><br><span class="line">    name=<span class="string">&#x27;其它投资&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace_3 = go.Bar(</span><br><span class="line">    x = [<span class="string">&#x27;华夏新经济混合&#x27;</span>, <span class="string">&#x27;华夏上证50&#x27;</span>, <span class="string">&#x27;嘉实新机遇混合&#x27;</span>, <span class="string">&#x27;南方消费活力混合&#x27;</span>,<span class="string">&#x27;华泰柏瑞&#x27;</span>],</span><br><span class="line">    y = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.037</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    name=<span class="string">&#x27;债券投资&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace_4 = go.Bar(</span><br><span class="line">    x = [<span class="string">&#x27;华夏新经济混合&#x27;</span>, <span class="string">&#x27;华夏上证50&#x27;</span>, <span class="string">&#x27;嘉实新机遇混合&#x27;</span>, <span class="string">&#x27;南方消费活力混合&#x27;</span>,<span class="string">&#x27;华泰柏瑞&#x27;</span>],</span><br><span class="line">    y = [<span class="number">0.0676</span>, <span class="number">0.0087</span>, <span class="number">0.0202</span>, <span class="number">0.0609</span>, <span class="number">0.0087</span>],</span><br><span class="line">    name=<span class="string">&#x27;银行存款&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace = [trace_1, trace_2, trace_3, trace_4]</span><br><span class="line">layout = go.Layout(</span><br><span class="line">    title = <span class="string">&#x27;基金资产配置比例图&#x27;</span>,</span><br><span class="line">    xaxis = <span class="built_in">dict</span>(tickangle = <span class="number">-45</span>),</span><br><span class="line">    barmode=<span class="string">&#x27;stack&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fig = go.Figure(data = trace, layout = layout)</span><br><span class="line">pyplt(fig)</span><br></pre></td></tr></table></figure>


<p><img src="https://s3.ax1x.com/2020/12/06/DXjISJ.png" alt="层叠柱状图"></p>
<h3 id="瀑布式柱状图"><a href="#瀑布式柱状图" class="headerlink" title="瀑布式柱状图"></a>瀑布式柱状图</h3><p>不表，感觉我用不到。</p>
<h2 id="水平条形图"><a href="#水平条形图" class="headerlink" title="水平条形图"></a>水平条形图</h2><p>与柱状图共用一个函数，需要在<code>bar</code>里设置<code>orientation = &#39;h&#39;</code>，也可以通过设置<code>barmode = &#39;stack&#39;</code>绘制层叠水平条形图与瀑布式水平条形图。</p>
<h3 id="基本案例-1"><a href="#基本案例-1" class="headerlink" title="基本案例"></a>基本案例</h3><p><img src="https://s3.ax1x.com/2020/12/06/DXj4W4.png" alt="水平条形图基础"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">trace_1 = go.Bar(</span><br><span class="line">    y = [<span class="string">&#x27;华夏新经济混合&#x27;</span>, <span class="string">&#x27;嘉实新机遇混合&#x27;</span>, <span class="string">&#x27;南方消费活力混合&#x27;</span>,<span class="string">&#x27;华泰柏瑞&#x27;</span>],</span><br><span class="line">    x = [<span class="number">0.7252</span>, <span class="number">0.5347</span>, <span class="number">0.4436</span>, <span class="number">0.9911</span>],</span><br><span class="line">    orientation = <span class="string">&#x27;h&#x27;</span>,</span><br><span class="line">    name = <span class="string">&#x27;股票投资&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace_2 = go.Bar(</span><br><span class="line">    y = [<span class="string">&#x27;华夏新经济混合&#x27;</span>, <span class="string">&#x27;嘉实新机遇混合&#x27;</span>, <span class="string">&#x27;南方消费活力混合&#x27;</span>],</span><br><span class="line">    x = [<span class="number">0.2072</span>, <span class="number">0.4081</span>, <span class="number">0.4955</span>],</span><br><span class="line">    orientation = <span class="string">&#x27;h&#x27;</span>,</span><br><span class="line">    name=<span class="string">&#x27;其它投资&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace_3 = go.Bar(</span><br><span class="line">    y = [<span class="string">&#x27;华夏新经济混合&#x27;</span>, <span class="string">&#x27;嘉实新机遇混合&#x27;</span>, <span class="string">&#x27;南方消费活力混合&#x27;</span>],</span><br><span class="line">    x = [<span class="number">0</span>, <span class="number">0.037</span>, <span class="number">0</span>],</span><br><span class="line">    orientation = <span class="string">&#x27;h&#x27;</span>,</span><br><span class="line">    name=<span class="string">&#x27;债券投资&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace_4 = go.Bar(</span><br><span class="line">    y = [<span class="string">&#x27;华夏新经济混合&#x27;</span>, <span class="string">&#x27;嘉实新机遇混合&#x27;</span>, <span class="string">&#x27;南方消费活力混合&#x27;</span>],</span><br><span class="line">    x = [<span class="number">0.0676</span>, <span class="number">0.0202</span>, <span class="number">0.0609</span>],</span><br><span class="line">    orientation = <span class="string">&#x27;h&#x27;</span>,</span><br><span class="line">    name=<span class="string">&#x27;银行存款&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace = [trace_1, trace_2, trace_3, trace_4]</span><br><span class="line">layout = go.Layout(</span><br><span class="line">    title = <span class="string">&#x27;基金资产配置比例图&#x27;</span>,</span><br><span class="line">    <span class="comment">#xaxis = dict(tickangle = -45),</span></span><br><span class="line">    barmode=<span class="string">&#x27;stack&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fig = go.Figure(data = trace, layout = layout)</span><br><span class="line">pyplt(fig)</span><br></pre></td></tr></table></figure>

<p>这个坐标轴我看着有点不喜欢，想想办法变成百分比的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">trace_1 = go.Bar(</span><br><span class="line">    y = [<span class="string">&#x27;华夏新经济混合&#x27;</span>, <span class="string">&#x27;嘉实新机遇混合&#x27;</span>, <span class="string">&#x27;南方消费活力混合&#x27;</span>,<span class="string">&#x27;华泰柏瑞&#x27;</span>],</span><br><span class="line">    x = [i*<span class="number">100</span> <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0.7252</span>, <span class="number">0.5347</span>, <span class="number">0.4436</span>, <span class="number">0.9911</span>]],</span><br><span class="line">    orientation = <span class="string">&#x27;h&#x27;</span>,</span><br><span class="line">    name = <span class="string">&#x27;股票投资&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace_2 = go.Bar(</span><br><span class="line">    y = [<span class="string">&#x27;华夏新经济混合&#x27;</span>, <span class="string">&#x27;嘉实新机遇混合&#x27;</span>, <span class="string">&#x27;南方消费活力混合&#x27;</span>],</span><br><span class="line">    x = [i*<span class="number">100</span> <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0.2072</span>, <span class="number">0.4081</span>, <span class="number">0.4955</span>]],</span><br><span class="line">    orientation = <span class="string">&#x27;h&#x27;</span>,</span><br><span class="line">    name=<span class="string">&#x27;其它投资&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace_3 = go.Bar(</span><br><span class="line">    y = [<span class="string">&#x27;华夏新经济混合&#x27;</span>, <span class="string">&#x27;嘉实新机遇混合&#x27;</span>, <span class="string">&#x27;南方消费活力混合&#x27;</span>],</span><br><span class="line">    x = [i*<span class="number">100</span> <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">0.037</span>, <span class="number">0</span>]],</span><br><span class="line">    orientation = <span class="string">&#x27;h&#x27;</span>,</span><br><span class="line">    name=<span class="string">&#x27;债券投资&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace_4 = go.Bar(</span><br><span class="line">    y = [<span class="string">&#x27;华夏新经济混合&#x27;</span>, <span class="string">&#x27;嘉实新机遇混合&#x27;</span>, <span class="string">&#x27;南方消费活力混合&#x27;</span>],</span><br><span class="line">    x = [i*<span class="number">100</span> <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0.0676</span>, <span class="number">0.0202</span>, <span class="number">0.0609</span>]],</span><br><span class="line">    orientation = <span class="string">&#x27;h&#x27;</span>,</span><br><span class="line">    name=<span class="string">&#x27;银行存款&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trace = [trace_1, trace_2, trace_3, trace_4]</span><br><span class="line">layout = go.Layout(</span><br><span class="line">    title = <span class="string">&#x27;基金资产配置比例图&#x27;</span>,</span><br><span class="line">    barmode=<span class="string">&#x27;stack&#x27;</span>,</span><br><span class="line">    xaxis = <span class="built_in">dict</span>(</span><br><span class="line">    ticksuffix = <span class="string">&#x27;%&#x27;</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fig = go.Figure(data = trace, layout = layout)</span><br><span class="line">pyplt(fig)</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/12/06/DXjol9.png" alt="水平条形图基础2"></p>
<h3 id="高难度应用"><a href="#高难度应用" class="headerlink" title="高难度应用"></a>高难度应用</h3><p><img src="https://s3.ax1x.com/2020/12/06/DXjTyR.png" alt="水平条形图难度"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">from</span> plotly <span class="keyword">import</span> tools</span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">y_saving = [<span class="number">1.3586</span>, <span class="number">2.2623000000000002</span>, <span class="number">4.9821999999999997</span>, <span class="number">6.5096999999999996</span>,</span><br><span class="line">            <span class="number">7.4812000000000003</span>, <span class="number">7.5133000000000001</span>, <span class="number">15.2148</span>, <span class="number">17.520499999999998</span></span><br><span class="line">            ] <span class="comment"># 左侧的，对应柱形的长度</span></span><br><span class="line">y_net_worth = [<span class="number">93453.919999999998</span>, <span class="number">81666.570000000007</span>, <span class="number">69889.619999999995</span>,</span><br><span class="line">               <span class="number">78381.529999999999</span>, <span class="number">141395.29999999999</span>, <span class="number">92969.020000000004</span>,</span><br><span class="line">               <span class="number">66090.179999999993</span>, <span class="number">122379.3</span>] <span class="comment"># 右侧的，对应折线的值，分别对应从下至上</span></span><br><span class="line">x_saving = [<span class="string">&#x27;Japan&#x27;</span>, <span class="string">&#x27;United Kingdom&#x27;</span>, <span class="string">&#x27;Canada&#x27;</span>, <span class="string">&#x27;Netherlands&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;United States&#x27;</span>, <span class="string">&#x27;Belgium&#x27;</span>, <span class="string">&#x27;Sweden&#x27;</span>, <span class="string">&#x27;Switzerland&#x27;</span>]</span><br><span class="line">x_net_worth = [<span class="string">&#x27;Japan&#x27;</span>, <span class="string">&#x27;United Kingdom&#x27;</span>, <span class="string">&#x27;Canada&#x27;</span>, <span class="string">&#x27;Netherlands&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;United States&#x27;</span>, <span class="string">&#x27;Belgium&#x27;</span>, <span class="string">&#x27;Sweden&#x27;</span>, <span class="string">&#x27;Switzerland&#x27;</span></span><br><span class="line">               ]</span><br><span class="line">trace0 = go.Bar(</span><br><span class="line">    x = y_saving,</span><br><span class="line">    y = x_saving,</span><br><span class="line">    marker = <span class="built_in">dict</span>(</span><br><span class="line">        color = <span class="string">&#x27;rgba(50, 171, 96, 0.6)&#x27;</span>, <span class="comment"># 柱形颜色</span></span><br><span class="line">        line = <span class="built_in">dict</span>(</span><br><span class="line">            color = <span class="string">&#x27;rgba(50, 171, 96, 1.0)&#x27;</span>, <span class="comment"># 柱形边框颜色</span></span><br><span class="line">            width = <span class="number">1</span>),</span><br><span class="line">    ),</span><br><span class="line">    name = <span class="string">&#x27;Household savings, percentage of household disposable income&#x27;</span>,</span><br><span class="line">    orientation = <span class="string">&#x27;h&#x27;</span>,</span><br><span class="line">)</span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x = y_net_worth,</span><br><span class="line">    y = x_net_worth,</span><br><span class="line">    mode = <span class="string">&#x27;lines + markers&#x27;</span>,</span><br><span class="line">    line = <span class="built_in">dict</span>(</span><br><span class="line">        color = <span class="string">&#x27;rgb(128, 0, 128)&#x27;</span>), <span class="comment"># 折线颜色</span></span><br><span class="line">    name = <span class="string">&#x27;Household net worth, Million USD/capita&#x27;</span>,</span><br><span class="line">)</span><br><span class="line">layout = <span class="built_in">dict</span>(</span><br><span class="line">    title = <span class="string">&#x27;Household savings &amp; net worth for eight OECD countries&#x27;</span>,</span><br><span class="line">    <span class="comment"># 左边的图 y 轴</span></span><br><span class="line">    yaxis1 = <span class="built_in">dict</span>(</span><br><span class="line">        showgrid = <span class="literal">False</span>,          <span class="comment"># 是否显示横向网格</span></span><br><span class="line">        showline = <span class="literal">False</span>,          <span class="comment"># 是否显示左侧轴线</span></span><br><span class="line">        showticklabels = <span class="literal">True</span>,     <span class="comment"># 是否显示坐标轴上的标注</span></span><br><span class="line">        domain = [<span class="number">0</span>, <span class="number">0.85</span>],</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment"># 右边的图 y 轴</span></span><br><span class="line">    yaxis2 = <span class="built_in">dict</span>(</span><br><span class="line">        showgrid = <span class="literal">False</span>,</span><br><span class="line">        showline = <span class="literal">True</span>,</span><br><span class="line">        showticklabels = <span class="literal">False</span>,</span><br><span class="line">        linecolor = <span class="string">&#x27;rgba(102, 102, 102, 0.8)&#x27;</span>, <span class="comment"># 左侧轴线颜色</span></span><br><span class="line">        linewidth = <span class="number">2</span>,</span><br><span class="line">        domain = [<span class="number">0</span>, <span class="number">0.85</span>],</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment"># 左边的图 x 轴</span></span><br><span class="line">    xaxis1 = <span class="built_in">dict</span>(</span><br><span class="line">        zeroline = <span class="literal">False</span>,     <span class="comment"># 是否显示左侧轴线</span></span><br><span class="line">        showline = <span class="literal">False</span>,     <span class="comment"># 是否显示下方轴线</span></span><br><span class="line">        showticklabels = <span class="literal">True</span>,</span><br><span class="line">        showgrid = <span class="literal">True</span>,      <span class="comment"># 是否显示纵向网格</span></span><br><span class="line">        domain = [<span class="number">0</span>, <span class="number">0.42</span>],</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment"># 右边的图 x 轴</span></span><br><span class="line">    xaxis2 = <span class="built_in">dict</span>( </span><br><span class="line">        zeroline = <span class="literal">False</span>, </span><br><span class="line">        showline = <span class="literal">False</span>, </span><br><span class="line">        showticklabels = <span class="literal">True</span>, </span><br><span class="line">        showgrid = <span class="literal">True</span>, </span><br><span class="line">        domain = [<span class="number">0.47</span>, <span class="number">1</span>],</span><br><span class="line">        side = <span class="string">&#x27;top&#x27;</span>, <span class="comment"># 轴上标注在上方，默认下方</span></span><br><span class="line">        dtick = <span class="number">25000</span>, <span class="comment"># 调整轴上标注数值间隔，25000表示相邻标注间隔数值为25000</span></span><br><span class="line">    ),</span><br><span class="line">    legend = <span class="built_in">dict</span>(</span><br><span class="line">        x = <span class="number">0.029</span>,   <span class="comment"># 图例x位置</span></span><br><span class="line">        y = <span class="number">1.038</span>,   <span class="comment"># 图例y位置</span></span><br><span class="line">        font = <span class="built_in">dict</span>(</span><br><span class="line">            size = <span class="number">10</span>, <span class="comment"># 图例字号大小</span></span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">    margin = <span class="built_in">dict</span>(</span><br><span class="line">        l = <span class="number">100</span>, <span class="comment"># 左侧空白大小</span></span><br><span class="line">        r = <span class="number">20</span>,  <span class="comment"># 右侧空白大小</span></span><br><span class="line">        t = <span class="number">70</span>,  <span class="comment"># 上方空白大小</span></span><br><span class="line">        b = <span class="number">70</span>,  <span class="comment"># 下方空白大小</span></span><br><span class="line">    ),</span><br><span class="line">    paper_bgcolor = <span class="string">&#x27;rgb(248, 248, 255)&#x27;</span>, <span class="comment"># 整张图片背景颜色</span></span><br><span class="line">    plot_bgcolor = <span class="string">&#x27;rgb(248, 248, 255)&#x27;</span>,  <span class="comment"># 绘图部分背景颜色</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">annotations = []</span><br><span class="line"></span><br><span class="line">y_s = np.<span class="built_in">round</span>(y_saving, decimals = <span class="number">2</span>) <span class="comment"># 四舍五入至两位小数</span></span><br><span class="line">y_nw = np.rint(y_net_worth)            <span class="comment"># 四舍五入至整数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ydn, yd, xd <span class="keyword">in</span> <span class="built_in">zip</span>(y_nw, y_s, x_saving): <span class="comment"># 把数据对应起来</span></span><br><span class="line">    <span class="comment"># 右侧折线图设置标签</span></span><br><span class="line">    annotations.append(<span class="built_in">dict</span>(xref = <span class="string">&#x27;x2&#x27;</span>, yref = <span class="string">&#x27;y2&#x27;</span>,</span><br><span class="line">                            y = xd, x = ydn - <span class="number">20000</span>,</span><br><span class="line">                            text=<span class="string">&#x27;&#123;:,&#125;&#x27;</span>.<span class="built_in">format</span>(ydn) + <span class="string">&#x27;M&#x27;</span>, <span class="comment"># 从右向左，每隔三位&#x27;,&#x27;</span></span><br><span class="line">                            font = <span class="built_in">dict</span>(family = <span class="string">&#x27;Arial&#x27;</span>, size = <span class="number">12</span>, </span><br><span class="line">                                      color = <span class="string">&#x27;rgb(128, 0, 128)&#x27;</span>), <span class="comment"># 设置标签字体，颜色与大小</span></span><br><span class="line">                            showarrow = <span class="literal">False</span>)) <span class="comment"># 是否添加从标签到数据点的箭头</span></span><br><span class="line">    <span class="comment"># 左侧水平柱形图设置标签</span></span><br><span class="line">    annotations.append(<span class="built_in">dict</span>(xref = <span class="string">&#x27;x1&#x27;</span>, yref = <span class="string">&#x27;y1&#x27;</span>,</span><br><span class="line">                            y = xd, x = yd + <span class="number">3</span>,</span><br><span class="line">                            text = <span class="built_in">str</span>(yd) + <span class="string">&#x27;%&#x27;</span>,</span><br><span class="line">                            font = <span class="built_in">dict</span>(family = <span class="string">&#x27;Arial&#x27;</span>, size = <span class="number">12</span>,</span><br><span class="line">                                      color = <span class="string">&#x27;rgb(50, 171, 96)&#x27;</span>),</span><br><span class="line">                            showarrow = <span class="literal">False</span>))</span><br><span class="line"><span class="comment"># 下侧标签设置</span></span><br><span class="line">annotations.append(<span class="built_in">dict</span>(xref = <span class="string">&#x27;paper&#x27;</span>, yref = <span class="string">&#x27;paper&#x27;</span>, <span class="comment"># 设置文字样式</span></span><br><span class="line">                        x = <span class="number">0.3</span>, y = <span class="number">-0.05</span>, <span class="comment"># 设置文字位置</span></span><br><span class="line">                        text = <span class="string">&#x27;OECD &quot;&#x27;</span> +</span><br><span class="line">                             <span class="string">&#x27;(2015), Household savings (indicator), &#x27;</span> +</span><br><span class="line">                             <span class="string">&#x27;Household net worth (indicator). doi: &#x27;</span> +</span><br><span class="line">                             <span class="string">&#x27;10.1787/cfc6f499-en (Accessed on 05 June 2015)&#x27;</span>, <span class="comment"># 设置图下方文字</span></span><br><span class="line">                        font = <span class="built_in">dict</span>(family = <span class="string">&#x27;Arial&#x27;</span>, size = <span class="number">10</span>, <span class="comment"># 设置图下方文字格式</span></span><br><span class="line">                                  color = <span class="string">&#x27;rgb(150,150,150)&#x27;</span>),</span><br><span class="line">                        showarrow = <span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line">layout[<span class="string">&#x27;annotations&#x27;</span>] = annotations</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一左一右两个画布</span></span><br><span class="line"><span class="comment"># shared_yaxes 不共享y轴，shared_xaxes 共享x轴，rows = 1, cols = 2 表示划分为两个子图</span></span><br><span class="line">fig = tools.make_subplots(rows = <span class="number">1</span>, cols = <span class="number">2</span>, </span><br><span class="line">                          shared_xaxes = <span class="literal">True</span>,</span><br><span class="line">                          shared_yaxes = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">fig.append_trace(trace0, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace1, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>].update(layout)</span><br><span class="line">pyplt(fig)</span><br></pre></td></tr></table></figure>

<p>本样例来自<code>plotly</code>官网。且本书作者已给出详细注释，概括起来代码就是：</p>
<ul>
<li>数据</li>
<li>trace</li>
<li>各自的样式layout</li>
<li>各自的注释annotation</li>
<li>整个画布一分为二</li>
</ul>
<h2 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h2><h3 id="简单案例-2"><a href="#简单案例-2" class="headerlink" title="简单案例"></a>简单案例</h3><p><img src="https://s3.ax1x.com/2020/12/06/DjfiEn.png" alt="甘特图"></p>
<p>常用于显示项目的进度、时间的安排等与时间有关的东西。</p>
<p>使用函数为<code>plotly.figure</code>中的<code>creat_gantt</code>，通过传递事件task与开始start结束finish的数据来绘制图表。<br>越接近左侧，越早发生；<br>越接近右侧，越快结束。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.figure_factory <span class="keyword">as</span> ff</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line">df = [<span class="built_in">dict</span>(Task=<span class="string">&quot;Job A&quot;</span>, Start=<span class="string">&#x27;2009-01-01&#x27;</span>, Finish=<span class="string">&#x27;2009-02-28&#x27;</span>, Complete=<span class="number">10</span>),</span><br><span class="line">      <span class="built_in">dict</span>(Task=<span class="string">&quot;Job B&quot;</span>, Start=<span class="string">&#x27;2008-12-05&#x27;</span>, Finish=<span class="string">&#x27;2009-04-15&#x27;</span>, Complete=<span class="number">10</span>),</span><br><span class="line">      <span class="built_in">dict</span>(Task=<span class="string">&quot;Job C&quot;</span>, Start=<span class="string">&#x27;2009-02-20&#x27;</span>, Finish=<span class="string">&#x27;2009-05-30&#x27;</span>, Complete=<span class="number">50</span>),</span><br><span class="line">      <span class="built_in">dict</span>(Task=<span class="string">&quot;Job D&quot;</span>, Start=<span class="string">&#x27;2009-03-20&#x27;</span>, Finish=<span class="string">&#x27;2009-06-30&#x27;</span>, Complete=<span class="number">50</span>),</span><br><span class="line">      <span class="built_in">dict</span>(Task=<span class="string">&quot;Job E&quot;</span>, Start=<span class="string">&#x27;2009-01-12&#x27;</span>, Finish=<span class="string">&#x27;2009-04-28&#x27;</span>, Complete=<span class="number">100</span>),</span><br><span class="line">      <span class="built_in">dict</span>(Task=<span class="string">&quot;Job F&quot;</span>, Start=<span class="string">&#x27;2009-03-07&#x27;</span>, Finish=<span class="string">&#x27;2009-08-21&#x27;</span>, Complete=<span class="number">100</span>)]</span><br><span class="line"></span><br><span class="line">fig = ff.create_gantt(df, index_col=<span class="string">&#x27;Complete&#x27;</span>, show_colorbar=<span class="literal">True</span>) <span class="comment">#Complete类似一个百分比程度，是索引，传给index_col</span></span><br><span class="line">pyplt(fig)</span><br></pre></td></tr></table></figure>

<p>这图太赞了，果然是展示计划进行程度非常之合适。</p>
<h3 id="应用案例-1"><a href="#应用案例-1" class="headerlink" title="应用案例"></a>应用案例</h3><p>注意以下几个点：</p>
<ul>
<li>数据精确到了秒<code>s</code></li>
<li>上面简单案例是按照数字索引，下面是按照类别索引</li>
<li>设置了颜色<code>colors</code>,放在<code>create_grantt</code></li>
</ul>
<p><img src="https://s3.ax1x.com/2020/12/06/Djfnu4.png" alt="甘特图应用案例"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.figure_factory <span class="keyword">as</span> ff</span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">df = [</span><br><span class="line">    <span class="built_in">dict</span>(Task=<span class="string">&#x27;Morning Sleep&#x27;</span>, Start=<span class="string">&#x27;2016-01-01&#x27;</span>, Finish=<span class="string">&#x27;2016-01-01 6:00:00&#x27;</span>, Resource=<span class="string">&#x27;Sleep&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(Task=<span class="string">&#x27;Breakfast&#x27;</span>, Start=<span class="string">&#x27;2016-01-01 7:00:00&#x27;</span>, Finish=<span class="string">&#x27;2016-01-01 7:30:00&#x27;</span>, Resource=<span class="string">&#x27;Food&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(Task=<span class="string">&#x27;Work&#x27;</span>, Start=<span class="string">&#x27;2016-01-01 9:00:00&#x27;</span>, Finish=<span class="string">&#x27;2016-01-01 11:25:00&#x27;</span>, Resource=<span class="string">&#x27;Brain&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(Task=<span class="string">&#x27;Break&#x27;</span>, Start=<span class="string">&#x27;2016-01-01 11:30:00&#x27;</span>, Finish=<span class="string">&#x27;2016-01-01 12:00:00&#x27;</span>, Resource=<span class="string">&#x27;Rest&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(Task=<span class="string">&#x27;Lunch&#x27;</span>, Start=<span class="string">&#x27;2016-01-01 12:00:00&#x27;</span>, Finish=<span class="string">&#x27;2016-01-01 13:00:00&#x27;</span>, Resource=<span class="string">&#x27;Food&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(Task=<span class="string">&#x27;Work&#x27;</span>, Start=<span class="string">&#x27;2016-01-01 13:00:00&#x27;</span>, Finish=<span class="string">&#x27;2016-01-01 17:00:00&#x27;</span>, Resource=<span class="string">&#x27;Brain&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(Task=<span class="string">&#x27;Exercise&#x27;</span>, Start=<span class="string">&#x27;2016-01-01 17:30:00&#x27;</span>, Finish=<span class="string">&#x27;2016-01-01 18:30:00&#x27;</span>, Resource=<span class="string">&#x27;Cardio&#x27;</span>), </span><br><span class="line">    <span class="built_in">dict</span>(Task=<span class="string">&#x27;Post Workout Rest&#x27;</span>, Start=<span class="string">&#x27;2016-01-01 18:30:00&#x27;</span>, Finish=<span class="string">&#x27;2016-01-01 19:00:00&#x27;</span>, Resource=<span class="string">&#x27;Rest&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(Task=<span class="string">&#x27;Dinner&#x27;</span>, Start=<span class="string">&#x27;2016-01-01 19:00:00&#x27;</span>, Finish=<span class="string">&#x27;2016-01-01 20:00:00&#x27;</span>, Resource=<span class="string">&#x27;Food&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(Task=<span class="string">&#x27;Evening Sleep&#x27;</span>, Start=<span class="string">&#x27;2016-01-01 21:00:00&#x27;</span>, Finish=<span class="string">&#x27;2016-01-01 23:59:00&#x27;</span>, Resource=<span class="string">&#x27;Sleep&#x27;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">colors = <span class="built_in">dict</span>(Cardio = <span class="string">&#x27;rgb(46, 137, 205)&#x27;</span>,</span><br><span class="line">              Food = <span class="string">&#x27;rgb(114, 44, 121)&#x27;</span>,</span><br><span class="line">              Sleep = <span class="string">&#x27;rgb(198, 47, 105)&#x27;</span>,</span><br><span class="line">              Brain = <span class="string">&#x27;rgb(58, 149, 136)&#x27;</span>,</span><br><span class="line">              Rest = <span class="string">&#x27;rgb(107, 127, 135)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fig = ff.create_gantt(df, colors = colors, index_col = <span class="string">&#x27;Resource&#x27;</span>, title = <span class="string">&#x27;Daily Schedule&#x27;</span>,</span><br><span class="line">                      bar_width = <span class="number">0.8</span>, showgrid_x = <span class="literal">True</span>, showgrid_y = <span class="literal">True</span>)</span><br><span class="line">pyplt(fig)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>现在画的图越好看，我越想知道实际工作中面对数据文件应该如何操作。</p>
<h2 id="面积图"><a href="#面积图" class="headerlink" title="面积图"></a>面积图</h2><p>使用的是<code>scatter</code>，与散点图气泡图折线图用的一样的函数。</p>
<p>还需要在折线图的基础上对<code>fill = &#39;tonexty&#39;</code>进行设置，</p>
<h3 id="基本案例-2"><a href="#基本案例-2" class="headerlink" title="基本案例"></a>基本案例</h3><p><img src="https://s3.ax1x.com/2020/12/06/DjfCHs.png" alt="面积图"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = np.random.RandomState(<span class="number">8</span>) <span class="comment"># 定义局部种子</span></span><br><span class="line">s2 = np.random.RandomState(<span class="number">9</span>) </span><br><span class="line">rd1 = s1.rand(<span class="number">100</span>)/<span class="number">10</span> - <span class="number">0.02</span>  <span class="comment"># 随机生成100个交易日的收益率</span></span><br><span class="line">rd2 = s2.rand(<span class="number">100</span>)/<span class="number">10</span> - <span class="number">0.02</span></span><br><span class="line"></span><br><span class="line">initial1 = <span class="number">100000</span> <span class="comment"># 设定初始资金</span></span><br><span class="line">initial2 = <span class="number">100000</span></span><br><span class="line">total1 = []</span><br><span class="line">total2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(rd1)):</span><br><span class="line">    initial1 = initial1*rd1[i] + initial1 <span class="comment">#C(1+X)</span></span><br><span class="line">    initial2 = initial2*rd2[i] + initial2</span><br><span class="line">    total1.append(initial1)</span><br><span class="line">    total2.append(initial2)</span><br><span class="line"><span class="comment"># 看看人家生成想要的数的时候是多么流畅</span></span><br><span class="line"></span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    y = total1,</span><br><span class="line">    fill = <span class="string">&#x27;tonexty&#x27;</span>,</span><br><span class="line">    name = <span class="string">&quot;策略1&quot;</span></span><br><span class="line">)</span><br><span class="line">trace2 = go.Scatter(</span><br><span class="line">    y = total2,</span><br><span class="line">    fill = <span class="string">&#x27;tozeroy&#x27;</span>,</span><br><span class="line">    mode= <span class="string">&#x27;none&#x27;</span>, <span class="comment"># 无边界线，上面那个有边界线</span></span><br><span class="line">    name = <span class="string">&quot;策略2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = [trace1, trace2]</span><br><span class="line"></span><br><span class="line">layout = <span class="built_in">dict</span>(title = <span class="string">&#x27;策略净值曲线&#x27;</span>,</span><br><span class="line">              xaxis = <span class="built_in">dict</span>(title = <span class="string">&#x27;交易天数&#x27;</span>),</span><br><span class="line">              yaxis = <span class="built_in">dict</span>(title = <span class="string">&#x27;净值&#x27;</span>),</span><br><span class="line">              )</span><br><span class="line">fig = <span class="built_in">dict</span>(data = data, layout = layout)</span><br><span class="line">pyplt(fig)</span><br></pre></td></tr></table></figure>
<h3 id="内部填充面积图"><a href="#内部填充面积图" class="headerlink" title="内部填充面积图"></a>内部填充面积图</h3><p>还有一种内部填充面积图，比如还是上例，就两个<code>fill</code>分别设置成<code>fill = None&#39;,</code>和<code>fill = &#39;tonexty&#39;</code>即可。<br>注意上例中第二个是<code>fill = &#39;tozeroy&#39;</code>！！<br>这样只有两个折线之间的阴影了。</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjfpuQ.png" alt="内部填充面积图"></p>
<h3 id="堆积面积图"><a href="#堆积面积图" class="headerlink" title="堆积面积图"></a>堆积面积图</h3><p>与层叠柱状图很像啊，不同之处在于数据的设定，对于个体来说数值得越来越大。</p>
<h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><h3 id="基本案例-3"><a href="#基本案例-3" class="headerlink" title="基本案例"></a>基本案例</h3><p>使用的函数是<code>graph_objs</code>里的<code>Histogram</code>函数。<br>把数据给参数x就是一般的直方图，给参数y就是水平直方图，默认的坐标是样本个数，通过设定<code>histnorm = &#39;probability&#39;</code>使其变为频率。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line">s1 = np.random.RandomState(<span class="number">1</span>)  </span><br><span class="line">x = s1.randn(<span class="number">1000</span>)   <span class="comment">#正态分布 1000个</span></span><br><span class="line"></span><br><span class="line">data = [go.Histogram(x=x, histnorm = <span class="string">&#x27;probability&#x27;</span>)] </span><br><span class="line">pyplt(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/DjWqAI.png" alt="直方图简单案例"></p>
<h3 id="重叠直方图"><a href="#重叠直方图" class="headerlink" title="重叠直方图"></a>重叠直方图</h3><p>通过<code>barmode=&#39;overlay&#39;</code>设置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line">s1 = np.random.RandomState(<span class="number">1</span>)  </span><br><span class="line">x0 = s1.randn(<span class="number">1000</span>)</span><br><span class="line">x1 = s1.chisquare(<span class="number">5</span>,<span class="number">1000</span>) <span class="comment">#上面是正态的，这是卡方的。</span></span><br><span class="line"></span><br><span class="line">trace1 = go.Histogram(</span><br><span class="line">    x = x0,</span><br><span class="line">    histnorm = <span class="string">&#x27;probability&#x27;</span>, <span class="comment">#显示频率</span></span><br><span class="line">    opacity = <span class="number">0.75</span></span><br><span class="line">)</span><br><span class="line">trace2 = go.Histogram(</span><br><span class="line">    x = x1,</span><br><span class="line">    histnorm = <span class="string">&#x27;probability&#x27;</span>,</span><br><span class="line">    opacity = <span class="number">0.75</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = [trace1, trace2]</span><br><span class="line">layout = go.Layout(barmode=<span class="string">&#x27;overlay&#x27;</span>)  <span class="comment">#在这里</span></span><br><span class="line">fig = go.Figure(data = data, layout = layout)</span><br><span class="line">pyplt(fig)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/DjWLNt.png" alt="重叠直方图"></p>
<h3 id="层叠直方图"><a href="#层叠直方图" class="headerlink" title="层叠直方图"></a>层叠直方图</h3><p>通过<code>barmode=&#39;stack&#39;</code>设置。</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjWj9f.png" alt="层叠直方图"></p>
<h3 id="累积直方图"><a href="#累积直方图" class="headerlink" title="累积直方图"></a>累积直方图</h3><p>没有看到这个书上直方图关于颜色的参数，那我就试试之前的设置方法管用吗，结果是管用的，开心，不能光抄代码，必须动脑子。</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjWv38.png" alt="累积直方图+颜色"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line">s1 = np.random.RandomState(<span class="number">1</span>)</span><br><span class="line">x0 = s1.randn(<span class="number">1000</span>)</span><br><span class="line">x1 = s1.chisquare(<span class="number">5</span>,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">trace1 = [go.Histogram(</span><br><span class="line">    x = x0,</span><br><span class="line">    histnorm = <span class="string">&#x27;probability&#x27;</span>,</span><br><span class="line">    cumulative=<span class="built_in">dict</span>(enabled=<span class="literal">True</span>),</span><br><span class="line">    marker = <span class="built_in">dict</span>(</span><br><span class="line">        color = <span class="string">&#x27;rgb(50, 171, 96)&#x27;</span>,</span><br><span class="line">        line = <span class="built_in">dict</span>(</span><br><span class="line">            color = <span class="string">&#x27;rgb(50, 171, 96)&#x27;</span></span><br><span class="line">            ),</span><br><span class="line">    ),</span><br><span class="line">    opacity = <span class="number">0.75</span></span><br><span class="line">)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pyplt(trace1)</span><br></pre></td></tr></table></figure>
<p><code>cumulative=dict(enabled=True)</code>这是累积直方图的参数，有<code>enabled</code>(默认<code>false</code>则不进行累计)、<code>directio</code>(累积方向，越来越大或者越来越小)、<code>currentbin</code>(为了防止偏差，一般选择<code>half</code>)三个关键字。<br><code>xbins</code>设置划分区间属性，<code>start</code>是起始坐标，<code>end</code>是终止坐标，<code>size</code>是区间长度。</p>
<h3 id="难度应用案例"><a href="#难度应用案例" class="headerlink" title="难度应用案例"></a>难度应用案例</h3><p><img src="https://s3.ax1x.com/2020/12/06/DjWxgS.png" alt="直方图难度案例"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> plotly.figure_factory <span class="keyword">as</span> ff</span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = np.random.RandomState(<span class="number">12</span>)</span><br><span class="line">x1 = s1.standard_cauchy(<span class="number">200</span>) - <span class="number">4</span>    <span class="comment"># 柯西分布</span></span><br><span class="line">x2 = s1.uniform(<span class="number">1</span>,<span class="number">10</span>,<span class="number">200</span>)           <span class="comment"># 泊松分布</span></span><br><span class="line">x3 = s1.standard_gamma(<span class="number">3</span>,<span class="number">200</span>) + <span class="number">4</span>   <span class="comment"># Gamma 分布</span></span><br><span class="line">x4 = s1.exponential(<span class="number">3</span>,<span class="number">200</span>) + <span class="number">8</span>      <span class="comment"># 指数分布</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hist_data = [x1, x2, x3, x4]</span><br><span class="line"></span><br><span class="line">group_labels = [<span class="string">&#x27;Group 1&#x27;</span>, <span class="string">&#x27;Group 2&#x27;</span>, <span class="string">&#x27;Group 3&#x27;</span>, <span class="string">&#x27;Group 4&#x27;</span>]</span><br><span class="line">fig = ff.create_distplot(hist_data, group_labels, bin_size=<span class="number">4</span>) <span class="comment">#？？？</span></span><br><span class="line">pyplt(fig)</span><br></pre></td></tr></table></figure>
<p>怎么换了画图函数啊，<code>bin_size</code>我也没懂，随便试了试，好像进行了一些放缩。</p>
<h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><p>用的是<code>graph_objs</code>里的<code>pie</code>函数。他有两个常用参数，<code>values</code>用于赋给需要可视化的数据，<code>labels</code>表示不同数据对应的标签。</p>
<h3 id="基本饼图"><a href="#基本饼图" class="headerlink" title="基本饼图"></a>基本饼图</h3><p><img src="https://s3.ax1x.com/2020/12/06/DjH43R.png" alt="饼图案例"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line">labels = [<span class="string">&#x27;上海国际集团有限公司&#x27;</span>, <span class="string">&#x27;中国移动通信集团&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;富德生命人寿-传统&#x27;</span>, <span class="string">&#x27;富德生命人寿-资本金&#x27;</span>, <span class="string">&#x27;上海上国投资产管理有限公司&#x27;</span>]</span><br><span class="line">values = [<span class="number">4222533311</span>, <span class="number">4103763711</span>, <span class="number">2138028672</span>, <span class="number">1356332558</span>, <span class="number">1073516173</span>]</span><br><span class="line">colors = [<span class="string">&#x27;#104E8B&#x27;</span>, <span class="string">&#x27;#1874CD&#x27;</span>, <span class="string">&#x27;#1C86EE&#x27;</span>, <span class="string">&#x27;#6495ED&#x27;</span>]</span><br><span class="line"></span><br><span class="line">trace = [go.Pie(labels = labels, </span><br><span class="line">                values = values,</span><br><span class="line">                rotation = <span class="number">30</span>, <span class="comment">#旋转角度</span></span><br><span class="line">                opacity = <span class="number">1</span>,   </span><br><span class="line">                showlegend = <span class="literal">False</span>,   <span class="comment">#是否显示图例</span></span><br><span class="line">                pull = [<span class="number">0.1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],  <span class="comment">#用于设置组成饼图的各个扇形的突出程度</span></span><br><span class="line">                hoverinfo = <span class="string">&#x27;label+percent&#x27;</span>,  <span class="comment">#用户将鼠标移到数据上时显示的内容</span></span><br><span class="line">                textinfo = <span class="string">&#x27;percent&#x27;</span>, <span class="comment">#设置显示在扇形上的是具体数值textinfo = &#x27;value&#x27;还是这里的比例</span></span><br><span class="line">                textfont = <span class="built_in">dict</span>(size = <span class="number">30</span>, color = <span class="string">&#x27;white&#x27;</span>),</span><br><span class="line">                marker = <span class="built_in">dict</span>(colors = colors,  <span class="comment">#每个扇形的样式</span></span><br><span class="line">                                line = <span class="built_in">dict</span>(color = <span class="string">&#x27;#000000&#x27;</span>,  <span class="comment">#扇形边框</span></span><br><span class="line">                                            width = <span class="number">2</span>)))]</span><br><span class="line">fig = go.Figure(data = trace)</span><br><span class="line">pyplt(trace)</span><br></pre></td></tr></table></figure>
<h3 id="环形饼图"><a href="#环形饼图" class="headerlink" title="环形饼图"></a>环形饼图</h3><p><code>hole =  0.7</code>可以理解为控制中心空的也可以理解为图的胖瘦，这个值是1的时候，中心就不空了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">labels = [<span class="string">&#x27;完成&#x27;</span>,<span class="string">&#x27;未完成&#x27;</span>]</span><br><span class="line">values = [<span class="number">0.7</span>,<span class="number">0.3</span>]</span><br><span class="line">trace = [go.Pie(</span><br><span class="line">    labels = labels, </span><br><span class="line">    values = values, </span><br><span class="line">    hole =  <span class="number">0.7</span>,</span><br><span class="line">    hoverinfo = <span class="string">&quot;label + percent&quot;</span>)]</span><br><span class="line">layout = go.Layout(</span><br><span class="line">    title = <span class="string">&#x27;工作进度图&#x27;</span></span><br><span class="line">)</span><br><span class="line">fig = go.Figure(data = trace, layout = layout)</span><br><span class="line">pyplt(fig)</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/DjH5g1.png" alt="环形饼图"></p>
<h3 id="高级案例"><a href="#高级案例" class="headerlink" title="高级案例"></a>高级案例</h3><p><img src="https://s3.ax1x.com/2020/12/06/DjHTu6.png" alt="饼图案例3"></p>
<p>学习一下数据的输入方式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyplt = py.offline.iplot</span><br><span class="line">fig = &#123;</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;values&quot;</span>: [<span class="number">9884</span>, <span class="number">9510</span>, <span class="number">9363</span>, <span class="number">7961</span>, <span class="number">6755</span>],</span><br><span class="line">      <span class="string">&quot;labels&quot;</span>: [</span><br><span class="line">          <span class="string">&#x27;金瑞期货&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;海通期货&#x27;</span>, </span><br><span class="line">          <span class="string">&#x27;国泰君安&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;银河期货&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;五矿经易&#x27;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&#x27;domain&#x27;</span>: &#123;<span class="string">&#x27;x&#x27;</span>: [<span class="number">0</span>, <span class="number">.6</span>],</span><br><span class="line">                <span class="string">&#x27;y&#x27;</span>: [<span class="number">0</span>, <span class="number">.5</span>]&#125;,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;AU.SHF多头持仓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;hoverinfo&quot;</span>:<span class="string">&quot;label + percent + name&quot;</span>,</span><br><span class="line">      <span class="string">&quot;hole&quot;</span>: <span class="number">.4</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;pie&quot;</span></span><br><span class="line">    &#125;,     </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;values&quot;</span>: [<span class="number">8847</span>, <span class="number">6229</span>, <span class="number">2764</span>, <span class="number">2406</span>, <span class="number">2022</span>],</span><br><span class="line">      <span class="string">&quot;labels&quot;</span>: [</span><br><span class="line">          <span class="string">&#x27;中信期货&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;招金期货&#x27;</span>, </span><br><span class="line">          <span class="string">&#x27;国贸期货&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;铜冠金源&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;中银国际&#x27;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&#x27;domain&#x27;</span>: &#123;<span class="string">&#x27;x&#x27;</span>: [<span class="number">.2</span>, <span class="number">1</span>],</span><br><span class="line">                <span class="string">&#x27;y&#x27;</span>: [<span class="number">0</span>, <span class="number">.5</span>]&#125;,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;AU.SHF空头持仓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;hoverinfo&quot;</span>:<span class="string">&quot;label + percent + name&quot;</span>,</span><br><span class="line">      <span class="string">&quot;hole&quot;</span>: <span class="number">.4</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;pie&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;values&quot;</span>: [<span class="number">14393</span>, <span class="number">12220</span>, <span class="number">11824</span>, <span class="number">11233</span>, <span class="number">10072</span>],</span><br><span class="line">      <span class="string">&quot;labels&quot;</span>: [</span><br><span class="line">          <span class="string">&#x27;中信期货&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;东证期货&#x27;</span>, </span><br><span class="line">          <span class="string">&#x27;海通期货&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;方正中期&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;国泰君安&#x27;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&#x27;domain&#x27;</span>: &#123;<span class="string">&#x27;x&#x27;</span>: [<span class="number">0</span>, <span class="number">.9</span>],</span><br><span class="line">                <span class="string">&#x27;y&#x27;</span>: [<span class="number">.5</span>, <span class="number">1</span>]&#125;,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;AG.SHF多头持仓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;hoverinfo&quot;</span>:<span class="string">&quot;label + percent + name&quot;</span>,</span><br><span class="line">      <span class="string">&quot;hole&quot;</span>: <span class="number">.4</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;pie&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;values&quot;</span>: [<span class="number">30983</span>, <span class="number">20699</span>, <span class="number">16781</span>, <span class="number">15686</span>, <span class="number">14198</span>],</span><br><span class="line">      <span class="string">&quot;labels&quot;</span>: [</span><br><span class="line">          <span class="string">&#x27;中信期货&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;国泰君安&#x27;</span>, </span><br><span class="line">          <span class="string">&#x27;海通期货&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;国贸期货&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;永安期货&#x27;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&#x27;domain&#x27;</span>: &#123;<span class="string">&#x27;x&#x27;</span>: [<span class="number">0.5</span>, <span class="number">1</span>],</span><br><span class="line">                <span class="string">&#x27;y&#x27;</span>: [<span class="number">.5</span>, <span class="number">1</span>]&#125;,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;AG.SHF空头持仓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;hoverinfo&quot;</span>:<span class="string">&quot;label + percent + name&quot;</span>,</span><br><span class="line">      <span class="string">&quot;hole&quot;</span>: <span class="number">.4</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;pie&quot;</span></span><br><span class="line">    &#125;],</span><br><span class="line">    </span><br><span class="line">  <span class="string">&quot;layout&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;title&quot;</span>:<span class="string">&quot;有色金属板块主力合约多空持仓分布图&quot;</span>,</span><br><span class="line">        <span class="string">&quot;annotations&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;font&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;showarrow&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">&quot;text&quot;</span>: <span class="string">&quot;AU.SHF多头持仓&quot;</span>,</span><br><span class="line">                <span class="string">&quot;x&quot;</span>: <span class="number">0.45</span>,</span><br><span class="line">                <span class="string">&quot;y&quot;</span>: <span class="number">0.754</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;font&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;showarrow&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">&quot;text&quot;</span>: <span class="string">&quot;AU.SHF空头持仓&quot;</span>,</span><br><span class="line">                <span class="string">&quot;x&quot;</span>: <span class="number">0.794</span>,</span><br><span class="line">                <span class="string">&quot;y&quot;</span>: <span class="number">0.754</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;font&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;showarrow&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">&quot;text&quot;</span>: <span class="string">&quot;AG.SHF多头持仓&quot;</span>,</span><br><span class="line">                <span class="string">&quot;x&quot;</span>: <span class="number">0.255</span>,</span><br><span class="line">                <span class="string">&quot;y&quot;</span>: <span class="number">0.23</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;font&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;showarrow&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">&quot;text&quot;</span>: <span class="string">&quot;AG.SHF空头持仓&quot;</span>,</span><br><span class="line">                <span class="string">&quot;x&quot;</span>: <span class="number">0.6</span>,</span><br><span class="line">                <span class="string">&quot;y&quot;</span>: <span class="number">0.23</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">pyplt(fig)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>这章主要是讲的单独的画图函数，主要是散点图、柱状图、线形图、条形图、直方图、饼图、面积图、甘特图。<br>可见<code>plotly</code>功能之强大，能做的图的种类就很多，估计后面还会讲到其他画图的方法，例如一个函数，不同的图修改其参数。<br>说到参数，这里面的参数有非常多，我觉得这需要在实战中记忆，一开始不需要对每个参数都进行修改，大可不必强迫症去学习全部的参数。仅从这一遍学习中，还是能感觉到用这个作图逻辑，其各个部分的作用，简单的需求应该修改哪里，而且对于不同的作图函数，其实大部分参数也是相通的。<br>学习，学习方法，形成逻辑，应用逻辑，学习方法。</p>
<pre><code>trace-&gt;layout-&gt;annotations-&gt;axis
&amp;字典</code></pre>
<h1 id="plotly高级图形"><a href="#plotly高级图形" class="headerlink" title="plotly高级图形"></a>plotly高级图形</h1><h2 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h2><p>本人没用过<code>python</code>做时间序列，统计类用<code>eviews</code>应该是更专业，这个我们来看一下写法吧。</p>
<p><img src="https://s3.ax1x.com/2020/12/10/rFojaR.png" alt="时序"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">x_datetime = [datetime(year=<span class="number">2013</span>, month=<span class="number">10</span>, day=<span class="number">4</span>),</span><br><span class="line">              datetime(year=<span class="number">2013</span>, month=<span class="number">11</span>, day=<span class="number">5</span>),</span><br><span class="line">              datetime(year=<span class="number">2013</span>, month=<span class="number">12</span>, day=<span class="number">6</span>)]</span><br><span class="line">x_string = [<span class="string">&#x27;2013-10-04&#x27;</span>, <span class="string">&#x27;2013-11-05&#x27;</span>, <span class="string">&#x27;2013-12-06&#x27;</span>]</span><br><span class="line"></span><br><span class="line">trace_datetime = go.Scatter(x=x_datetime, y=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>],name=<span class="string">&#x27;trace_datetime&#x27;</span>)</span><br><span class="line">trace_string = go.Scatter(x=x_string, y=[<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>],name=<span class="string">&#x27;trace_string&#x27;</span>)</span><br><span class="line">data = [trace_datetime, trace_string]</span><br><span class="line">pyplt(data)</span><br></pre></td></tr></table></figure>

<h2 id="滑动选择控件"><a href="#滑动选择控件" class="headerlink" title="滑动选择控件"></a>滑动选择控件</h2><p>主要用在金融时序的绘图里，当需求是限定时间展示数据时，除了自己写个函数规范数据以外，还可以更为方便地实现，即修改<code>layout.xaxis.rangeselector</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">layout = <span class="built_in">dict</span>(</span><br><span class="line">    title=<span class="string">&#x27;时间序列的滑块与选择器&#x27;</span>,</span><br><span class="line">    xaxis=<span class="built_in">dict</span>(</span><br><span class="line">        rangeselector=<span class="built_in">dict</span>( <span class="comment"># 定义x轴的选择器</span></span><br><span class="line">            buttons=<span class="built_in">list</span>([ <span class="comment"># 选择器的按钮</span></span><br><span class="line">                <span class="built_in">dict</span>(count=<span class="number">1</span>, <span class="comment"># 覆盖范围 = count * step</span></span><br><span class="line">                     label=<span class="string">&#x27;1m&#x27;</span>, <span class="comment"># 选择器的标签</span></span><br><span class="line">                     step=<span class="string">&#x27;month&#x27;</span>,</span><br><span class="line">                     stepmode=<span class="string">&#x27;backward&#x27;</span>), <span class="comment"># 从后往前推进</span></span><br></pre></td></tr></table></figure>

<p>若设置<code>count=1,step=&#39;year&#39;,stepmode=&#39;todate&#39;</code>这里不是一直到今天，而是给定一个最后日期<code>20201208</code>则输出<code>20200101---20201208</code>，即最后日期的那年年初到最后日期。</p>
<p><img src="https://s3.ax1x.com/2020/12/10/rFozPx.png" alt="滑动块"></p>
<p>代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r&#x27;C:\Users\ASUS\Desktop\python\Chapter03\dat/day01.csv&#x27;</span>,index_col=[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">data = [go.Scatter(x=df.index,</span><br><span class="line">                   y=df.close)]</span><br><span class="line"></span><br><span class="line">layout = <span class="built_in">dict</span>(</span><br><span class="line">    title=<span class="string">&#x27;时间序列的滑块与选择器&#x27;</span>,</span><br><span class="line">    xaxis=<span class="built_in">dict</span>(</span><br><span class="line">        rangeselector=<span class="built_in">dict</span>(</span><br><span class="line">            buttons=<span class="built_in">list</span>([</span><br><span class="line">                <span class="built_in">dict</span>(count=<span class="number">1</span>,</span><br><span class="line">                     label=<span class="string">&#x27;1m&#x27;</span>,</span><br><span class="line">                     step=<span class="string">&#x27;month&#x27;</span>,</span><br><span class="line">                     stepmode=<span class="string">&#x27;backward&#x27;</span>),</span><br><span class="line">                <span class="built_in">dict</span>(count=<span class="number">6</span>,</span><br><span class="line">                     label=<span class="string">&#x27;6m&#x27;</span>,</span><br><span class="line">                     step=<span class="string">&#x27;month&#x27;</span>,</span><br><span class="line">                     stepmode=<span class="string">&#x27;backward&#x27;</span>),</span><br><span class="line">                <span class="built_in">dict</span>(count=<span class="number">1</span>,</span><br><span class="line">                    label=<span class="string">&#x27;YTD&#x27;</span>,<span class="comment">#今天以来</span></span><br><span class="line">                    step=<span class="string">&#x27;year&#x27;</span>,</span><br><span class="line">                    stepmode=<span class="string">&#x27;todate&#x27;</span>),</span><br><span class="line">                <span class="built_in">dict</span>(count=<span class="number">1</span>,</span><br><span class="line">                    label=<span class="string">&#x27;1y&#x27;</span>,</span><br><span class="line">                    step=<span class="string">&#x27;year&#x27;</span>,</span><br><span class="line">                    stepmode=<span class="string">&#x27;backward&#x27;</span>),</span><br><span class="line">                <span class="built_in">dict</span>(step=<span class="string">&#x27;all&#x27;</span>)</span><br><span class="line">            ])</span><br><span class="line">        ),</span><br><span class="line">        rangeslider=<span class="built_in">dict</span>(),</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;date&#x27;</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">fig = <span class="built_in">dict</span>(data=data, layout=layout)</span><br><span class="line">pyplt(fig)</span><br></pre></td></tr></table></figure>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p><img src="https://s3.ax1x.com/2020/12/10/rFoXZ9.png" alt="表格"></p>
<p>本来我是觉得表格可以不用<code>plotly</code>，但是我看了后面内容发现，有的时候表图会一起展示，即有些情况下还是必要的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import plotly as py</span><br><span class="line">import plotly.figure_factory as FF</span><br><span class="line"></span><br><span class="line">pyplt &#x3D; py.offline.iplot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data_matrix &#x3D; [[&#39;国家&#39;, &#39;年份&#39;, &#39;人口&#39;],</span><br><span class="line">               [&#39;中国&#39;,2000, 1267430000],</span><br><span class="line">               [&#39;美国&#39;, 2000, 282200000],</span><br><span class="line">               [&#39;加拿大&#39;, 2000, 27790000],</span><br><span class="line">               [&#39;中国&#39;, 2005, 1307560000],</span><br><span class="line">               [&#39;美国&#39;, 2005, 295500000],</span><br><span class="line">               [&#39;加拿大&#39;, 2005, 32310000],</span><br><span class="line">               [&#39;中国&#39;, 2010, 1340910000],</span><br><span class="line">               [&#39;美国&#39;, 2010, 309000000],</span><br><span class="line">               [&#39;加拿大&#39;, 2010, 34000000]]</span><br><span class="line"></span><br><span class="line">colorscale &#x3D; [[0, &#39;#4d004c&#39;], [.3, &#39;#f2e5ff&#39;], [1, &#39;#ffffff&#39;]]</span><br><span class="line">fontcolor &#x3D; [&#39;#FF0000&#39;, &#39;#00EE00&#39;, &#39;#FF3030&#39;]</span><br><span class="line"></span><br><span class="line">table &#x3D; FF.create_table(data_matrix) # data_matrix可直接换为用pandas读取的dataframe</span><br><span class="line">table.layout.width &#x3D; 700</span><br><span class="line">pyplt(table)</span><br></pre></td></tr></table></figure>
<p>这里的<code>colorscale和fontcolor</code>都有三个参数，不是三列或者什么的，而是表头(第一行和有索引的第一列)、奇数列、偶数列。</p>
<h2 id="表格与图"><a href="#表格与图" class="headerlink" title="表格与图"></a>表格与图</h2><p>艾西，不亏是18年版的书，这部分的两个代码都报错，搜了百度无果后，还是<a href="https://plotly.com/python/figure-factory-subplots/">官网</a>解决了问题。<br>我发现哈，本书的例子中的变量名字和一些参数的设置和官网案例是如出一辙，就给换了下数据。<br>这是代码和作图结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> plotly.figure_factory <span class="keyword">as</span> ff</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加表格数据</span></span><br><span class="line">table_data = [[<span class="string">&#x27;团队&#x27;</span>, <span class="string">&#x27;赢&#x27;</span>, <span class="string">&#x27;输&#x27;</span>, <span class="string">&#x27;平&#x27;</span>],</span><br><span class="line">              [<span class="string">&#x27;清华大学&#x27;</span>, <span class="number">18</span>, <span class="number">4</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="string">&#x27;北京大学&#x27;</span>, <span class="number">18</span>, <span class="number">5</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="string">&#x27;中国&lt;br&gt;人民大学&#x27;</span>, <span class="number">16</span>, <span class="number">5</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="string">&#x27;复旦大学&#x27;</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="string">&#x27;上海&lt;br&gt;交通大学&#x27;</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="string">&#x27;同济大学&#x27;</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">0</span>]]</span><br><span class="line"><span class="comment"># 通过 ff.create_table(table_data)来初始化一个figure</span></span><br><span class="line">fig = ff.create_table(table_data, height_constant=<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加绘图数据</span></span><br><span class="line">teams = [<span class="string">&#x27;清华大学&#x27;</span>, <span class="string">&#x27;北京大学&#x27;</span>, <span class="string">&#x27;中国&lt;br&gt;人民大学&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;复旦大学&#x27;</span>, <span class="string">&#x27;上海&lt;br&gt;交通大学&#x27;</span>, <span class="string">&#x27;同济大学&#x27;</span>]</span><br><span class="line">scoreA = [<span class="number">3.54</span>, <span class="number">3.48</span>, <span class="number">3.0</span>, <span class="number">3.27</span>, <span class="number">2.83</span>, <span class="number">2.45</span>]</span><br><span class="line">scoreB = [<span class="number">2.17</span>, <span class="number">2.57</span>, <span class="number">2.0</span>, <span class="number">2.91</span>, <span class="number">2.57</span>, <span class="number">2.14</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对绘图添加 traces</span></span><br><span class="line">fig.add_trace(go.Bar(x=teams, y=scoreA, xaxis=<span class="string">&#x27;x2&#x27;</span>, yaxis=<span class="string">&#x27;y2&#x27;</span>,</span><br><span class="line">                marker=<span class="built_in">dict</span>(color=<span class="string">&#x27;#0099ff&#x27;</span>),</span><br><span class="line">                name=<span class="string">&#x27;分值A&#x27;</span>))</span><br><span class="line">fig.add_trace(go.Bar(x=teams, y=scoreB, xaxis=<span class="string">&#x27;x2&#x27;</span>, yaxis=<span class="string">&#x27;y2&#x27;</span>,</span><br><span class="line">                marker=<span class="built_in">dict</span>(color=<span class="string">&#x27;#404040&#x27;</span>),</span><br><span class="line">                name=<span class="string">&#x27;分值B&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 figure 的 layout</span></span><br><span class="line"><span class="comment"># 图的 yaxis 要与图的 xaxis 对应</span></span><br><span class="line"><span class="comment"># 设置figure的边界</span></span><br><span class="line"></span><br><span class="line">fig.update_layout(</span><br><span class="line">    title_text = <span class="string">&#x27;部分高校游戏比赛&#x27;</span>,</span><br><span class="line">    height = <span class="number">800</span>,</span><br><span class="line">    margin = &#123;<span class="string">&#x27;t&#x27;</span>:<span class="number">75</span>, <span class="string">&#x27;l&#x27;</span>:<span class="number">50</span>&#125;, <span class="comment"># top left 距离..多少个单位</span></span><br><span class="line">    yaxis = &#123;<span class="string">&#x27;domain&#x27;</span>: [<span class="number">0</span>, <span class="number">.45</span>]&#125;,</span><br><span class="line">    xaxis2 = &#123;<span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;y2&#x27;</span>&#125;,</span><br><span class="line">    yaxis2 = &#123;<span class="string">&#x27;domain&#x27;</span>: [<span class="number">.6</span>, <span class="number">1</span>], <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;x2&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;分值&#x27;</span>&#125; <span class="comment">#让yaxis坐标轴与xaxis对应</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/10/rFoLqJ.png" alt="表图合一"></p>
<p>上面这是放在一列了，如果想把表和图放在一行哈，就需要修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig.update_layout(</span><br><span class="line">    margin = &#123;<span class="string">&#x27;t&#x27;</span>:<span class="number">50</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">100</span>&#125;,</span><br><span class="line">    xaxis = &#123;<span class="string">&#x27;domain&#x27;</span>: [<span class="number">0</span>, <span class="number">.45</span>]&#125;, <span class="comment"># 看这里，行</span></span><br><span class="line">    xaxis2 = &#123;<span class="string">&#x27;domain&#x27;</span>: [<span class="number">0.6</span>, <span class="number">1.</span>]&#125;, <span class="comment"># 看这里，行</span></span><br><span class="line">    yaxis2 = &#123;<span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;x2&#x27;</span>,<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;分值&#x27;</span>&#125;, </span><br><span class="line">    title_text = <span class="string">&#x27;高校游戏比赛&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="多图表"><a href="#多图表" class="headerlink" title="多图表"></a>多图表</h2><p>比如一个图里，既有柱状图也有折线图。</p>
<p><img src="https://s3.ax1x.com/2020/12/10/rFoqr4.png" alt="多图表"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">list</span>(<span class="string">&#x27;ABCDEF&#x27;</span>)</span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x=x,</span><br><span class="line">    y=[<span class="number">1.5</span>, <span class="number">1</span>, <span class="number">1.3</span>, <span class="number">0.7</span>, <span class="number">0.8</span>, <span class="number">0.9</span>],</span><br><span class="line">    name=<span class="string">&#x27;line&#x27;</span></span><br><span class="line">)</span><br><span class="line">trace2 = go.Bar(</span><br><span class="line">    x=x,</span><br><span class="line">    y=[<span class="number">1</span>, <span class="number">0.5</span>, <span class="number">0.7</span>, <span class="number">-1.2</span>, <span class="number">0.3</span>, <span class="number">0.4</span>],</span><br><span class="line">    name = <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data = [trace1, trace2]</span><br><span class="line"></span><br><span class="line">layout = <span class="built_in">dict</span>(title = <span class="string">&#x27;Bar-Line Demo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fig = <span class="built_in">dict</span>(data=data,layout=layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pyplt(data, show_link=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h3 id="双坐标轴"><a href="#双坐标轴" class="headerlink" title="双坐标轴"></a>双坐标轴</h3><p>就像<code>excel</code>那个功能一样。</p>
<p>注意看<code>layout</code>的<code>yaxis</code>和<code>yaxis2</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    y=[<span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>],</span><br><span class="line">    name=<span class="string">&#x27;yaxis 数据&#x27;</span></span><br><span class="line">)</span><br><span class="line">trace2 = go.Scatter(</span><br><span class="line">    x=[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    y=[<span class="number">47</span>, <span class="number">52</span>, <span class="number">16</span>],</span><br><span class="line">    name=<span class="string">&#x27;yaxis2 数据&#x27;</span>,</span><br><span class="line">    yaxis=<span class="string">&#x27;y2&#x27;</span></span><br><span class="line">)</span><br><span class="line">data = [trace1, trace2]</span><br><span class="line">layout = go.Layout(</span><br><span class="line">    title=<span class="string">&#x27;Y轴双轴示例&#x27;</span>,</span><br><span class="line">    yaxis=<span class="built_in">dict</span>(</span><br><span class="line">        title=<span class="string">&#x27;yaxis 标题&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    yaxis2=<span class="built_in">dict</span>(</span><br><span class="line">        title=<span class="string">&#x27;yaxis2 标题&#x27;</span>,</span><br><span class="line">        titlefont=<span class="built_in">dict</span>(</span><br><span class="line">            color=<span class="string">&#x27;rgb(148, 103, 189)&#x27;</span> <span class="comment"># 标题颜色</span></span><br><span class="line">        ),</span><br><span class="line">        tickfont=<span class="built_in">dict</span>(</span><br><span class="line">            color=<span class="string">&#x27;rgb(148, 103, 189)&#x27;</span> <span class="comment"># 刻度颜色</span></span><br><span class="line">        ),</span><br><span class="line">        overlaying=<span class="string">&#x27;y&#x27;</span>, <span class="comment"># 覆盖y轴</span></span><br><span class="line">        side=<span class="string">&#x27;right&#x27;</span> <span class="comment"># 坐标轴的位置</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">fig = go.Figure(data=data, layout=layout)</span><br><span class="line">plot_url = pyplt(fig)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/10/rFo7xU.png" alt="双坐标轴"></p>
<h3 id="多坐标轴"><a href="#多坐标轴" class="headerlink" title="多坐标轴"></a>多坐标轴</h3><p>多坐标轴类似这个，不多赘述。</p>
<h3 id="共享坐标轴"><a href="#共享坐标轴" class="headerlink" title="共享坐标轴"></a>共享坐标轴</h3><p>看图：</p>
<p><img src="https://s3.ax1x.com/2020/12/10/rFoT2T.png" alt="共享坐标轴"></p>
<p>应该不难理解的：上例的情况就是x的范围变动不大， 但是y轴的波动范围特别大，所以就这样展示了，实际应用中肯定有许多交集情况出现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    y=[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line">)</span><br><span class="line">trace2 = go.Scatter(</span><br><span class="line">    x=[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    y=[<span class="number">100</span>, <span class="number">110</span>, <span class="number">120</span>],</span><br><span class="line">    yaxis=<span class="string">&#x27;y2&#x27;</span></span><br><span class="line">)</span><br><span class="line">trace3 = go.Scatter(</span><br><span class="line">    x=[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    y=[<span class="number">1000</span>, <span class="number">1100</span>, <span class="number">1200</span>],</span><br><span class="line">    yaxis=<span class="string">&#x27;y3&#x27;</span></span><br><span class="line">)</span><br><span class="line">data = [trace1, trace2, trace3]</span><br><span class="line">layout = go.Layout(</span><br><span class="line">    yaxis=<span class="built_in">dict</span>(</span><br><span class="line">        domain=[<span class="number">0</span>, <span class="number">0.33</span>] <span class="comment"># 1范围</span></span><br><span class="line">    ),</span><br><span class="line">    legend=<span class="built_in">dict</span>(</span><br><span class="line">        traceorder=<span class="string">&#x27;reversed&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    yaxis2=<span class="built_in">dict</span>(</span><br><span class="line">        domain=[<span class="number">0.33</span>, <span class="number">0.66</span>] <span class="comment"># 2范围</span></span><br><span class="line">    ),</span><br><span class="line">    yaxis3=<span class="built_in">dict</span>(</span><br><span class="line">        domain=[<span class="number">0.66</span>, <span class="number">1</span>] <span class="comment"># 3范围</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">fig = go.Figure(data=data, layout=layout)</span><br><span class="line">pyplt(fig)</span><br></pre></td></tr></table></figure>
<h2 id="多子图"><a href="#多子图" class="headerlink" title="多子图"></a>多子图</h2><p>看到这里，虽然多子图单独拿出来做了一节，但是之前已经给了两种方法做这个多子图了。</p>
<p>这里也展示两种方法，然后是一个高阶的布局方法。</p>
<p>最后还会有R的多子图展示(跟plotly无关，只是觉得也很好看)</p>
<h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><p>用<code>make_subplots</code></p>
<p><img src="https://s3.ax1x.com/2020/12/10/rFoIP0.png" alt="method1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> plotly <span class="keyword">import</span> tools</span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">trace1 = go.Scatter(x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">                    y=[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">                    mode=<span class="string">&#x27;markers+text+lines&#x27;</span>,</span><br><span class="line">                    text=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>],</span><br><span class="line">                    textposition=<span class="string">&#x27;bottom center&#x27;</span></span><br><span class="line">                    )</span><br><span class="line">trace2 = go.Scatter(x=[<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>],y=[<span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>])</span><br><span class="line">trace3 = go.Scatter(x=[<span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>],</span><br><span class="line">                    y=[<span class="number">600</span>, <span class="number">700</span>, <span class="number">800</span>],</span><br><span class="line">                    mode=<span class="string">&#x27;markers+text+lines&#x27;</span>,</span><br><span class="line">                    text=[<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>],</span><br><span class="line">                    textposition=<span class="string">&#x27;bottom center&#x27;</span></span><br><span class="line">                    )</span><br><span class="line">trace4 = go.Scatter(x=[<span class="number">4000</span>, <span class="number">5000</span>, <span class="number">6000</span>], y=[<span class="number">7000</span>, <span class="number">8000</span>, <span class="number">9000</span>])</span><br><span class="line"></span><br><span class="line">fig = tools.make_subplots(rows=<span class="number">2</span>, cols=<span class="number">2</span>, subplot_titles=(<span class="string">&#x27;Plot 1&#x27;</span>, <span class="string">&#x27;Plot 2&#x27;</span>,</span><br><span class="line">                                                          <span class="string">&#x27;Plot 3&#x27;</span>, <span class="string">&#x27;Plot 4&#x27;</span>))</span><br><span class="line"></span><br><span class="line">fig.append_trace(trace1, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace2, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fig.append_trace(trace3, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace4, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>].update(height=<span class="number">600</span>, width=<span class="number">1000</span>, title=<span class="string">&#x27;Multiple Subplots2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pyplt(fig)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p>本来先贴了代码，做到后面突然发现对<code>anchor</code>的理解不是很深刻，所以又回来找了个案例特地来说明，所以把代码放文字后面了。</p>
<p><img src="https://s3.ax1x.com/2020/12/10/rFhtTx.png" alt="正确版"></p>
<p>这里我觉得应该重点理解一下<code>anchor</code>，我一开始对这个参数指代什么非常不明白。但是当我把几个<code>anchor</code>都注释掉后，就能看懂一些了。<br><strong>这个参数的本意是需要绑定的坐标轴。</strong><br>都注释掉后，图是这样的：</p>
<p><img src="https://s3.ax1x.com/2020/12/10/rFWqrn.png" alt="step1"></p>
<p>这个图说明，默认绘制的坐标轴是<code>x1 y1 x2 y3</code>，那么我们修改一下代码，让每个图都绑定一个坐标轴是不是就好了？这是代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xaxis=<span class="built_in">dict</span>(</span><br><span class="line">    domain=[<span class="number">0</span>, <span class="number">0.45</span>],</span><br><span class="line">    anchor = <span class="string">&#x27;y1&#x27;</span></span><br><span class="line">),</span><br><span class="line">xaxis2=<span class="built_in">dict</span>(</span><br><span class="line">    domain=[<span class="number">0.55</span>, <span class="number">1</span>],</span><br><span class="line">    anchor = <span class="string">&#x27;y2&#x27;</span></span><br><span class="line">),</span><br><span class="line">xaxis3=<span class="built_in">dict</span>(</span><br><span class="line">    domain=[<span class="number">0</span>, <span class="number">0.45</span>],</span><br><span class="line">    anchor=<span class="string">&#x27;y3&#x27;</span></span><br><span class="line">),</span><br><span class="line">xaxis4=<span class="built_in">dict</span>(</span><br><span class="line">    domain=[<span class="number">0.55</span>, <span class="number">1</span>],</span><br><span class="line">    anchor=<span class="string">&#x27;y4&#x27;</span></span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p>这是效果：</p>
<p><img src="https://s3.ax1x.com/2020/12/10/rFWLbq.png" alt="step2"></p>
<p>奇怪的是坐标轴的显示还是不正确。<br>那我们这样想，把图上的坐标轴分成两类，一种是默认给固定好的，一种是默认没有的。所以我们是不是应该对没有正确显示的坐标轴进行绑定，而绑定的就应该对应固定好的那个轴。<br>需要绑定的是<code>y2 x3 x4 y4</code>，那么对应地应该绑定谁呢？<code>x2 y3 y4 x4</code>。<br>代码确实是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    y=[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">)</span><br><span class="line">trace2 = go.Scatter(</span><br><span class="line">    x=[<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>],</span><br><span class="line">    y=[<span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>],</span><br><span class="line">    xaxis=<span class="string">&#x27;x2&#x27;</span>,</span><br><span class="line">    yaxis=<span class="string">&#x27;y2&#x27;</span></span><br><span class="line">)</span><br><span class="line">trace3 = go.Scatter(</span><br><span class="line">    x=[<span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>],</span><br><span class="line">    y=[<span class="number">600</span>, <span class="number">700</span>, <span class="number">800</span>],</span><br><span class="line">    xaxis=<span class="string">&#x27;x3&#x27;</span>,</span><br><span class="line">    yaxis=<span class="string">&#x27;y3&#x27;</span></span><br><span class="line">)</span><br><span class="line">trace4 = go.Scatter(</span><br><span class="line">    x=[<span class="number">4000</span>, <span class="number">5000</span>, <span class="number">6000</span>],</span><br><span class="line">    y=[<span class="number">7000</span>, <span class="number">8000</span>, <span class="number">9000</span>],</span><br><span class="line">    xaxis=<span class="string">&#x27;x4&#x27;</span>,</span><br><span class="line">    yaxis=<span class="string">&#x27;y4&#x27;</span></span><br><span class="line">)</span><br><span class="line">data = [trace1, trace2, trace3, trace4]</span><br><span class="line">layout = go.Layout(</span><br><span class="line">    xaxis=<span class="built_in">dict</span>(</span><br><span class="line">        domain=[<span class="number">0</span>, <span class="number">0.45</span>]</span><br><span class="line">    ),</span><br><span class="line">    xaxis2=<span class="built_in">dict</span>(</span><br><span class="line">        domain=[<span class="number">0.55</span>, <span class="number">1</span>]</span><br><span class="line">    ),</span><br><span class="line">    xaxis3=<span class="built_in">dict</span>(</span><br><span class="line">        domain=[<span class="number">0</span>, <span class="number">0.45</span>],</span><br><span class="line">        anchor=<span class="string">&#x27;y3&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    xaxis4=<span class="built_in">dict</span>(</span><br><span class="line">        domain=[<span class="number">0.55</span>, <span class="number">1</span>],</span><br><span class="line">        anchor=<span class="string">&#x27;y4&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    yaxis=<span class="built_in">dict</span>(</span><br><span class="line">        domain=[<span class="number">0</span>, <span class="number">0.45</span>]</span><br><span class="line">    ),</span><br><span class="line">    yaxis2=<span class="built_in">dict</span>(</span><br><span class="line">        domain=[<span class="number">0</span>, <span class="number">0.45</span>],</span><br><span class="line">        anchor=<span class="string">&#x27;x2&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    yaxis3=<span class="built_in">dict</span>(</span><br><span class="line">        domain=[<span class="number">0.55</span>, <span class="number">1</span>]</span><br><span class="line">    ),</span><br><span class="line">    yaxis4=<span class="built_in">dict</span>(</span><br><span class="line">        domain=[<span class="number">0.55</span>, <span class="number">1</span>],</span><br><span class="line">        anchor=<span class="string">&#x27;x4&#x27;</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">fig = go.Figure(data=data, layout=layout)</span><br><span class="line">pyplt(fig)</span><br></pre></td></tr></table></figure>
<h3 id="高阶布局"><a href="#高阶布局" class="headerlink" title="高阶布局"></a>高阶布局</h3><p>先看下下面这个代码，布局还是用的法一，但是需要加个<code>specs</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fig &#x3D; tools.make_subplots(rows&#x3D;2, cols&#x3D;2, specs&#x3D;[[&#123;&#125;, &#123;&#125;], </span><br><span class="line">                                                 [&#123;&#39;colspan&#39;: 2&#125;, None]],</span><br><span class="line">                          subplot_titles&#x3D;(&#39;First Subplot&#39;,&#39;Second Subplot&#39;, &#39;Third Subplot&#39;))</span><br></pre></td></tr></table></figure>

<p>这个<code>specs</code>是个<code>[]</code>，里面还有俩<code>[]</code>，里面这个<code>[]</code>有几行就有几个；里面的<code>&#123;&#125;</code>，有几列就有几个。</p>
<p>然后下面是一个更为复杂的应用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> plotly <span class="keyword">import</span> tools</span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">trace1 = go.Scatter(x=[<span class="number">1</span>, <span class="number">2</span>], y=[<span class="number">1</span>, <span class="number">2</span>], name=<span class="string">&#x27;(1,1)&#x27;</span>)</span><br><span class="line">trace2 = go.Scatter(x=[<span class="number">1</span>, <span class="number">2</span>], y=[<span class="number">1</span>, <span class="number">2</span>], name=<span class="string">&#x27;(1,2)&#x27;</span>)</span><br><span class="line">trace3 = go.Scatter(x=[<span class="number">1</span>, <span class="number">2</span>], y=[<span class="number">1</span>, <span class="number">2</span>], name=<span class="string">&#x27;(2,1)&#x27;</span>)</span><br><span class="line">trace4 = go.Scatter(x=[<span class="number">1</span>, <span class="number">2</span>], y=[<span class="number">1</span>, <span class="number">2</span>], name=<span class="string">&#x27;(3,1)&#x27;</span>)</span><br><span class="line">trace5 = go.Scatter(x=[<span class="number">1</span>, <span class="number">2</span>], y=[<span class="number">1</span>, <span class="number">2</span>], name=<span class="string">&#x27;(5,1)&#x27;</span>)</span><br><span class="line">trace6 = go.Scatter(x=[<span class="number">1</span>, <span class="number">2</span>], y=[<span class="number">1</span>, <span class="number">2</span>], name=<span class="string">&#x27;(5,2)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fig = tools.make_subplots(rows=<span class="number">5</span>, cols=<span class="number">2</span>,</span><br><span class="line">                          specs=[[&#123;&#125;, &#123;<span class="string">&#x27;rowspan&#x27;</span>: <span class="number">2</span>&#125;],</span><br><span class="line">                                 [&#123;&#125;, <span class="literal">None</span>],</span><br><span class="line">                                 [&#123;<span class="string">&#x27;rowspan&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;colspan&#x27;</span>: <span class="number">2</span>&#125;, <span class="literal">None</span>],</span><br><span class="line">                                 [<span class="literal">None</span>, <span class="literal">None</span>],</span><br><span class="line">                                 [&#123;&#125;, &#123;&#125;]],</span><br><span class="line">                          print_grid=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fig.append_trace(trace1, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace2, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fig.append_trace(trace3, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace4, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace5, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace6, <span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>].update(height=<span class="number">600</span>, width=<span class="number">1000</span>, title=<span class="string">&#x27;specs examples&#x27;</span>)</span><br><span class="line">pyplt(fig)</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/10/rFooGV.png" alt="高阶布局"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">specs=[[&#123;&#125;, &#123;<span class="string">&#x27;rowspan&#x27;</span>: <span class="number">2</span>&#125;],</span><br><span class="line">      [&#123;&#125;, <span class="literal">None</span>],</span><br><span class="line">      [&#123;<span class="string">&#x27;rowspan&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;colspan&#x27;</span>: <span class="number">2</span>&#125;, <span class="literal">None</span>],</span><br><span class="line">      [<span class="literal">None</span>, <span class="literal">None</span>],</span><br><span class="line">      [&#123;&#125;, &#123;&#125;]],</span><br></pre></td></tr></table></figure>

<p>对应上图看这个<code>specs</code>，<code>None</code>就是不作图了。</p>
<h2 id="子图共享坐标轴"><a href="#子图共享坐标轴" class="headerlink" title="子图共享坐标轴"></a>子图共享坐标轴</h2><p>感觉这一节很难去说，这应该是一个熟悉的技巧，所以仅展示一个例子，大概看一下。</p>
<p><strong>这是两个坐标轴都共享的情况。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> plotly <span class="keyword">import</span> tools</span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    y=[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line">)</span><br><span class="line">trace2 = go.Scatter(</span><br><span class="line">    x=[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    y=[<span class="number">100</span>, <span class="number">110</span>, <span class="number">120</span>],</span><br><span class="line">)</span><br><span class="line">trace3 = go.Scatter(</span><br><span class="line">    x=[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    y=[<span class="number">1000</span>, <span class="number">1100</span>, <span class="number">1200</span>],</span><br><span class="line">)</span><br><span class="line">fig = tools.make_subplots(rows=<span class="number">3</span>, cols=<span class="number">1</span>, specs=[[&#123;&#125;], [&#123;&#125;], [&#123;&#125;]], <span class="comment"># 感觉这个specs是不是可以不加啊</span></span><br><span class="line">                          shared_xaxes=<span class="literal">True</span>, shared_yaxes=<span class="literal">True</span>,</span><br><span class="line">                          vertical_spacing=<span class="number">0.001</span>)</span><br><span class="line">fig.append_trace(trace1, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace2, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace3, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>].update(height=<span class="number">600</span>, width=<span class="number">600</span>, title=<span class="string">&#x27;Stacked Subplots with Shared X-Axes&#x27;</span>)</span><br><span class="line">pyplt(fig)</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/10/rFogKg.png" alt="子图共享坐标轴"></p>
<h2 id="子图坐标轴自定义"><a href="#子图坐标轴自定义" class="headerlink" title="子图坐标轴自定义"></a>子图坐标轴自定义</h2><p><img src="https://s3.ax1x.com/2020/12/10/rFohan.png" alt="子图坐标轴自定义"></p>
<p>这些个例子非常容易看懂。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> plotly <span class="keyword">import</span> tools</span><br><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">trace1 = go.Scatter(x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], y=[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">trace2 = go.Scatter(x=[<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>], y=[<span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>])</span><br><span class="line">trace3 = go.Scatter(x=[<span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>], y=[<span class="number">600</span>, <span class="number">700</span>, <span class="number">800</span>])</span><br><span class="line">trace4 = go.Scatter(x=[<span class="number">4000</span>, <span class="number">5000</span>, <span class="number">6000</span>], y=[<span class="number">7000</span>, <span class="number">8000</span>, <span class="number">9000</span>])</span><br><span class="line"></span><br><span class="line">fig = tools.make_subplots(rows=<span class="number">2</span>, cols=<span class="number">2</span>, subplot_titles=(<span class="string">&#x27;Plot 1&#x27;</span>, <span class="string">&#x27;Plot 2&#x27;</span>,</span><br><span class="line">                                                          <span class="string">&#x27;Plot 3&#x27;</span>, <span class="string">&#x27;Plot 4&#x27;</span>))</span><br><span class="line">fig.append_trace(trace1, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace2, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fig.append_trace(trace3, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">fig.append_trace(trace4, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>][<span class="string">&#x27;xaxis1&#x27;</span>].update(title=<span class="string">&#x27;xaxis 1 title&#x27;</span>)</span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>][<span class="string">&#x27;xaxis2&#x27;</span>].update(title=<span class="string">&#x27;xaxis 2 title&#x27;</span>, <span class="built_in">range</span>=[<span class="number">10</span>, <span class="number">50</span>])  <span class="comment"># 横坐标的范围</span></span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>][<span class="string">&#x27;xaxis3&#x27;</span>].update(title=<span class="string">&#x27;xaxis 3 title&#x27;</span>, showgrid=<span class="literal">False</span>) <span class="comment"># 关掉网格线</span></span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>][<span class="string">&#x27;xaxis4&#x27;</span>].update(title=<span class="string">&#x27;xaxis 4 title&#x27;</span>, <span class="built_in">type</span>=<span class="string">&#x27;log&#x27;</span>) <span class="comment"># 不知道</span></span><br><span class="line"></span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>][<span class="string">&#x27;yaxis1&#x27;</span>].update(title=<span class="string">&#x27;yaxis 1 title&#x27;</span>)</span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>][<span class="string">&#x27;yaxis2&#x27;</span>].update(title=<span class="string">&#x27;yaxis 2 title&#x27;</span>, <span class="built_in">range</span>=[<span class="number">40</span>, <span class="number">80</span>])</span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>][<span class="string">&#x27;yaxis3&#x27;</span>].update(title=<span class="string">&#x27;yaxis 3 title&#x27;</span>, showgrid=<span class="literal">False</span>)</span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>][<span class="string">&#x27;yaxis4&#x27;</span>].update(title=<span class="string">&#x27;yaxis 4 title&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fig[<span class="string">&#x27;layout&#x27;</span>].update(title=<span class="string">&#x27;Customizing Subplot Axes&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pyplt(fig)</span><br></pre></td></tr></table></figure>

<h2 id="嵌入式子图"><a href="#嵌入式子图" class="headerlink" title="嵌入式子图"></a>嵌入式子图</h2><p>方法就是用<code>domain</code>控制范围，所以说学以致用非常重要。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">trace1 = go.Scatter(</span><br><span class="line">    x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    y=[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">)</span><br><span class="line">trace2 = go.Scatter(</span><br><span class="line">    x=[<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>],</span><br><span class="line">    y=[<span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>],</span><br><span class="line">    xaxis=<span class="string">&#x27;x2&#x27;</span>,</span><br><span class="line">    yaxis=<span class="string">&#x27;y2&#x27;</span></span><br><span class="line">)</span><br><span class="line">data = [trace1, trace2]</span><br><span class="line">layout = go.Layout(</span><br><span class="line">    xaxis2=<span class="built_in">dict</span>(</span><br><span class="line">        domain=[<span class="number">0.6</span>, <span class="number">0.95</span>],</span><br><span class="line">        anchor=<span class="string">&#x27;y2&#x27;</span>,</span><br><span class="line">        showgrid=<span class="literal">False</span></span><br><span class="line">    ),</span><br><span class="line">    yaxis2=<span class="built_in">dict</span>(</span><br><span class="line">        domain=[<span class="number">0.6</span>, <span class="number">0.95</span>],</span><br><span class="line">        anchor=<span class="string">&#x27;x2&#x27;</span>,</span><br><span class="line">        showgrid=<span class="literal">False</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">fig = go.Figure(data=data, layout=layout)</span><br><span class="line">pyplt(fig)</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/10/rFoRbj.png" alt="嵌入式子图"></p>
<p>看过之后让人恍然大悟。</p>
<h2 id="时间序列高亮显示"><a href="#时间序列高亮显示" class="headerlink" title="时间序列高亮显示"></a>时间序列高亮显示</h2><p>这一部分实际上是SVG图形的绘制，我个人感觉用不到，就暂时忽略了。</p>
<p><img src="https://s3.ax1x.com/2020/12/10/rFo2rQ.png" alt="时间序列高亮显示"></p>
<p>这个高亮也不是很亮啊…也没说怎么调，有没有别的模式。<br>用到的话还是官网吧，从这个图中只能看出来是阴影的那块区域。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">pyplt = py.offline.iplot</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r&#x27;C:\Users\ASUS\Desktop\python\Chapter03\dat\day01.csv&#x27;</span>, index_col=[<span class="string">&#x27;date&#x27;</span>], parse_dates=[<span class="string">&#x27;date&#x27;</span>]) <span class="comment"># 读取数据。</span></span><br><span class="line">df.sort_index(inplace=<span class="literal">True</span>) <span class="comment"># 设置索引列从大到小排序</span></span><br><span class="line">df = df.iloc[<span class="number">-300</span>:<span class="number">-100</span>] <span class="comment"># 选取其中的200行数据</span></span><br><span class="line"></span><br><span class="line">trace0 = go.Scatter(x=df.index, y=df[<span class="string">&#x27;close&#x27;</span>], mode=<span class="string">&#x27;lines&#x27;</span>, name=<span class="string">&#x27;temperature&#x27;</span>) <span class="comment"># 源代码是mode = &#x27;line&#x27; 改一下</span></span><br><span class="line"></span><br><span class="line">data = [trace0]</span><br><span class="line">layout = &#123;</span><br><span class="line">    <span class="comment"># 我们通过创建矩形的方式来高亮某一个时间区间</span></span><br><span class="line">    <span class="string">&#x27;shapes&#x27;</span>: [</span><br><span class="line">        <span class="comment"># 首先，我们高亮显示1月4日---&gt;3月6日.</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;rect&#x27;</span>,</span><br><span class="line">            <span class="comment"># x参考系使用绝对坐标系（相对于轴）</span></span><br><span class="line">            <span class="string">&#x27;xref&#x27;</span>: <span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">            <span class="comment"># y参考系使用相对坐标系（相对于plot）</span></span><br><span class="line">            <span class="string">&#x27;yref&#x27;</span>: <span class="string">&#x27;paper&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;x0&#x27;</span>: <span class="string">&#x27;2015-01-04&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;y0&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&#x27;x1&#x27;</span>: <span class="string">&#x27;2015-03-06&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;y1&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;fillcolor&#x27;</span>: <span class="string">&#x27;#d3d3d3&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;opacity&#x27;</span>: <span class="number">0.2</span>,</span><br><span class="line">            <span class="string">&#x27;line&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;width&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 其次，我们高亮显示区间4月20日---&gt;6月22日.</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;rect&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;xref&#x27;</span>: <span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;yref&#x27;</span>: <span class="string">&#x27;paper&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;x0&#x27;</span>: <span class="string">&#x27;2015-04-20&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;y0&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&#x27;x1&#x27;</span>: <span class="string">&#x27;2015-06-22&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;y1&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;fillcolor&#x27;</span>: <span class="string">&#x27;#d3d3d3&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;opacity&#x27;</span>: <span class="number">0.2</span>,</span><br><span class="line">            <span class="string">&#x27;line&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;width&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fig = &#123;<span class="string">&#x27;data&#x27;</span>: data, <span class="string">&#x27;layout&#x27;</span>: layout&#125;</span><br><span class="line">pyplt(fig)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>layout</code>里都是字典。<br>书上的高级绘图就完事了。</p>
<h2 id="ggplot2绘图示例"><a href="#ggplot2绘图示例" class="headerlink" title="ggplot2绘图示例"></a>ggplot2绘图示例</h2><p>源代码在我的<code>github</code>上，这里是图：</p>
<p><img src="https://s3.ax1x.com/2020/12/10/rFHlUs.png"></p>
<p><img src="https://s3.ax1x.com/2020/12/10/rFH15n.png"></p>
<p>R语言的<code>plot_ly</code>函数，修改参数<code>type</code>即可实现各种图</p>
<h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>主要是在讲子图的画法，有两种，一种是<code>make_subplots</code>，除了定义<code>rows cols</code>，还可以设置<code>specs</code>，即复杂的子图位置，需要看例子明白，分清行列关系；再一种是用<code>domain</code>给出图的明确的范围，注意理解<code>anchor</code>的含义。<br>个人感觉应该多尝试去做图表一起的那个和子图的应用，确实也是对时序数据用的少。<br>对于<code>layout</code>、<code>annotation</code>更应该心中有谱，除了作图流程以外，所用到的函数，其大概的参数和参数格式是什么应该在实战中重点关注。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to MySQL -- basic notes</title>
    <url>/2020/06/08/Introduction-to-MySQL-basic-notes/</url>
    <content><![CDATA[<p>This is a basic note on how to learn MySQL</p>
<a id="more"></a>

<h1 id="初识数据库"><a href="#初识数据库" class="headerlink" title="初识数据库"></a>初识数据库</h1><h2 id="DBMS—数据库管理系统"><a href="#DBMS—数据库管理系统" class="headerlink" title="DBMS—数据库管理系统"></a>DBMS—数据库管理系统</h2><h3 id="RDBMS—关系型数据库"><a href="#RDBMS—关系型数据库" class="headerlink" title="RDBMS—关系型数据库"></a>RDBMS—关系型数据库</h3><ul>
<li>Oracle</li>
<li>MySQL</li>
<li>MSSQL</li>
<li>PG</li>
</ul>
<h3 id="NoSQL—非关系型数据库"><a href="#NoSQL—非关系型数据库" class="headerlink" title="NoSQL—非关系型数据库"></a>NoSQL—非关系型数据库</h3><ul>
<li>MongoDB</li>
<li>ES</li>
<li>Redis</li>
</ul>
<h2 id="MySQL数据库软件—配置"><a href="#MySQL数据库软件—配置" class="headerlink" title="MySQL数据库软件—配置"></a>MySQL数据库软件—配置</h2><h3 id="MySQL服务启动"><a href="#MySQL服务启动" class="headerlink" title="MySQL服务启动"></a>MySQL服务启动</h3><p>手动</p>
<p><code>cmd--&gt; services.msc</code> 打开服务的窗口</p>
<p>使用管理员打开cmd：</p>
<pre><code>net start mysql: 启动mysql的服务
net stop mysql: 关闭mysql服务</code></pre>
<h3 id="MySQL登录"><a href="#MySQL登录" class="headerlink" title="MySQL登录"></a>MySQL登录</h3><p>登陆前服务要启动</p>
<pre><code>root用户：command line client
mysql -uroot -p密码
mysql -hip -uroot -p连接目标的密码
mysql --host=ip --user=root --password=连接目标的密码
mysql -h主机名 -P端口号 -u用户名 -p密码（默认端口3306，用户root）</code></pre>
<h3 id="MySQL退出"><a href="#MySQL退出" class="headerlink" title="MySQL退出"></a>MySQL退出</h3><pre><code>exit
quit</code></pre>
<h3 id="常见命令和语法大区"><a href="#常见命令和语法大区" class="headerlink" title="常见命令和语法大区"></a>常见命令和语法大区</h3><p>别忘了分号啊</p>
<p>1.查看当前所有的数据库</p>
<pre><code>show database();</code></pre>
<p>2.打开指定的库</p>
<pre><code>use 库名;</code></pre>
<p>**只要用了use你就在那个库中了</p>
<p>3.查看当前库所有的表</p>
<pre><code>show tables; </code></pre>
<p>4.查看其他库所有的表</p>
<pre><code>show tables from 库名;  </code></pre>
<p>5.创建表</p>
<pre><code>create table 表名(
    列名 列类型，
    列名 列类型，
    ...
)    </code></pre>
<p>6.查看表的结构  </p>
<pre><code>desc 表名;            </code></pre>
<h3 id="查看服务器的版本"><a href="#查看服务器的版本" class="headerlink" title="查看服务器的版本"></a>查看服务器的版本</h3><p>方式1：登录到mysql服务端</p>
<pre><code>select version();</code></pre>
<p>方式2：没有登录到mysql服务端</p>
<pre><code>mysql --version或mysql --V</code></pre>
<h3 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h3><ol>
<li>不区分大小写，但建议关键字大写，表名列名小写；</li>
<li>每句命令要用分号结尾；</li>
<li>每句命令根据需要，可以进行缩进 或换行；</li>
<li>注释</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">单行注释：#注释文字</span><br><span class="line">单行注释：-- 注释文字（注意空格）</span><br><span class="line">多行注释：&#x2F;* 注释文字 *&#x2F;</span><br></pre></td></tr></table></figure>

<p>ctrl s是保存；选中之后F12格式化；</p>
<p>安装了navicat，导入girls和myemployees俩数据集</p>
<h1 id="DQL语言"><a href="#DQL语言" class="headerlink" title="DQL语言"></a>DQL语言</h1><h2 id="认识查询"><a href="#认识查询" class="headerlink" title="认识查询"></a>认识查询</h2><p>先打开库</p>
<pre><code>USE myemployees;
select 查询列表 from 表名</code></pre>
<p>查询列表可以是：表中的字段、常量值、表达式、函数</p>
<p>查询的结果是一个虚拟的表格</p>
<p>1.查询表中的单个字段</p>
<pre><code>SELECT last_name FROM employees;</code></pre>
<p>2.查询表中的多个字段</p>
<pre><code>SELECT last_name,salary,email FROM employees;</code></pre>
<p>3.查询表中所有字段（双击左侧） </p>
<p>方式1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  &#96;department_id&#96;, #这个符号是着重号，用于说明是字段而不是关键字&#96;&#96;</span><br><span class="line">  &#96;department_name&#96;,</span><br><span class="line">  &#96;manager_id&#96;,</span><br><span class="line">  &#96;location_id&#96; </span><br><span class="line"> FROM </span><br><span class="line">  employees;</span><br></pre></td></tr></table></figure>

<p>方式2</p>
<pre><code>SELECT * FROM employees ;</code></pre>
<p>4.查询常量值</p>
<pre><code>SELECT 100;
SELECT &#39;john&#39;;</code></pre>
<p><strong>不区分字符和字符串</strong></p>
<p>5.查询表达式</p>
<pre><code>SELECT 100%98;                 #取余</code></pre>
<p>6.查询函数</p>
<pre><code>SELECT VERSION();              #调用并得到返回值</code></pre>
<p>7.起别名</p>
<ul>
<li>便于理解</li>
<li>如果要查询的字段有重名的情况，使用别名可以区分开来</li>
</ul>
<p>方式1:用as</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT 100%98 AS 结果;</span><br><span class="line">SELECT last_name AS 姓, first_name AS 名 FROM employees;</span><br></pre></td></tr></table></figure>

<p>方式2:空格</p>
<pre><code>SELECT last_name 姓，first_name 名 FROM employees;</code></pre>
<p>案例：查询salary，显示结果为out put</p>
<pre><code>SELECT salary AS &quot;out put&quot; FROM employees;</code></pre>
<p>不能：</p>
<pre><code>SELECT salary AS &quot;out put&quot; FROM employees;</code></pre>
<p>因为有特殊符号的时候就用双引号引起来，单引号也行的，建议双引号。</p>
<p>8.去重distinct</p>
<p>案例：查询员工表涉及到的所有部门编号</p>
<pre><code>SELECT DISTINCT department_id FROM employees;</code></pre>
<p>9.+号的作用</p>
<p>java中的+号：</p>
<ul>
<li>运算符：两个操作数都为数值型</li>
<li>连接符：只要有一个操作数为字符串</li>
</ul>
<p>mysql中的+号：</p>
<p>仅仅只有一个功能：运算符</p>
<pre><code>select 100+90；
select &#39;123&#39;+90; </code></pre>
<p>其中一方为字符型，会试图将字符型数值转换成数值型<br>如果转换成功则继续加法运算</p>
<pre><code>select &#39;john&#39;+90; </code></pre>
<p>如果转换失败，则字符型数组值转换成0；</p>
<pre><code>select null+10;</code></pre>
<p>只要其中一方为null，则结果为null</p>
<p>null和别人拼接的时候都是null</p>
<p>使用concat进行连接</p>
<pre><code>select concat(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) AS 结果</code></pre>
<p>案例：查询员工名和姓连接成一个字段，并显示为 姓名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT CONCAT(last_name,first_name) AS 姓名 FROM employees;</span><br><span class="line">不能：</span><br><span class="line">SELECT last_name + first_name AS 姓名 FROM employees;</span><br></pre></td></tr></table></figure>

<p>10.判断是否为空</p>
<p><code>commission_pct</code>是否为空？为空返回what</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">	IFNULL(commission_pct, what) AS 奖金率,</span><br><span class="line">	commission_pct </span><br><span class="line">FROM </span><br><span class="line">	employees;</span><br></pre></td></tr></table></figure>

<h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">	查询列表       第三步</span><br><span class="line">from</span><br><span class="line">	表名           第一步</span><br><span class="line">where</span><br><span class="line">	筛选条件;      第二步</span><br></pre></td></tr></table></figure>

<p>分类：</p>
<p>1.按条件表达式筛选</p>
<pre><code>条件运算符: &gt;  &lt;  =    != or &lt;&gt;(不等于)    &gt;= &lt;=</code></pre>
<p>2.按逻辑表达式筛选</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">逻辑运算符：   与&amp;&amp; 或|| 非!</span><br><span class="line">sql推荐使用    and or not</span><br><span class="line">作用：连接条件表达式</span><br><span class="line">&amp;&amp; and 都1则1</span><br><span class="line">|| or 有1则1</span><br><span class="line">！ not 是0则1</span><br></pre></td></tr></table></figure>

<p>3.模糊查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">like </span><br><span class="line">between and</span><br><span class="line">in </span><br><span class="line">is null</span><br><span class="line">is not null</span><br></pre></td></tr></table></figure>

<h2 id="按照条件表达式查询"><a href="#按照条件表达式查询" class="headerlink" title="按照条件表达式查询"></a>按照条件表达式查询</h2><p>案例1：查询工资&gt;12000的员工信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	*</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	salary &gt; 12000;</span><br></pre></td></tr></table></figure>

<p>案例2：查询部门编号不等于90号的员工名和部门编号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	department_id</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	department_id !&#x3D; 90;        #最好用&lt;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="按逻辑表达式筛选"><a href="#按逻辑表达式筛选" class="headerlink" title="按逻辑表达式筛选"></a>按逻辑表达式筛选</h2><p>案例1：查询工资在10000到20000之间的员工名，工资和奖金</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	salary,</span><br><span class="line">	commission_pct</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	salary &gt;&#x3D; 10000 AND salary &lt;&#x3D; 20000;</span><br></pre></td></tr></table></figure>

<p>案例2：查询部门编号不在90-120之间，或者工资高于15000的员工信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	*</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	department_id &lt; 90 OR department_id &gt; 120 OR salary &gt; 15000;	   </span><br><span class="line">WHERE</span><br><span class="line">	NOT(department_id &gt;&#x3D; 90 AND department_id &lt;&#x3D; 120) OR salary &gt; 15000;</span><br></pre></td></tr></table></figure>


<h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><h3 id="like"><a href="#like" class="headerlink" title="like"></a>like</h3><p>一般和通配符搭配使用</p>
<p>通配符：</p>
<ul>
<li>% 任意多个字符，可以是0个</li>
<li>_ 任意单个字符</li>
</ul>
<p>案例1：查询员工名中包含字符a的员工信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	*</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	last_name LIKE &#39;%a%&#39;;	</span><br><span class="line">%a%用于匹配，%代表通配符，代表任意个字符</span><br></pre></td></tr></table></figure>

<p>案例2：查询员工名中第3个字符为n，第五个字符为l的员工名和工资</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	salary</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	last_name LIKE &#39;__n_l%&#39;;</span><br></pre></td></tr></table></figure>

<p>案例3：查询员工名中第二个字符为_的员工名（转义字符）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	last_name</span><br><span class="line">FROM </span><br><span class="line">	employees</span><br><span class="line">WHERE 	 </span><br><span class="line">	last_name LIKE &#39;_\_%&#39;;	</span><br><span class="line">	last_name LIKE &#39;_a_%&#39; ESCAPE &#39;a&#39;;	 </span><br></pre></td></tr></table></figure>

<p><code>a</code>随便取的，为的仅仅是说明a是转义，可以用￥等随意，只需要说明就行    </p>
<h3 id="between-and"><a href="#between-and" class="headerlink" title="between and"></a>between and</h3><ul>
<li>使用between and可以提高语句的简洁度</li>
<li>包含临界值</li>
<li>两个临界值的位置不能调换，不会报错但效果不一样</li>
</ul>
<p>案例1：查询员工编号在100到120之间的员工信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	*</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	employee_id BETWEEN 100 AND 120;</span><br></pre></td></tr></table></figure>

<h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><p>含义：用于判断某字段的值是否属于in列表中的某一项</p>
<p>特点：</p>
<ul>
<li>使用in提高语句简洁度</li>
<li>in列表的值类型必须统一或者兼容</li>
<li>不支持通配符，相当于等号</li>
</ul>
<p>案例：查询员工的工种编号是 IT_PROT, AD_VP, AD_PRES中的一个的员工名和工种编号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	job_id</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	job_id&#x3D;&#39;IT_PROT&#39; OR job_id&#x3D;&#39;AD_VP&#39; OR job_id&#x3D;&#39;AD_VP&#39;;</span><br><span class="line">方法二 - 用in：	</span><br><span class="line">WHERE</span><br><span class="line">	job_id IN (&#39;IT_PROT&#39; ,&#39;AD_VP&#39; , &#39;AD_VP&#39;);</span><br></pre></td></tr></table></figure>


<h3 id="is-null-is-not-null"><a href="#is-null-is-not-null" class="headerlink" title="is null(is not null)"></a>is null(is not null)</h3><p><strong>=或者&lt;&gt;不能用于判断null值</strong></p>
<p>案例1：查询没有奖金的员工名和奖金率</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	commission_pct</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	commission_pct IS NULL;</span><br></pre></td></tr></table></figure>

<p><strong>安全等于  &lt;=&gt;  is null可以换成&lt;=&gt; null</strong></p>
<p>案例1：查询没有奖金的员工名和奖金率</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	commission_pct</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	commission_pct &lt;&#x3D;&gt; NULL;</span><br></pre></td></tr></table></figure>

<p>案例2：查询工资为12000的员工信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	salary</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	salary &lt;&#x3D;&gt; 12000;</span><br></pre></td></tr></table></figure>

<p>区别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IS NULL ：仅仅可以判断NULL值</span><br><span class="line">&lt;&#x3D;&gt;     ：既可以判断NULL值，又可以判断普通的数值。	</span><br></pre></td></tr></table></figure>

<p>函数重提</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	concat:拼接字符</span><br><span class="line">isnull:判断，如果是空值则返回1，不是则返回0</span><br><span class="line">ifnull:判断，如果是空值则返回一个给定值，不然则返回原本的值</span><br></pre></td></tr></table></figure>

<h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><p>引入：</p>
<pre><code>select * from employees;</code></pre>
<p>语法：</p>
<pre><code>SELECT 查询列表
from 表
[where 筛选条件]
order by 排序列表 [asc|desc]</code></pre>
<p>特点：</p>
<pre><code>1、asc代表升序，desc代表降序，默认不写是升序
2、order by子句中可以支持单个字段、多个字段、表达式、函数、别名
3、order by子句一般是放在查询语句的最后面，limit子句除外    </code></pre>
<p>案例1：查询员工信息，要求工资从高到低排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#从高到低是降序哈</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">ORDER BY</span><br><span class="line">	salary DESC;</span><br><span class="line">#升序</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">ORDER BY</span><br><span class="line">	salary ASC;</span><br></pre></td></tr></table></figure>

<p>案例2：查询部门编号&gt;=90的员工信息，按入职时间的先后进行排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	department_id &gt;&#x3D; 90 </span><br><span class="line">ORDER BY</span><br><span class="line">	hiredate ASC;</span><br></pre></td></tr></table></figure>

<p>案例3：按年薪高低显示员工的信息和年薪[按表达式排序]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	*,</span><br><span class="line">	salary * 12 *(</span><br><span class="line">	1+IFNULL ( commission_pct, 0 )) AS 年薪 </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">ORDER BY</span><br><span class="line">	salary * 12 *(</span><br><span class="line">	1+IFNULL ( commission_pct, 0 )) DESC;</span><br></pre></td></tr></table></figure>

<p>案例4：按年薪高低显示员工的信息和年薪[按别名排序]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	*,</span><br><span class="line">	salary * 12 *(</span><br><span class="line">	1+IFNULL ( commission_pct, 0 )) AS 年薪 </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">ORDER BY</span><br><span class="line">	年薪 DESC;</span><br></pre></td></tr></table></figure>

<p>案例5：按姓名的长度显示员工的姓名和工资[按函数排序]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	LENGTH( last_name ) AS 字节长度,</span><br><span class="line">	last_name,</span><br><span class="line">	salary </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">ORDER BY</span><br><span class="line">	LENGTH( last_name ) DESC;</span><br></pre></td></tr></table></figure>

<p>案例6：查询员工信息，要求先按工资升序，再按员工编号降序 [按多个字段排序]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">ORDER BY</span><br><span class="line">	salary ASC,</span><br><span class="line">	employee_id DESC;</span><br><span class="line">#整体按工资排序，工资相同时，按员工编号降序</span><br></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>概念：</p>
<p>将一组逻辑语句封装在方法体中，对外暴露方法名</p>
<p>好处：</p>
<p>1、隐藏了实现细节<br>2、提高代码的重用性</p>
<p>调用：</p>
<p>select 函数名(实参列表) [from 表(根据需要)];</p>
<p>特点：</p>
<p>①叫什么（函数名）<br>②干什么（功能）</p>
<p>分类：</p>
<p>1、单行函数（字符函数，数学函数，日期函数，其他函数，流程控制函数）<br>如concat、length、ifnull等</p>
<p>2、分组函数<br>功能：做统计使用，又称为统计函数、聚合函数、组函数</p>
<h3 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h3><ul>
<li><p>字符函数:</p>
<p>  length：获取字节长度<br>  concat：连接<br>  substr：截取子串<br>  instr：获取字串第一次出现的索引<br>  trim：去掉前后空格<br>  upper：变大写<br>  lower：变小写<br>  lpad：左填充<br>  rpad：右填充<br>  replace：替换</p>
</li>
<li><p>数学函数： </p>
<p>  round：四舍五入<br>  ceil：向上取整<br>  floor：向下取整<br>  truncate：截断<br>  mod：去模<br>  rand：获取随机数，返回0 - 1之间的小数</p>
</li>
<li><p>日期函数：</p>
<p>  now：当前日期+时间<br>  curdate：返回当前日期<br>  curtime：返回当前时间<br>  monthname：以英文姓氏返回月<br>  year：年<br>  month：月<br>  day：日<br>  hour：小时<br>  minute：分钟<br>  second：秒<br>  datediff：两个日期之间的差的天数<br>  str_to_date：将字符转换成日期<br>  date_format：将日期转换成字符</p>
</li>
<li><p>其他函数：</p>
<p>  version：当前服务器的版本<br>  database：当前打开的数据库<br>  user：当前用户<br>  password(‘字符’)：返回该字符的密码形式<br>  md5(‘字符’)：返回该字符的md5加密格式</p>
</li>
<li><p>控制函数: </p>
<p>  ①if（条件表达式，表达式1，表达式2）<br>  如果条件表达式成立，则执行表达式1，不然则执行表达式2</p>
<p>  ②case：情况1<br>  case 变量或表达式或字段<br>  when 常量1 then 值1<br>  when 常量2 then 值2<br>  ……<br>  else 值n<br>  end</p>
<p>  ③case：情况2<br>  case<br>  when 条件1 then 值1<br>  when 条件2 then 值2<br>  ……<br>  else 值n<br>  end</p>
</li>
</ul>
<p><strong>show variables like ‘%char%’</strong></p>
<p>utf8编码的汉字一个汉字是3个字节，gbk编码的汉字一个汉字是2个字节，英文都是1个字节</p>
<h3 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h3><h4 id="length-获取参数值的字节个数"><a href="#length-获取参数值的字节个数" class="headerlink" title="length 获取参数值的字节个数"></a>length 获取参数值的字节个数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	LENGTH( &#39;john&#39; );</span><br><span class="line">SELECT</span><br><span class="line">	LENGTH( &#39;张三丰hahaha&#39; );	</span><br></pre></td></tr></table></figure>

<h4 id="concat-拼接字符串（用下划线拼接）"><a href="#concat-拼接字符串（用下划线拼接）" class="headerlink" title="concat 拼接字符串（用下划线拼接）"></a>concat 拼接字符串（用下划线拼接）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	CONCAT( last_name, &#39;_&#39;, first_name ) </span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br></pre></td></tr></table></figure>

<h4 id="upper-lower"><a href="#upper-lower" class="headerlink" title="upper, lower"></a>upper, lower</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	UPPER( &#39;john&#39; );#变大写</span><br><span class="line">SELECT</span><br><span class="line">	LOWER( &#39;JOHN&#39; );#变小写</span><br><span class="line"></span><br><span class="line">#示例：将姓变大写，名变小写，拼接</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">	CONCAT(</span><br><span class="line">		UPPER( last_name ),</span><br><span class="line">	LOWER( first_name )) AS 姓名 </span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br></pre></td></tr></table></figure>

<h4 id="substr-substring"><a href="#substr-substring" class="headerlink" title="substr, substring"></a>substr, substring</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#注意索引从1开始，下语句输出:</span><br><span class="line">							|out_put|</span><br><span class="line">							|和李四|</span><br><span class="line">#截取从 指定索引处 后面 所有字符</span><br><span class="line">SELECT</span><br><span class="line">	SUBSTR( &#39;张三和李四&#39;, 3 ) out_put;</span><br><span class="line">             1 2 3 4 5</span><br><span class="line"></span><br><span class="line">#截取从 指定索引处 指定字符长度的 字符</span><br><span class="line">#下面语句输出：</span><br><span class="line">							|out_put|</span><br><span class="line">							|张三|</span><br><span class="line">SELECT</span><br><span class="line">	SUBSTR( &#39;张三和李四&#39;, 1, 2 ) out_put;	</span><br></pre></td></tr></table></figure>

<p>案例：姓名中首字符大写，其他字符小写，用_拼接，显示出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	CONCAT(</span><br><span class="line">		UPPER(</span><br><span class="line">		SUBSTR( last_name, 1, 1 )),</span><br><span class="line">		&#39;_&#39;,</span><br><span class="line">		LOWER(</span><br><span class="line">		SUBSTR( last_name, 2 ))) output </span><br><span class="line">FROM</span><br><span class="line">	employees;	</span><br></pre></td></tr></table></figure>

<h4 id="instr"><a href="#instr" class="headerlink" title="instr"></a>instr</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#返回 子串的 起始索引，找不到返回0</span><br><span class="line">#下例返回7</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">	INSTR( &#39;杨不悔爱上了殷六侠&#39;, &#39;殷六侠&#39; ) AS out_put	</span><br><span class="line">			1 2 3 4 5 67</span><br></pre></td></tr></table></figure>

<h4 id="trim-去掉首尾-空格不一定"><a href="#trim-去掉首尾-空格不一定" class="headerlink" title="trim 去掉首尾(空格不一定)"></a>trim 去掉首尾(空格不一定)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#输出 张翠山</span><br><span class="line">SELECT</span><br><span class="line">	LENGTH(</span><br><span class="line">	TRIM( &#39;    张翠山      &#39; )) AS out_put;</span><br><span class="line"></span><br><span class="line">#输出 张aaaa翠山</span><br><span class="line">SELECT</span><br><span class="line">	TRIM( &#39;a&#39; FROM &#39;aaaa张aaaa翠山aaaaaaaa&#39; ) AS out_put;	</span><br></pre></td></tr></table></figure>

<h4 id="lpad-用-指定的字符-实现-左填充-指定长度，不够才填，-够了就保留"><a href="#lpad-用-指定的字符-实现-左填充-指定长度，不够才填，-够了就保留" class="headerlink" title="lpad 用 指定的字符 实现 左填充 指定长度，不够才填， 够了就保留"></a>lpad 用 指定的字符 实现 左填充 指定长度，不够才填， 够了就保留</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#输出*******殷素素</span><br><span class="line">SELECT</span><br><span class="line">	LPAD( &#39;殷素素&#39;, 10, &#39;*&#39; ) AS out_put;</span><br><span class="line"></span><br><span class="line">#输出：殷素</span><br><span class="line">SELECT</span><br><span class="line">	LPAD( &#39;殷素素&#39;, 2, &#39;*&#39; ) AS out_put;</span><br></pre></td></tr></table></figure>

<h4 id="rpad-用指定的字符实现右填充指定长度"><a href="#rpad-用指定的字符实现右填充指定长度" class="headerlink" title="rpad 用指定的字符实现右填充指定长度"></a>rpad 用指定的字符实现右填充指定长度</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#输出：殷素素ababababa</span><br><span class="line">SELECT</span><br><span class="line">	RPAD( &#39;殷素素&#39;, 12, &#39;ab&#39; ) AS out_put;</span><br></pre></td></tr></table></figure>

<h4 id="replace-替换"><a href="#replace-替换" class="headerlink" title="replace 替换"></a>replace 替换</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT REPLACE</span><br><span class="line">	( &#39;张无忌爱上了周芷若&#39;, &#39;周芷若&#39;, &#39;赵敏&#39; ) AS out_put;</span><br></pre></td></tr></table></figure>

<h3 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h3><h4 id="round-四舍五入"><a href="#round-四舍五入" class="headerlink" title="round 四舍五入"></a>round 四舍五入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	ROUND( 1.65 );#2</span><br><span class="line">SELECT</span><br><span class="line">	ROUND(- 1.45 );#-1</span><br><span class="line">SELECT</span><br><span class="line">	ROUND( 1.567, 2 );#1.57,小数点后保留2位</span><br></pre></td></tr></table></figure>

<h4 id="ceil-向上取整"><a href="#ceil-向上取整" class="headerlink" title="ceil 向上取整"></a>ceil 向上取整</h4><p><strong>返回&gt;=该参数的最小整数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	CEIL(- 1.02 );#-1</span><br><span class="line">SELECT</span><br><span class="line">	CEIL( 1.00 );#1</span><br><span class="line">SELECT</span><br><span class="line">	CEIL( 1.02 );#2</span><br></pre></td></tr></table></figure>

<h4 id="floor-向下取整"><a href="#floor-向下取整" class="headerlink" title="floor 向下取整"></a>floor 向下取整</h4><p><strong>返回&lt;=该参数的最大整数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	FLOOR(- 9.99 );#-10</span><br></pre></td></tr></table></figure>

<h4 id="truncate-截断"><a href="#truncate-截断" class="headerlink" title="truncate 截断"></a>truncate 截断</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT TRUNCATE</span><br><span class="line">	( 1.65, 1 );#1.6;保留一位小数的意思</span><br></pre></td></tr></table></figure>

<h4 id="mod-取余"><a href="#mod-取余" class="headerlink" title="mod 取余"></a>mod 取余</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#计算原理：</span><br><span class="line">mod(a,b) : a - a&#x2F;b * b</span><br><span class="line">mod(-10,-3) : -10-(-10)&#x2F;(-3)*(-3)&#x3D;-1;</span><br><span class="line"></span><br><span class="line">#举例：</span><br><span class="line">SELECT MOD</span><br><span class="line">	( 10,- 3 );#1</span><br></pre></td></tr></table></figure>


<h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><h4 id="now-curdate-curtime"><a href="#now-curdate-curtime" class="headerlink" title="now, curdate, curtime"></a>now, curdate, curtime</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">now:返回当前系统日期加时间</span><br><span class="line">SELECT</span><br><span class="line">	NOW();</span><br><span class="line"></span><br><span class="line">#curdate 返回当前系统日期，不包含时间</span><br><span class="line">SELECT</span><br><span class="line">	CURDATE();	</span><br><span class="line"></span><br><span class="line">#curtime 返回当前时间，不包含日期</span><br><span class="line">SELECT</span><br><span class="line">	CURTIME();</span><br><span class="line"></span><br><span class="line">#可以获取指定的部分，年，月，日，小时，分，秒</span><br><span class="line">SELECT YEAR</span><br><span class="line">	(</span><br><span class="line">	NOW()) AS 年;#2020</span><br><span class="line"></span><br><span class="line">SELECT YEAR</span><br><span class="line">	( &#39;1998-1-1&#39; ) 年;#1998</span><br><span class="line"></span><br><span class="line">SELECT YEAR</span><br><span class="line">	( hiredate ) 年 </span><br><span class="line">FROM</span><br><span class="line">	employees;#hiredate是表里的字段-入职时间</span><br><span class="line"></span><br><span class="line">SELECT MONTH</span><br><span class="line">	(</span><br><span class="line">	NOW()) 月;</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">	MONTHNAME(</span><br><span class="line">	NOW()) 月;#显示英文月份	</span><br></pre></td></tr></table></figure>

<h4 id="str-to-date-将字符通过指定的格式转换成日期"><a href="#str-to-date-将字符通过指定的格式转换成日期" class="headerlink" title="str_to_date 将字符通过指定的格式转换成日期"></a>str_to_date 将字符通过指定的格式转换成日期</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%Y 四位的年份</span><br><span class="line">%y 2位的年份</span><br><span class="line">%m 月份 （01,02，...12）</span><br><span class="line">%c 月份 （1,2，..., 12）</span><br><span class="line">%d 日 </span><br><span class="line">%H 小时（24）%h（12）</span><br><span class="line">%i 分钟  %s秒</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	STR_TO_DATE( &#39;9-13-1999&#39;, &#39;%m-%d-%Y&#39; ) 日期;#1999-09-13</span><br><span class="line">					字符串        日期格式</span><br><span class="line">SELECT </span><br><span class="line">	STR_TO_DATE (&#39;2020-4-17&#39;,&#39;%Y-%c-%d&#39;) AS output;#2020-4-17</span><br><span class="line">					字符串 		 日期格式</span><br></pre></td></tr></table></figure>

<p>查询入职日期为1992-4-3的员工信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	hiredate &#x3D; &#39;1992-4-3&#39;;</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	hiredate &#x3D; STR_TO_DATE( &#39;4-3 1992&#39;, &#39;%c-%d %Y&#39; );	</span><br><span class="line">#第二块告诉电脑前面这块谁是日谁是月谁是年</span><br></pre></td></tr></table></figure>

<h4 id="date-format-将日期转换成字符"><a href="#date-format-将日期转换成字符" class="headerlink" title="date_format 将日期转换成字符"></a>date_format 将日期转换成字符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	DATE_FORMAT( NOW(), &#39;%y年%m月%d日&#39; ) AS output;#20年4月17日	</span><br></pre></td></tr></table></figure>

<p>查询有奖金的员工名和入职日期(xx月/xx日 xx年)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	DATE_FORMAT( hiredate, &#39;%m月&#x2F;%d日 %Y年&#39; ) 入职日期 </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	commission_pct IS NOT NULL;	</span><br></pre></td></tr></table></figure>
<h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#使用较少</span><br><span class="line">SELECT </span><br><span class="line">	VERSION();</span><br><span class="line">SELECT </span><br><span class="line">	DATABASE();#查看当前库</span><br><span class="line">SELECT </span><br><span class="line">	USER();</span><br></pre></td></tr></table></figure>

<h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><h4 id="if函数"><a href="#if函数" class="headerlink" title="if函数"></a>if函数</h4><p><strong>if else 的效果</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT IF(10&gt;5,&#39;大&#39;,&#39;小&#39;);</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	commission_pct,</span><br><span class="line">IF</span><br><span class="line">	( commission_pct IS NULL, &#39;呵呵，没奖金&#39;, &#39;嘻嘻，有奖金&#39; ) 备注 </span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br></pre></td></tr></table></figure>

<h4 id="case函数的使用一"><a href="#case函数的使用一" class="headerlink" title="case函数的使用一"></a>case函数的使用一</h4><p><strong>switch case的效果</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case 要判断的字段或表达式</span><br><span class="line">when 常量1 then要显示的值1或语句1;</span><br><span class="line">when 常量2 then要显示的值2或语句2;</span><br><span class="line">...</span><br><span class="line">else 要显示的值n或语句n</span><br><span class="line">end</span><br><span class="line">（搭配select当表达式,then加一个值，或者不搭配select当语句）</span><br></pre></td></tr></table></figure>

<p>案例：查询员工的工资.</p>
<p>要求:</p>
<pre><code>部门号=30，显示的工资为1.1倍
部门号=40，显示的工资为1.2倍
部门号=50，显示的工资为1.3倍
其他部门显示原工资</code></pre>
<p>代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	salary,</span><br><span class="line">	department_id,</span><br><span class="line">CASE</span><br><span class="line">		department_id </span><br><span class="line">		WHEN 30 THEN</span><br><span class="line">		salary * 1.1 </span><br><span class="line">		WHEN 40 THEN</span><br><span class="line">		salary * 1.2 </span><br><span class="line">		WHEN 50 THEN</span><br><span class="line">		salary * 1.3 ELSE salary </span><br><span class="line">	END AS 新工资 </span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br></pre></td></tr></table></figure>

<h4 id="case函数的使用二"><a href="#case函数的使用二" class="headerlink" title="case函数的使用二"></a>case函数的使用二</h4><p><strong>类似于多重if</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case  </span><br><span class="line">when 条件1 then 要显示的值1或语句1</span><br><span class="line">when 条件2 then 要显示的值2或语句2</span><br><span class="line">...</span><br><span class="line">else 要显示的值n或语句n</span><br><span class="line">end</span><br><span class="line">与上一种情况的不同就是case后不加表达式</span><br></pre></td></tr></table></figure>

<p>案例：查询员工的工资情况.</p>
<p>题目：</p>
<pre><code>如果工资&gt;20000,显示A级别
如果工资&gt;15000,显示B级别
如果工资&gt;10000,显示C级别
否则显示D级别</code></pre>
<p>代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	salary,</span><br><span class="line">CASE</span><br><span class="line">	</span><br><span class="line">		WHEN salary &gt; 20000 THEN</span><br><span class="line">		&#39;A&#39; </span><br><span class="line">		WHEN salary &gt; 15000 THEN</span><br><span class="line">		&#39;B&#39; </span><br><span class="line">		WHEN salary &gt; 10000 THEN</span><br><span class="line">		&#39;C&#39; ELSE &#39;D&#39; </span><br><span class="line">	END AS 工资级别 </span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br></pre></td></tr></table></figure>

<h3 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h3><p>功能：</p>
<p>用作统计使用，又称为聚合函数或统计函数或组函数</p>
<p>分类：</p>
<pre><code>sum、  avg、  max、  min、  count</code></pre>
<p>特点：</p>
<ul>
<li>sum，avg用于处理数值型；max，min，count可以处于任何类型    </li>
<li>以上分组函数都忽略null值</li>
<li>可以和distinct搭配实现去重</li>
<li>count函数的单独介绍，一般用count(*)多，统计行数</li>
<li>和分组函数一同查询的字段要求是group by后的字段</li>
</ul>
<h4 id="使用举例："><a href="#使用举例：" class="headerlink" title="使用举例："></a>使用举例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	SUM( salary ) </span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br><span class="line">SELECT</span><br><span class="line">	SUM( salary ) #和,ROUND(AVG(salary),2) #平均 FROM employees;</span><br><span class="line">SELECT</span><br><span class="line">	MAX( salary ) #最高, MIN(salary) #最低 FROM employees;</span><br><span class="line">SELECT</span><br><span class="line">	MIN( salary ) </span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br><span class="line">SELECT</span><br><span class="line">	COUNT( salary ) </span><br><span class="line">FROM</span><br><span class="line">	employees;	</span><br></pre></td></tr></table></figure>

<h4 id="参数支持哪些类型"><a href="#参数支持哪些类型" class="headerlink" title="参数支持哪些类型"></a>参数支持哪些类型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	SUM( last_name ),</span><br><span class="line">	AVG( last_name ) </span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br><span class="line">SELECT</span><br><span class="line">	SUM( hiredate ),</span><br><span class="line">	AVG( hiredate ) </span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br></pre></td></tr></table></figure>

<p>字符求和无意义，不建议这样用</p>
<p>所以有的适合数值型数据，有的都适合。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	MAX( last_name ),</span><br><span class="line">	MIN( last_name ) </span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br><span class="line">SELECT</span><br><span class="line">	MAX( hiredate ),</span><br><span class="line">	MIN( hiredate ) </span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br><span class="line"></span><br><span class="line">#支持</span><br><span class="line">SELECT</span><br><span class="line">	COUNT( last_name ) </span><br><span class="line">FROM</span><br><span class="line">	employees;#计算非空的值 107</span><br><span class="line">SELECT</span><br><span class="line">	COUNT( commission_pct ) </span><br><span class="line">FROM</span><br><span class="line">	employees;#35</span><br></pre></td></tr></table></figure>

<h4 id="是否忽略null"><a href="#是否忽略null" class="headerlink" title="是否忽略null"></a>是否忽略null</h4><p><strong>是的</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	SUM( commission_pct ),</span><br><span class="line">	AVG( commission_pct ) </span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br></pre></td></tr></table></figure>

<h4 id="和distinct搭配–去重"><a href="#和distinct搭配–去重" class="headerlink" title="和distinct搭配–去重"></a>和distinct搭配–去重</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	SUM( DISTINCT salary ),</span><br><span class="line">	SUM( salary ) </span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br><span class="line">SELECT</span><br><span class="line">	COUNT( DISTINCT salary ),</span><br><span class="line">	COUNT( salary ) </span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br></pre></td></tr></table></figure>

<h4 id="count函数"><a href="#count函数" class="headerlink" title="count函数"></a>count函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	COUNT( salary ) </span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br><span class="line">SELECT</span><br><span class="line">	COUNT(*) </span><br><span class="line">FROM</span><br><span class="line">	employees;#统计每一列的数目，即所有行数，有一行里的一个不为NULL，就算上这一行</span><br><span class="line">SELECT</span><br><span class="line">	COUNT( 1 ) </span><br><span class="line">FROM</span><br><span class="line">	employees;#和上一语句效果一样，加了一列全是1的列，里面可以任意给数字，给字符要加引号。</span><br></pre></td></tr></table></figure>

<h4 id="和分组函数一同查询的字段有限制"><a href="#和分组函数一同查询的字段有限制" class="headerlink" title="和分组函数一同查询的字段有限制"></a>和分组函数一同查询的字段有限制</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">	AVG(salary),</span><br><span class="line">	employee_id </span><br><span class="line">FROM employees;</span><br><span class="line">#这个员工id查出来没有意义  </span><br></pre></td></tr></table></figure>

<h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><p>语法：</p>
<pre><code>select 分组函数（max，min这些），列（**要求出现在group by后面**）
from 表
[where 筛选条件]
group by 分组的列表
[order by]子句</code></pre>
<p>注意：</p>
<p>查询列表必须特殊，要求是分组函数和group by后出现的字段</p>
<p>特点：</p>
<p>1.分组查询中的筛选条件分为两类（筛选的数据源不同</p>
<pre><code>            数据源           位置            关键字</code></pre>
<p>分组前筛选：</p>
<pre><code>            原始表       group by子句前面        where</code></pre>
<p>分组后筛选：</p>
<pre><code>        分组后的结果集   group by子句后面        having</code></pre>
<p>分组函数做条件，肯定是放在having子句中<br>能用分组前筛选的，优先考虑用分组前筛选</p>
<p>2.group by子句支持单个字段分组，多个字段分组，<br>    （多个字段之间用逗号隔开无顺序要求），表达式或函数（用的较少）</p>
<p>3.可添加排序（放在group by后）</p>
<h3 id="简单的分组查询"><a href="#简单的分组查询" class="headerlink" title="简单的分组查询"></a>简单的分组查询</h3><p>案例1：查询每个工种的最高工资</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">	MAX(salary),</span><br><span class="line">	job_id</span><br><span class="line">FROM </span><br><span class="line">	employees</span><br><span class="line">GROUP BY </span><br><span class="line">	job_id;</span><br></pre></td></tr></table></figure>

<p>案例2：查询每个位置上的部门个数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">	COUNT(*),</span><br><span class="line">	location_id</span><br><span class="line">FROM </span><br><span class="line">	departments</span><br><span class="line">GROUP BY </span><br><span class="line">	location_id;</span><br></pre></td></tr></table></figure>

<h3 id="添加分组前筛选条件"><a href="#添加分组前筛选条件" class="headerlink" title="添加分组前筛选条件"></a>添加分组前筛选条件</h3><p>案例1：查询邮箱中包含a字符的，每个部门的平均工资</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	AVG( salary ),</span><br><span class="line">	department_id </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	email LIKE &#39;%a%&#39; #邮箱中包含a字符</span><br><span class="line">	</span><br><span class="line">GROUP BY</span><br><span class="line">	department_id;</span><br></pre></td></tr></table></figure>

<p>案例2：查询有奖金的每个领导手下员工的最高工资</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	MAX( salary ),</span><br><span class="line">	manager_id </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	commission_pct IS NOT NULL </span><br><span class="line">GROUP BY</span><br><span class="line">	manager_id;	</span><br></pre></td></tr></table></figure>


<h3 id="添加分组后的筛选条件"><a href="#添加分组后的筛选条件" class="headerlink" title="添加分组后的筛选条件"></a>添加分组后的筛选条件</h3><p>案例1：查询哪个部门的员工个数大于2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#①查询每个部门的员工个数</span><br><span class="line">SELECT</span><br><span class="line">	COUNT(*),</span><br><span class="line">	department_id </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">GROUP BY</span><br><span class="line">	department_id;</span><br><span class="line"></span><br><span class="line">#②根据1的结果进行筛选</span><br><span class="line">SELECT</span><br><span class="line">	COUNT(*),</span><br><span class="line">	department_id </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">GROUP BY</span><br><span class="line">	department_id </span><br><span class="line">HAVING</span><br><span class="line">	COUNT(*)&gt; 2;#######重要##########</span><br></pre></td></tr></table></figure>

<p>案例2：查询每个工种有奖金的员工的最高工资&gt;12000的工种编号和其最高工资 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#(有点难)</span><br><span class="line"></span><br><span class="line">#①查询每个工种有奖金的员工的最高工资</span><br><span class="line">SELECT</span><br><span class="line">	MAX( salary ),</span><br><span class="line">	job_id </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	commission_pct IS NOT NULL </span><br><span class="line">GROUP BY</span><br><span class="line">	job_id;</span><br><span class="line"></span><br><span class="line">#②根据1的结果继续筛选，最高工资&gt;12000</span><br><span class="line">SELECT</span><br><span class="line">	MAX( salary ),</span><br><span class="line">	job_id </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	commission_pct IS NOT NULL </span><br><span class="line">GROUP BY</span><br><span class="line">	job_id </span><br><span class="line">HAVING</span><br><span class="line">	MAX( salary )&gt; 12000;</span><br></pre></td></tr></table></figure>

<p>案例3：查询领导编号&gt;102的每个领导手下的最低工资&gt;5000的领导编号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#①查询领导编号&gt;102的每个领导手下的最低工资</span><br><span class="line">SELECT</span><br><span class="line">	MIN( salary ),</span><br><span class="line">	manager_id </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	manager_id &gt; 102 </span><br><span class="line">GROUP BY</span><br><span class="line">	manager_id;	</span><br><span class="line"></span><br><span class="line">#②在1的基础上，最低工资&gt;5000</span><br><span class="line">SELECT</span><br><span class="line">	MIN( salary ),</span><br><span class="line">	manager_id </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	manager_id &gt; 102 </span><br><span class="line">GROUP BY</span><br><span class="line">	manager_id </span><br><span class="line">HAVING</span><br><span class="line">	MIN( salary )&gt; 5000;</span><br></pre></td></tr></table></figure>

<h3 id="按表达式或函数分组"><a href="#按表达式或函数分组" class="headerlink" title="按表达式或函数分组"></a>按表达式或函数分组</h3><p>案例：按员工姓名的长度分组，查询每一组的员工个数，筛选员工个数&gt;5的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	COUNT(*),</span><br><span class="line">	LENGTH( last_name ) len_name </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">GROUP BY</span><br><span class="line">	len_name </span><br><span class="line">HAVING</span><br><span class="line">	COUNT(*)&gt; 5;</span><br></pre></td></tr></table></figure>

<h3 id="按多个字段分组"><a href="#按多个字段分组" class="headerlink" title="按多个字段分组"></a>按多个字段分组</h3><p>案例：查询每个部门每个工种的员工的平均工资</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	AVG( salary ),</span><br><span class="line">	department_id,</span><br><span class="line">	job_id </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">GROUP BY</span><br><span class="line">	department_id,</span><br><span class="line">	job_id;</span><br></pre></td></tr></table></figure>

<h3 id="按多个字段分组–添加排序"><a href="#按多个字段分组–添加排序" class="headerlink" title="按多个字段分组–添加排序"></a>按多个字段分组–添加排序</h3><p>案例：查询每个部门每个工种的员工的平均工资,并将&gt;10000的按高低排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	AVG( salary ) a,</span><br><span class="line">	department_id,</span><br><span class="line">	job_id </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">GROUP BY</span><br><span class="line">	department_id,</span><br><span class="line">	job_id </span><br><span class="line">HAVING</span><br><span class="line">	a &gt; 10000 </span><br><span class="line">ORDER BY</span><br><span class="line">	a DESC;</span><br></pre></td></tr></table></figure>

<h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><p>含义：又称多表查询，当查询的字段来自多个表，就会用到连接查询</p>
<p>笛卡尔乘积现象：表1有m行，表2有n行，结果:m*n行</p>
<p>发生原因：没有有效的连接条件</p>
<p>如何避免：添加有效的连接条件</p>
<p>分类：</p>
<pre><code>按年代分类：
    sql92标准：仅仅支持内连接
    sql99标准【推荐】：支持内连接 + 外连接（左外，右外）+ 交叉连接

按功能分类：
    内连接：
            等值连接，
            非等值连接，
            自连接
    外连接：
            左外连接，
            右外连接，
            全外连接
    交叉连接</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	beauty;</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	boys;</span><br><span class="line">SELECT NAME</span><br><span class="line">	,</span><br><span class="line">	boyName </span><br><span class="line">FROM</span><br><span class="line">	boys,</span><br><span class="line">	beauty </span><br><span class="line">WHERE</span><br><span class="line">	beauty.boyfriend_id &#x3D; boys.id;</span><br></pre></td></tr></table></figure>

<h3 id="sql92标准"><a href="#sql92标准" class="headerlink" title="sql92标准"></a>sql92标准</h3><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><pre><code>①多表等值连接的结果为多表的交集部分
②n表连接，至少需要n-1个连接条件
③多表的顺序无要求
④一般需要为表起别名
⑤可以搭配前面介绍的所有查询子句使用，比如排序，分组，筛选</code></pre>
<p>案例1：查询女神名和对应的男神名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT NAME</span><br><span class="line">	,</span><br><span class="line">	boyName </span><br><span class="line">FROM</span><br><span class="line">	boys,</span><br><span class="line">	beauty </span><br><span class="line">WHERE</span><br><span class="line">	beauty.boyfriend_id &#x3D; boys.id;</span><br></pre></td></tr></table></figure>

<p>案例2：查询员工名和对应的部门名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	department_name </span><br><span class="line">FROM</span><br><span class="line">	employees,</span><br><span class="line">	departments </span><br><span class="line">WHERE</span><br><span class="line">	employees.department_id &#x3D; departments.department_id;</span><br></pre></td></tr></table></figure>


<h5 id="为表起别名"><a href="#为表起别名" class="headerlink" title="为表起别名"></a>为表起别名</h5><pre><code>①提高语句简洁度
②区分多个重名的字段
③如果为表起了 别名，则 查询的字段 就不能用 原来的表名 去限定，只能用 别名</code></pre>
<p>案例1：查询员工名、工种号、工种名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	e.job_id,</span><br><span class="line">	job_title </span><br><span class="line">FROM</span><br><span class="line">	employees AS e,</span><br><span class="line">	jobs AS j #执行顺序是这句先</span><br><span class="line">	</span><br><span class="line">WHERE</span><br><span class="line">	e.job_id &#x3D; j.job_id;</span><br><span class="line"></span><br><span class="line">#两个表的顺序可以调换</span><br><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	e.job_id,</span><br><span class="line">	j.job_title </span><br><span class="line">FROM</span><br><span class="line">	jobs AS j,</span><br><span class="line">	employees AS e </span><br><span class="line">WHERE</span><br><span class="line">	e.job_id &#x3D; j.job_id;</span><br></pre></td></tr></table></figure>

<h5 id="可以加筛选"><a href="#可以加筛选" class="headerlink" title="可以加筛选"></a>可以加筛选</h5><p>案例1：查询有奖金的员工名、部门名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	department_name,</span><br><span class="line">	commission_pct </span><br><span class="line">FROM</span><br><span class="line">	employees e,</span><br><span class="line">	departments d </span><br><span class="line">WHERE</span><br><span class="line">	e.department_id &#x3D; d.department_id </span><br><span class="line">	AND e.commission_pct IS NOT NULL;</span><br></pre></td></tr></table></figure>

<p>案例2：查询出城市名中第二个字符为o的部门名和城市名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	department_name,</span><br><span class="line">	city </span><br><span class="line">FROM</span><br><span class="line">	departments d,</span><br><span class="line">	locations l </span><br><span class="line">WHERE</span><br><span class="line">	d.location_id &#x3D; l.location_id </span><br><span class="line">	AND city LIKE &#39;_o%&#39;;</span><br></pre></td></tr></table></figure>

<h5 id="加分组"><a href="#加分组" class="headerlink" title="加分组"></a>加分组</h5><p>案例1：查询每个城市的部门个数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	COUNT(*) 个数,</span><br><span class="line">	city </span><br><span class="line">FROM</span><br><span class="line">	departments d,</span><br><span class="line">	locations l </span><br><span class="line">WHERE</span><br><span class="line">	d.location_id &#x3D; l.location_id </span><br><span class="line">GROUP BY</span><br><span class="line">	city;	</span><br></pre></td></tr></table></figure>

<p>案例2：查询有奖金的每个部门的部门名和部门的领导编号，和该部门的最低工资</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	department_name,</span><br><span class="line">	d.manager_id,</span><br><span class="line">	MIN( salary ) </span><br><span class="line">FROM</span><br><span class="line">	departments d,</span><br><span class="line">	employees e </span><br><span class="line">WHERE</span><br><span class="line">	d.department_id &#x3D; e.department_id</span><br><span class="line">	AND commission_pct IS NOT NULL </span><br><span class="line">GROUP BY</span><br><span class="line">	department_name;</span><br></pre></td></tr></table></figure>

<h5 id="加排序"><a href="#加排序" class="headerlink" title="加排序"></a>加排序</h5><p>案例：查询每个工种的工种名和员工个数，按员工个数降序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	job_title,</span><br><span class="line">	COUNT(*) </span><br><span class="line">FROM</span><br><span class="line">	employees e,</span><br><span class="line">	jobs j </span><br><span class="line">WHERE</span><br><span class="line">	e.job_id &#x3D; j.job_id</span><br><span class="line">GROUP BY</span><br><span class="line">	job_title </span><br><span class="line">ORDER BY</span><br><span class="line">	COUNT(*) DESC;	</span><br></pre></td></tr></table></figure>

<h5 id="三表连接"><a href="#三表连接" class="headerlink" title="三表连接"></a>三表连接</h5><p>案例：查询员工名、部门名和所在的城市</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	department_name,</span><br><span class="line">	city </span><br><span class="line">FROM</span><br><span class="line">	employees e,</span><br><span class="line">	departments d,</span><br><span class="line">	locations l </span><br><span class="line">WHERE</span><br><span class="line">	e.department_id &#x3D; d.department_id</span><br><span class="line">	AND d.location_id &#x3D; l.location_id;</span><br></pre></td></tr></table></figure>

<h4 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h4><p>案例1：查询员工的工资和工资级别</p>
<p>准备:</p>
<pre><code>创建工资级别
运行下面这段代码，在数据库中创建一个job_grades表</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE job_grades</span><br><span class="line">(grade_level VARCHAR(3),</span><br><span class="line">lowest_sal INT,</span><br><span class="line">highest_sal INT);</span><br><span class="line"></span><br><span class="line">INSERT INTO job_grades</span><br><span class="line">VALUES (&#39;A&#39;,1000,2999);</span><br><span class="line"></span><br><span class="line">INSERT INTO job_grades</span><br><span class="line">VALUES (&#39;B&#39;,3000,5999);</span><br><span class="line"></span><br><span class="line">INSERT INTO job_grades</span><br><span class="line">VALUES (&#39;C&#39;,6000,9999);</span><br><span class="line"></span><br><span class="line">INSERT INTO job_grades</span><br><span class="line">VALUES (&#39;D&#39;,10000,14999);</span><br><span class="line"></span><br><span class="line">INSERT INTO job_grades</span><br><span class="line">VALUES (&#39;E&#39;,15000,24999);</span><br><span class="line"></span><br><span class="line">INSERT INTO job_grades</span><br><span class="line">VALUES (&#39;F&#39;,25000,40000);</span><br></pre></td></tr></table></figure>


<p>题目：查询员工的工资和工资级别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	salary,</span><br><span class="line">	grade_level </span><br><span class="line">FROM</span><br><span class="line">	employees e,</span><br><span class="line">	job_grades g </span><br><span class="line">WHERE</span><br><span class="line">	salary BETWEEN g.&#96;lowest_sal&#96; #笔记1有说这里为什么要加引号？ </span><br><span class="line">	AND g.&#96;highest_sal&#96;;</span><br></pre></td></tr></table></figure>

<h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p>有点像等值连接</p>
<p>案例：查询员工名和上级的名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	e.employee_id,</span><br><span class="line">	e.last_name,</span><br><span class="line">	m.employee_id,</span><br><span class="line">	m.last_name </span><br><span class="line">FROM</span><br><span class="line">	employees e,   #一张表看成两个表</span><br><span class="line">	employees m </span><br><span class="line">WHERE</span><br><span class="line">	e.manager_id &#x3D; m.employee_id;</span><br></pre></td></tr></table></figure>

<h3 id="sql99标准"><a href="#sql99标准" class="headerlink" title="sql99标准"></a>sql99标准</h3><p>语法：</p>
<pre><code>select 查询列表
from 表1 别名 【连接类型】
join 表2 别名 on 【连接条件】
on 连接条件
【where 筛选条件】
【group by 分组】
【having 筛选条件】
【order by 排序列表】</code></pre>
<p>分类：</p>
<pre><code>内连接：
        inner
外连接：
    左外 left 【outer】
    右外 right 【outer】
    全外 full 【outer】
交叉连接：
        cross</code></pre>
<h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>语法：</p>
<pre><code>select 查询列表
from 表1 别名
inner join 表2 别名
on 连接条件；</code></pre>
<p>分类：</p>
<pre><code>等值
非等值
自连接</code></pre>
<p>特点：</p>
<pre><code>①添加排序、分组、筛选
②inner可以省略
③筛选条件放在where后面，连接条件放在on后面，提高分离性，便于阅读
④inner join连接和sql92语法中的等值连接效果一样，都是查询多表的交集</code></pre>
<h4 id="等值连接-1"><a href="#等值连接-1" class="headerlink" title="等值连接"></a>等值连接</h4><p>案例1 查询员工名，部门名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	department_name </span><br><span class="line">FROM</span><br><span class="line">	employees e</span><br><span class="line">	INNER JOIN departments d ON e.department_id &#x3D; d.department_id;</span><br></pre></td></tr></table></figure>


<p>案例2：查询名字中包含e的员工名和工种名（添加筛选）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	job_title </span><br><span class="line">FROM</span><br><span class="line">	employees e</span><br><span class="line">	INNER JOIN jobs j ON e.job_id &#x3D; j.job_id </span><br><span class="line">WHERE</span><br><span class="line">	e.last_name LIKE &#39;%e%&#39;;</span><br></pre></td></tr></table></figure>

<p>案例3：查询部门个数&gt;3的城市名和部门个数（添加分组+筛选）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	city,</span><br><span class="line">	COUNT(*) 部门个数 </span><br><span class="line">FROM</span><br><span class="line">	locations l</span><br><span class="line">	INNER JOIN departments d ON d.location_id &#x3D; l.location_id </span><br><span class="line">GROUP BY</span><br><span class="line">	city </span><br><span class="line">HAVING</span><br><span class="line">	COUNT(*)&gt; 3;</span><br></pre></td></tr></table></figure>

<p>案例4：查询哪个部门的部门员工个数&gt;3的部门名，和员工个数，并按个数进行降序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	department_name,</span><br><span class="line">	COUNT(*) </span><br><span class="line">FROM</span><br><span class="line">	employees e</span><br><span class="line">	INNER JOIN departments d ON e.department_id &#x3D; d.department_id </span><br><span class="line">GROUP BY</span><br><span class="line">	department_name </span><br><span class="line">HAVING</span><br><span class="line">	COUNT(*)&gt; 3 </span><br><span class="line">ORDER BY</span><br><span class="line">	COUNT(*) DESC;</span><br></pre></td></tr></table></figure>

<p>案例5：查询员工名、部门名、工种名，并按部门名降序（三表连接）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	department_name,</span><br><span class="line">	job_title </span><br><span class="line">FROM</span><br><span class="line">	employees e</span><br><span class="line">	INNER JOIN departments d ON e.department_id &#x3D; d.department_id</span><br><span class="line">	INNER JOIN jobs j ON e.job_id &#x3D; j.job_id </span><br><span class="line">ORDER BY</span><br><span class="line">	d.department_name DESC;</span><br></pre></td></tr></table></figure>


<h4 id="非等值连接-1"><a href="#非等值连接-1" class="headerlink" title="非等值连接"></a>非等值连接</h4><p>案例1：查询员工的工资级别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	salary,</span><br><span class="line">	grade_level </span><br><span class="line">FROM</span><br><span class="line">	employees e</span><br><span class="line">	INNER JOIN job_grades g ON e.salary BETWEEN g.lowest_sal </span><br><span class="line">	AND g.highest_sal;</span><br></pre></td></tr></table></figure>


<p>案例2：查询工资的个数&gt;20的级别个数，并且按工资级别降序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	salary,</span><br><span class="line">	grade_level,</span><br><span class="line">	COUNT(*) </span><br><span class="line">FROM</span><br><span class="line">	employees e</span><br><span class="line">	INNER JOIN job_grades g ON e.salary BETWEEN g.lowest_sal </span><br><span class="line">	AND g.highest_sal </span><br><span class="line">GROUP BY</span><br><span class="line">	grade_level </span><br><span class="line">HAVING</span><br><span class="line">	COUNT(*) &gt; 20 </span><br><span class="line">ORDER BY</span><br><span class="line">	grade_level DESC;</span><br></pre></td></tr></table></figure>

<h4 id="自连接-1"><a href="#自连接-1" class="headerlink" title="自连接"></a>自连接</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询员工的名字，上级的名字</span><br><span class="line">SELECT</span><br><span class="line">	e.last_name,</span><br><span class="line">	m.last_name </span><br><span class="line">FROM</span><br><span class="line">	employees e</span><br><span class="line">	JOIN employees m ON e.manager_id &#x3D; m.employee_id;</span><br><span class="line"></span><br><span class="line">#加筛选：姓名中包含字符k的员工名字、上级名字</span><br><span class="line">SELECT</span><br><span class="line">	e.last_name,</span><br><span class="line">	m.last_name </span><br><span class="line">FROM</span><br><span class="line">	employees e</span><br><span class="line">	JOIN employees m ON e.manager_id &#x3D; m.employee_id</span><br><span class="line">WHERE</span><br><span class="line">	e.last_name LIKE &#39;%k%&#39;;</span><br></pre></td></tr></table></figure>

<h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p><strong>有主从表，主表就是你要查的信息主要来自的表</strong></p>
<p>应用场景：<br>用于查找一个表中有，另一个表中没有的记录</p>
<p>特点：</p>
<p>1.外连接的 查询结果 为主表中 所有的记录</p>
<p>如果 从表中 有和它 匹配的，则显示 匹配的值<br>如果 从表中 没有和它 匹配的，则显示 null<br>外连接查询结果 = 内连接结果 + 主表中有 而从表中没有的 记录</p>
<p>2.左外连接：left jon左边的是主表；右外连接：right join右边的是主表</p>
<p>3.左外和右外交换两个表的顺序，可以实现同样的效果</p>
<p>4.全外连接(不支持) = 内连接结果 + 表1有 但表2没有 + 表2有 但表1没有</p>
<p>题目：查询男朋友不在男生表的女生名(结果里没有的都是null)</p>
<p><strong>左外连接</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	be.NAME,</span><br><span class="line">	bo.* </span><br><span class="line">FROM</span><br><span class="line">	beauty be  #主表</span><br><span class="line">	LEFT OUTER JOIN boys bo ON be.boyfriend_id &#x3D; bo.id;</span><br></pre></td></tr></table></figure>

<p><strong>右外连接</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	be.NAME,</span><br><span class="line">	bo.* </span><br><span class="line">FROM</span><br><span class="line">	boys bo    #从表</span><br><span class="line">	RIGHT OUTER JOIN beauty be ON be.boyfriend_id &#x3D; bo.id </span><br><span class="line">WHERE</span><br><span class="line">	bo.id IS NOT NULL;</span><br></pre></td></tr></table></figure>

<p>案例1：查询哪个部门没有员工</p>
<p><strong>左外</strong></p>
<p>思考：谁是主表？是部门表吗？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	d.*,</span><br><span class="line">	e.employee_id </span><br><span class="line">FROM</span><br><span class="line">	departments d</span><br><span class="line">	LEFT OUTER JOIN employees e ON d.department_id &#x3D; e.department_id </span><br><span class="line">WHERE</span><br><span class="line">	e.employee_id IS NULL;</span><br></pre></td></tr></table></figure>

<p><strong>右外</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	d.*,</span><br><span class="line">	e.employee_id </span><br><span class="line">FROM</span><br><span class="line">	employees e</span><br><span class="line">	RIGHT OUTER JOIN departments d ON d.department_id &#x3D; e.department_id </span><br><span class="line">WHERE</span><br><span class="line">	e.employee_id IS NULL;</span><br></pre></td></tr></table></figure>


<h4 id="交叉连接（笛卡尔乘积）"><a href="#交叉连接（笛卡尔乘积）" class="headerlink" title="交叉连接（笛卡尔乘积）"></a>交叉连接（笛卡尔乘积）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	be.*,</span><br><span class="line">	bo.* </span><br><span class="line">FROM</span><br><span class="line">	beauty be</span><br><span class="line">	CROSS JOIN boys bo;</span><br></pre></td></tr></table></figure>

<p><strong>建议使用sql99语法</strong></p>
<p>看下图意会一下:</p>
<p><img src="https://s1.ax1x.com/2020/11/01/BwIWpd.png"><br><img src="https://s1.ax1x.com/2020/11/01/BwI2fH.png"></p>
<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p><strong>可能是最难的查询</strong></p>
<p>含义：出现在 其他语句内部的 select语句，称为 子查询 或 内查询</p>
<p>外部的 查询语句，称为 主查询 或 外查询</p>
<p>分类：</p>
<pre><code>按子查询出现的位置：
         select后面：        仅仅支持 标量子查询
         from后面：          支持 表子查询
      ☆ where或者having后面：标量子查询，列子查询，行子查询
         exists后面（相关子查询）：表子查询
按结果集的行列数不同：
        标量子查询（结果集只有一行一列）
        列子查询（结果集只有一列多行）
        行子查询（结果集有一行多列）
        表子查询（结果集一般为多行多列）</code></pre>
<h3 id="where或having后面"><a href="#where或having后面" class="headerlink" title="where或having后面"></a>where或having后面</h3><ol>
<li>标量子查询</li>
<li>列子查询（多行子查询）</li>
<li>行子查询（多行多列）</li>
</ol>
<p>特点：</p>
<pre><code>1子查询放在小括号内
2子查询一般放在条件右侧
3标量子查询，一般搭配单行操作符使用
&gt; &lt; &gt;= &lt;= = &lt;&gt;

列子查询一般搭配多行操作符使用
IN/NOT IN、ANY/SOME、ALL
任意一个    某一个    所有        
4子查询的执行优先于主查询执行</code></pre>
<h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>案例1：谁的工资比Abel高</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#①查询abel的工资</span><br><span class="line"></span><br><span class="line">SELECT salary </span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name&#x3D;&#39;Abel&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#②查询员工的信息，满足salary&gt;①的结果</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&gt;(</span><br><span class="line">	SELECT salary </span><br><span class="line">	FROM employees</span><br><span class="line">	WHERE last_name&#x3D;&#39;Abel&#39;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<p>案例2：返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id和工资</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#①查询141号员工的job_id</span><br><span class="line">SELECT </span><br><span class="line">	job_id</span><br><span class="line">FROM </span><br><span class="line">	employees</span><br><span class="line">WHERE </span><br><span class="line">	employee_id&#x3D;141;</span><br><span class="line"></span><br><span class="line">#②查询143号员工的salary</span><br><span class="line">SELECT </span><br><span class="line">	salary</span><br><span class="line">FROM </span><br><span class="line">	employees</span><br><span class="line">WHERE </span><br><span class="line">	employee_id&#x3D;143;</span><br><span class="line"></span><br><span class="line">#③员工的姓名，job_id,工资，要求job_id&#x3D;①并且salary&gt;②</span><br><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	job_id,</span><br><span class="line">	salary </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	job_id &#x3D;(</span><br><span class="line">	SELECT</span><br><span class="line">		job_id </span><br><span class="line">	FROM</span><br><span class="line">		employees </span><br><span class="line">	WHERE</span><br><span class="line">		employee_id &#x3D; 141 </span><br><span class="line">	) </span><br><span class="line">	AND salary &gt;(</span><br><span class="line">	SELECT</span><br><span class="line">		salary </span><br><span class="line">	FROM</span><br><span class="line">		employees </span><br><span class="line">	WHERE</span><br><span class="line">	employee_id &#x3D; 143 </span><br><span class="line">	);</span><br></pre></td></tr></table></figure>


<p>案例3：返回公司工资最少的员工的last_name,job_id,salary</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#①查询公司的最低工资</span><br><span class="line">SELECT </span><br><span class="line">	MIN(salary) </span><br><span class="line">FROM </span><br><span class="line">	employees</span><br><span class="line"></span><br><span class="line">#②查询last_name,job_id</span><br><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	job_id,</span><br><span class="line">	salary </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	salary &#x3D; ( SELECT MIN( salary ) FROM employees );</span><br></pre></td></tr></table></figure>

<p>案例4：查询最低工资大于50号部门的最低工资的部门id和其最低工资</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#①查询50号部门的最低工资</span><br><span class="line">SELECT</span><br><span class="line">	MIN( salary ) </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	department_id &#x3D; 50;</span><br><span class="line"></span><br><span class="line">#②查询每个部门的最低工资</span><br><span class="line">SELECT</span><br><span class="line">	MIN( salary ) </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">GROUP BY</span><br><span class="line">	department_id;</span><br><span class="line"></span><br><span class="line">#③筛选②</span><br><span class="line">SELECT</span><br><span class="line">	MIN( salary ),</span><br><span class="line">	department_id </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">GROUP BY</span><br><span class="line">	department_id </span><br><span class="line">HAVING</span><br><span class="line">	MIN( salary ) &gt; ( SELECT MIN( salary ) FROM employees WHERE department_id &#x3D; 50 );</span><br></pre></td></tr></table></figure>

<h4 id="列子查询（多行子查询）"><a href="#列子查询（多行子查询）" class="headerlink" title="列子查询（多行子查询）"></a>列子查询（多行子查询）</h4><p>案例1：返回location_id是1400或1700的部门中所有员工姓名</p>
<p><strong>法一：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#①查询location_id是1400或1700的部门编号</span><br><span class="line">SELECT DISTINCT </span><br><span class="line">	department_id</span><br><span class="line">FROM </span><br><span class="line">	departments</span><br><span class="line">WHERE 	</span><br><span class="line">	location_id IN(1400,1700);</span><br><span class="line"></span><br><span class="line">#②查询员工姓名要求部门号是①中的某个</span><br><span class="line">SELECT</span><br><span class="line">	last_name </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	department_id IN ( SELECT DISTINCT department_id FROM departments WHERE location_id IN ( 1400, 1700 ) );#in可以换成 &#x3D;ANY</span><br><span class="line">#我真的搞不懂navicat这个美化为什么这里是一整行，不如sqlyog好看</span><br></pre></td></tr></table></figure>

<p><strong>法二：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	last_name </span><br><span class="line">FROM</span><br><span class="line">	employees e</span><br><span class="line">	LEFT JOIN departments d ON e.department_id &#x3D; d.department_id </span><br><span class="line">WHERE</span><br><span class="line">	d.location_id IN ( 1400, 1700 );</span><br><span class="line">#in与(&#x3D; ANY)、not in与 (&lt;&gt;ALL)</span><br></pre></td></tr></table></figure>

<p><strong>为什么不用连接查询？ – 因为子查询效率更高</strong></p>
<p>案例2：返回其他工种中比job_id为‘IT_PROG’的任一工资低的员工信息</p>
<p><strong>这题的题意不太好理解哈</strong><br><strong>用any</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	employee_id,</span><br><span class="line">	last_name,</span><br><span class="line">	job_id,</span><br><span class="line">	salary </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	salary &lt; ANY ( SELECT DISTINCT salary FROM employees WHERE job_id &#x3D; &#39;IT_PROG&#39; ) </span><br><span class="line">	AND job_id &lt;&gt; &#39;IT_PROG&#39;;</span><br></pre></td></tr></table></figure>

<p>案例3：返回其他工种中比job_id为‘IT_PROG’的所有工资低的员工信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	employee_id,</span><br><span class="line">	last_name,</span><br><span class="line">	job_id,</span><br><span class="line">	salary </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	salary &lt; ALL ( SELECT DISTINCT salary FROM employees WHERE job_id &#x3D; &#39;IT_PROG&#39; ) </span><br><span class="line">	AND job_id &lt;&gt; &#39;IT_PROG&#39;;</span><br></pre></td></tr></table></figure>

<h4 id="行子查询（结果集是一行多列或多行多列）"><a href="#行子查询（结果集是一行多列或多行多列）" class="headerlink" title="行子查询（结果集是一行多列或多行多列）"></a>行子查询（结果集是一行多列或多行多列）</h4><p><strong>用的较少</strong></p>
<p>案例：查询员工编号最小并且工资最高的员工信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	employee_id &#x3D; ( SELECT MIN( employee_id ) FROM employees ) </span><br><span class="line">	AND salary &#x3D; ( SELECT MAX( salary ) FROM employees );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#或者</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	( employee_id, salary ) &#x3D; ( SELECT MIN( employee_id ), MAX( salary ) FROM employees );</span><br></pre></td></tr></table></figure>

<h3 id="select后面"><a href="#select后面" class="headerlink" title="select后面"></a>select后面</h3><p><strong>luileluile我不想学了 咋这么多分类</strong></p>
<p><strong>仅支持标量子查询 一行一列的</strong></p>
<p>案例1：查询每个部门的员工个数</p>
<p><strong>我第一时间会用连接 + 分组 做</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	d.*,</span><br><span class="line">	( SELECT COUNT(*) FROM employees e WHERE e.department_id &#x3D; d.department_id ) 个数 </span><br><span class="line">FROM</span><br><span class="line">	departments d;</span><br></pre></td></tr></table></figure>

<p><strong>子查询真的是..又回到被SAS支配的感觉中了</strong></p>
<p>案例2：查询员工号=102的部门名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	( SELECT department_name FROM departments d INNER JOIN employees e ON d.department_id &#x3D; e.department_id WHERE e.employee_id &#x3D; 102 );</span><br></pre></td></tr></table></figure>

<p>这题的答案真是强行嵌套..穿着雨衣打伞啊，我傻了</p>
<p>往后我不去理解了，明明可以内联</p>
<h3 id="from后面"><a href="#from后面" class="headerlink" title="from后面"></a>from后面</h3><p>案例：查询每个部门的平均工资的工资等级</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#①查询每个部门的平均工资</span><br><span class="line">SELECT </span><br><span class="line">	AVG(salary),</span><br><span class="line">	department_id</span><br><span class="line">FROM </span><br><span class="line">	employees</span><br><span class="line">GROUP BY </span><br><span class="line">	department_id；</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#②连接①的结果集和等级表，筛选条件 平均工资between最低和最高</span><br><span class="line">SELECT</span><br><span class="line">	ag_dep.*,</span><br><span class="line">	g.grade_level </span><br><span class="line">FROM</span><br><span class="line">	( SELECT AVG( salary ) ag, department_id FROM employees GROUP BY department_id ) ag_dep</span><br><span class="line">	INNER JOIN job_grades g ON ag_dep.ag BETWEEN g.lowest_sal </span><br><span class="line">	AND g.highest_sal;</span><br></pre></td></tr></table></figure>

<h3 id="exists后面"><a href="#exists后面" class="headerlink" title="exists后面"></a>exists后面</h3><p>exists完整的查询语句</p>
<p>结果：1或0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT EXISTS</span><br><span class="line">	(</span><br><span class="line">	SELECT</span><br><span class="line">		employee_id </span><br><span class="line">FROM</span><br><span class="line">	employees)#结果为1，表示存在</span><br></pre></td></tr></table></figure>

<p>案例1：查询有员工的部门名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	department_name </span><br><span class="line">FROM</span><br><span class="line">	departments d </span><br><span class="line">WHERE</span><br><span class="line">	d.&#96;department_id&#96; IN ( SELECT department_id FROM employees );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#或</span><br><span class="line">SELECT</span><br><span class="line">	department_name </span><br><span class="line">FROM</span><br><span class="line">	departments d </span><br><span class="line">WHERE</span><br><span class="line">	EXISTS ( SELECT * FROM employees e WHERE e.department_id &#x3D; d.department_id );	</span><br></pre></td></tr></table></figure>

<p>案例2：查询没有女朋友的男生信息</p>
<p><strong>in</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	bo.* </span><br><span class="line">FROM</span><br><span class="line">	boys bo </span><br><span class="line">WHERE</span><br><span class="line">	bo.id NOT IN ( SELECT boyfriend_id FROM beauty );#exists</span><br><span class="line">SELECT</span><br><span class="line">	bo.* </span><br><span class="line">FROM</span><br><span class="line">	boys bo </span><br><span class="line">WHERE</span><br><span class="line">	NOT EXISTS ( SELECT boyfriend_id FROM beauty be WHERE bo.id &#x3D; be.boyfriend_id );</span><br></pre></td></tr></table></figure>
<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>应用场景：当要显示的数据一页显示不全，需要分页提交sql请求</p>
<p>语法：</p>
<pre><code>select 查询列表
from 表
&#123;join type join 表2
where 筛选条件
group by 分组字段
having 分组后的筛选
order by 排序的字段&#125;
limit offset，size;
        参数      参数
offset:要显示条目的起始索引，起始索引从0开始
size：要显示的条目数</code></pre>
<p>特点：</p>
<pre><code>①limit语句放在查询语句的**最后**
②公式
要显示的页数page，每页的条目数size

select 查询列表
from 表
limit (page-1)*size,size;
size = 10
page
1        0
2        10
3        20</code></pre>
<p>案例1：查询前五条员工信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">	LIMIT 0,</span><br><span class="line">	5;</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">	LIMIT 5;</span><br></pre></td></tr></table></figure>


<p>案例2：查询第11条 到 第25条(一共25-11+1条)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">	LIMIT 10,</span><br><span class="line">	15;#索引从0开始 #索引从0开始</span><br></pre></td></tr></table></figure>


<p>案例3：有奖金的 员工信息，并且工资较高的 前10名 显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	commission_pct IS NOT NULL </span><br><span class="line">ORDER BY</span><br><span class="line">	salary DESC </span><br><span class="line">	LIMIT 10;</span><br></pre></td></tr></table></figure>

<h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><p>union 联合 合并</p>
<p>语法：</p>
<pre><code>查询语句1
union
查询语句2
union 
……</code></pre>
<p>应用场景：</p>
<p>要查询的结果来自于多个表，且多个表没有直接的连接关系，但查询的信息一致时</p>
<p>特点：</p>
<ol>
<li>要求多条查询语句的查询列数是一致的</li>
<li>要求多条查询语句的查询的每一列的类型和顺序最好一致</li>
<li>用union会自动去重，不想去重的话就用union all</li>
</ol>
<p>案例1 查询部门编号&gt;90或邮箱包含a的员工信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	email LIKE &#39;%a%&#39; </span><br><span class="line">	OR department_id &gt; 90;</span><br></pre></td></tr></table></figure>

<p><strong>用union</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	email LIKE &#39;%a%&#39; UNION</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	department_id &gt; 90;</span><br></pre></td></tr></table></figure>

<p><strong>上面这个例子看不出来union的意义哈，我看着还怪麻烦</strong></p>
<p>案例2 查询中国用户中男性的信息以及外国用户中年男性的用户信息</p>
<p><strong>我是sql8.0没test这个库，不过看看代码也能明白他想干啥</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	id,</span><br><span class="line">	cname,</span><br><span class="line">	csex </span><br><span class="line">FROM</span><br><span class="line">	t_ca </span><br><span class="line">WHERE</span><br><span class="line">	csex &#x3D; &quot;男&quot; UNION</span><br><span class="line">SELECT</span><br><span class="line">	t_id,</span><br><span class="line">	tName,</span><br><span class="line">	tGender </span><br><span class="line">FROM</span><br><span class="line">	t_ua </span><br><span class="line">WHERE</span><br><span class="line">	tGender &#x3D; &#39;male&#39;;</span><br></pre></td></tr></table></figure>

<p><strong>奥我懂了，union的好处是当你一个库里 好几个表之间 没有那种可以建立连接的关系，用这个就太方便了</strong></p>
<p><strong>上面这个例子啊，两个表的字段不一样，但是意义却一样，如果内容不一样的话，合不起来</strong></p>
<p><img src="https://s1.ax1x.com/2020/11/01/BwIckD.png"></p>
<h1 id="DML语言"><a href="#DML语言" class="headerlink" title="DML语言"></a>DML语言</h1><pre><code>数据操作语言
插入：insert
修改：update
删除：delete</code></pre>
<h2 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h2><h3 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h3><p><strong>用的多</strong></p>
<pre><code>insert into 表名(列名,...) values(值1，...);</code></pre>
<p>插入的值的类型要与列的类型一致或兼容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM beauty;</span><br><span class="line">INSERT INTO beauty ( id, NAME, sex, borndate, phone, photo, boyfriend_id )</span><br><span class="line">VALUES</span><br><span class="line">	( 13, &#39;唐艺昕&#39;, &#39;女&#39;, &#39;1990-4-23&#39;, &#39;1898888888&#39;, NULL, 2 );</span><br></pre></td></tr></table></figure>

<p>不可以为null的列必须插入值，可以为null的列如何插入值？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#方式1：列名写上，值为null</span><br><span class="line">#方式2：列名省略，值省略</span><br><span class="line"></span><br><span class="line">INSERT INTO beauty ( id, NAME, sex, borndate, phone, boyfriend_id )</span><br><span class="line">VALUES</span><br><span class="line">	( 15, &#39;金星&#39;, &#39;女&#39;, &#39;1986-9-12&#39;, &#39;1898888888&#39;, 2 );</span><br></pre></td></tr></table></figure>

<p>列的顺序可以调换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO beauty ( NAME, sex, id, phone )#乱序字段名</span><br><span class="line">VALUES</span><br><span class="line">	( &#39;蒋欣&#39;, &#39;女&#39;, 14, &#39;110&#39; );</span><br></pre></td></tr></table></figure>

<p>列数和值的个数必须一致</p>
<p><strong>要省必须一起省</strong></p>
<p>错误示范：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO beauty ( NAME, sex, id, phone, boyfriend_id )</span><br><span class="line">VALUES</span><br><span class="line">	( &#39;蒋欣&#39;, &#39;女&#39;, 16, &#39;110&#39; );</span><br></pre></td></tr></table></figure>

<p>可以省略列名，默认是所有列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO beauty</span><br><span class="line">VALUES</span><br><span class="line">	( 18, &#39;马超&#39;, &#39;男&#39;, NULL， &#39;119&#39;, NULL, NULL );</span><br></pre></td></tr></table></figure>
<h3 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into 表名</span><br><span class="line">set 列名 &#x3D; 值，列名 &#x3D; 值...</span><br><span class="line"></span><br><span class="line">INSERT INTO beauty </span><br><span class="line">SET id &#x3D; 16,</span><br><span class="line">NAME &#x3D; &#39;刘涛&#39;,</span><br><span class="line">phone &#x3D; &#39;999&#39;;</span><br></pre></td></tr></table></figure>
<h3 id="2种方式比较"><a href="#2种方式比较" class="headerlink" title="2种方式比较"></a>2种方式比较</h3><h4 id="方式1支持插入多行"><a href="#方式1支持插入多行" class="headerlink" title="方式1支持插入多行"></a>方式1支持插入多行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO beauty</span><br><span class="line">VALUES</span><br><span class="line">	( 23, &#39;唐艺昕1&#39;, &#39;女&#39;, &#39;1990-4-23&#39;, &#39;1898888888&#39;, NULL, 2 ),#逗号</span><br><span class="line">	( 24, &#39;唐艺昕2&#39;, &#39;女&#39;, &#39;1990-4-23&#39;, &#39;1898888888&#39;, NULL, 2 ),</span><br><span class="line">	( 25, &#39;唐艺昕3&#39;, &#39;女&#39;, &#39;1990-4-23&#39;, &#39;1898888888&#39;, NULL, 2 );	</span><br></pre></td></tr></table></figure>

<h4 id="方式1支持子查询，2不支持"><a href="#方式1支持子查询，2不支持" class="headerlink" title="方式1支持子查询，2不支持"></a>方式1支持子查询，2不支持</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO beauty ( id, NAME, phone ) SELECT</span><br><span class="line">26,</span><br><span class="line">&#39;宋茜&#39;,</span><br><span class="line">&#39;11809866&#39;; #这是查询，后面可以继续加FROM、WHERE等查询相关</span><br></pre></td></tr></table></figure>

<h2 id="修改语句"><a href="#修改语句" class="headerlink" title="修改语句"></a>修改语句</h2><h3 id="修改单表的记录"><a href="#修改单表的记录" class="headerlink" title="修改单表的记录"></a>修改单表的记录</h3><p><strong>重点掌握</strong></p>
<p>语法：</p>
<pre><code>update 表名
set 列 = 新值,列 = 新值,#多个用逗号隔开
where 筛选条件;</code></pre>
<p>案例1、修改beauty表中姓唐的女生电话为138277777</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE beauty </span><br><span class="line">SET phone &#x3D; &#39;138277777&#39; </span><br><span class="line">WHERE</span><br><span class="line">	NAME LIKE &#39;唐%&#39;;</span><br></pre></td></tr></table></figure>

<p>案例2：修改boys表中id号为2的名称为张飞，魅力值为10</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE boys </span><br><span class="line">SET boyname &#x3D; &#39;张飞&#39;,</span><br><span class="line">usercp &#x3D; 10 #多列用逗号，可以换位置</span><br><span class="line"></span><br><span class="line">WHERE</span><br><span class="line">	id &#x3D; 2;</span><br></pre></td></tr></table></figure>

<h3 id="修改多表的记录"><a href="#修改多表的记录" class="headerlink" title="修改多表的记录"></a>修改多表的记录</h3><p><strong>补充知识</strong></p>
<p>sql92语法：</p>
<pre><code>update 表1 别名, 表2 别名
set 列=值...
where 连接条件
and 筛选条件;</code></pre>
<p>sql99语法：</p>
<pre><code>update 表1 别名
inner|left|right join 表2 别名
on 连接条件
set 列 = 值...
where 筛选条件;</code></pre>
<p>案例1：修改张无忌的女朋友的手机号为114</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE boys bo</span><br><span class="line">INNER JOIN beauty be ON bo.id &#x3D; be.boyfriend_id </span><br><span class="line">SET be.phone &#x3D; &#39;114&#39; </span><br><span class="line">WHERE</span><br><span class="line">	bo.boyName &#x3D; &#39;张无忌&#39;;</span><br></pre></td></tr></table></figure>

<p>案例2：修改 没有男朋友的女神 的男朋友编号 都为张飞的编号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE boys bo</span><br><span class="line">RIGHT JOIN beauty be ON bo.id &#x3D; be.boyfriend_id</span><br><span class="line">SET be.boyfriend_id &#x3D; 2 </span><br><span class="line">WHERE</span><br><span class="line">	bo.id IS NULL;</span><br></pre></td></tr></table></figure>

<h2 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h2><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p>1.单表的删除【重点掌握】</p>
<pre><code>delete from 表名 where 筛选条件 #删除整行</code></pre>
<p>2.多表的删除【补充知识】</p>
<pre><code>sql92:
    delete 表1的别名, 表2的别名 #删谁写谁，都写都删
    from 表1 别名, 表2 别名
    where 连接条件
    and 筛选条件;
sql99:
    delete 表1的别名,表2的别名 #删谁写谁，都写都删
    from 表1 别名
    inner|left|right join 表2 别名 on 连接条件
    where 筛选条件;</code></pre>
<p>案例1：删除手机号以9结尾的女生信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE </span><br><span class="line">FROM</span><br><span class="line">	beauty </span><br><span class="line">WHERE</span><br><span class="line">	phone LIKE &#39;%9&#39;;</span><br></pre></td></tr></table></figure>

<p>案例2：删除张无忌的女朋友的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE b </span><br><span class="line">FROM</span><br><span class="line">	beauty b</span><br><span class="line">	INNER JOIN boys bo ON b.boyfriend_id &#x3D; bo.id </span><br><span class="line">WHERE</span><br><span class="line">	bo.boyName &#x3D; &#39;张无忌&#39;;</span><br></pre></td></tr></table></figure>

<p>案例3：删除黄晓明的信息，以及他女朋友的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE b,</span><br><span class="line">bo </span><br><span class="line">FROM</span><br><span class="line">	beauty b</span><br><span class="line">	INNER JOIN boys bo ON b.boyfriend_id &#x3D; bo.id </span><br><span class="line">WHERE</span><br><span class="line">	bo.boyName &#x3D; &#39;黄晓明&#39;;</span><br></pre></td></tr></table></figure>

<h3 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h3><pre><code>truncate table 表名</code></pre>
<p>案例：将魅力值&gt;100的男生信息删除</p>
<pre><code>TRUNCATE TABLE boys; #这个语句不能加where，所以一删就都没了，相对于清空了。</code></pre>
<h3 id="delete和truncate区别"><a href="#delete和truncate区别" class="headerlink" title="delete和truncate区别"></a>delete和truncate区别</h3><ol>
<li><p>delete可以加where条件，truncate不可。</p>
</li>
<li><p>truncate删除，效率更高。</p>
</li>
<li><p>假如要删除的表中有自增长列(假设是id)，如果用delete删除后，再插入数据，自增长列的值从断点(上次删除的时候最后一个id是多少，那么插入后就是从它开始往后加)开始；而truncate删除后，再插入数据，自增长列的值从1开始。</p>
</li>
<li><p>truncate删除没有返回值(不会说有几行收到影响)，delete删除有返回值。</p>
</li>
<li><p>truncate删除不能回滚，delete删除可以回滚。</p>
</li>
</ol>
<h1 id="DDL语言"><a href="#DDL语言" class="headerlink" title="DDL语言"></a>DDL语言</h1><p><strong>数据定义语言</strong></p>
<p><strong>库和表的管理</strong></p>
<p>1.库的管理</p>
<pre><code>创建、修改、删除</code></pre>
<p>2.表的管理</p>
<pre><code>创建、修改、删除
创建：create
修改：alter
删除：drop
之前是对数据的操作，现在是库和表。</code></pre>
<h2 id="库的操作"><a href="#库的操作" class="headerlink" title="库的操作"></a>库的操作</h2><h3 id="库的创建"><a href="#库的创建" class="headerlink" title="库的创建"></a>库的创建</h3><pre><code>create database (if not exists) 库名; #如果不存在则创建</code></pre>
<p>创建库books</p>
<pre><code>CREATE DATABASE IF NOT EXISTS books;</code></pre>
<h3 id="库的修改"><a href="#库的修改" class="headerlink" title="库的修改"></a>库的修改</h3><p>基本不修改，可能会导致很多数据丢失错乱</p>
<p>修改库名直接去C盘的MySQL下的data文件夹改名</p>
<p>更改库的字符集</p>
<pre><code>ALTER DATABASE books CHARACTER SET gbk;#一般是utf8</code></pre>
<h3 id="库的删除"><a href="#库的删除" class="headerlink" title="库的删除"></a>库的删除</h3><pre><code>DROP DATABASE IF EXISTS books;</code></pre>
<h2 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h2><h3 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h3><pre><code>creat table 表名(
    列名 列的类型【（长度）约束】，
    列名 列的类型【（长度）约束】，
    列名 列的类型【（长度）约束】，
    ...
    列名 列的类型【（长度）约束】，
)</code></pre>
<p>案例：创建表book</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE book(</span><br><span class="line">	id INT,#编号</span><br><span class="line">	bName VARCHAR(20),#图书名，最多20个字符</span><br><span class="line">	price DOUBLE,#价格</span><br><span class="line">	authorId INT,#作者编号</span><br><span class="line">	publishDate DATETIME#出版日期</span><br><span class="line">	</span><br><span class="line">);</span><br><span class="line">DESC book;#查看</span><br></pre></td></tr></table></figure>

<p>案例：创建表author</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE author(</span><br><span class="line">	id INT,</span><br><span class="line">	au_name VARCHAR(20),</span><br><span class="line">	nation VARCHAR(10)</span><br><span class="line">);</span><br><span class="line">DESC author;</span><br></pre></td></tr></table></figure>

<h3 id="表的修改"><a href="#表的修改" class="headerlink" title="表的修改"></a>表的修改</h3><pre><code>ALTER TABLE 表名 ADD | DROP | MODIFY | CHANGE COLUMN 列名【列名 列类型】</code></pre>
<p>修改列名</p>
<pre><code>ALTER TABLE book CHANGE COLUMN pubishdata pubDate DATETIME;#要加类型,即可以一起修改类型</code></pre>
<p>修改列的类型或约束</p>
<pre><code>ALTER TABLE book MODIFY COLUMN pubdate TIMESTAMP;</code></pre>
<p>添加新列</p>
<pre><code>ALTER TABLE author ADD COLUMN annual DOUBLE;</code></pre>
<p>删除列</p>
<pre><code>ALTER TABLE author DROP COLUMN annual;</code></pre>
<p>修改表名</p>
<pre><code>ALTER TABLE author RENAME TO book_author;</code></pre>
<h3 id="表的删除"><a href="#表的删除" class="headerlink" title="表的删除"></a>表的删除</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE</span><br><span class="line">IF</span><br><span class="line">	EXISTS book_author;</span><br><span class="line">SHOW TABLES;</span><br><span class="line">#通用的写法:</span><br><span class="line">DROP DATABASE</span><br><span class="line">IF</span><br><span class="line">	EXISTS 旧库名;</span><br><span class="line">CREATE DATABASE 新库名； </span><br><span class="line">DROP TABLE</span><br><span class="line">IF</span><br><span class="line">	EXISTS 旧表名;</span><br><span class="line">CREATE TABLE 表名 ();</span><br></pre></td></tr></table></figure>

<h3 id="表的复制"><a href="#表的复制" class="headerlink" title="表的复制"></a>表的复制</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO author</span><br><span class="line">VALUES</span><br><span class="line">	( 1, &#39;村上春树&#39;, &#39;日本&#39; ),</span><br><span class="line">	( 2, &#39;莫言&#39;, &#39;中国&#39; ),</span><br><span class="line">	( 3, &#39;冯唐&#39;, &#39;中国&#39; ),</span><br><span class="line">	( 4, &#39;金庸&#39;, &#39;中国&#39; );</span><br></pre></td></tr></table></figure>

<p>1.仅仅复制表的结构</p>
<pre><code>CREATE TABLE copy LIKE author;
#复制一个叫copy的表</code></pre>
<p>2.复制表的结构+数据</p>
<pre><code>CREATE TABLE copy2 SELECT
* 
FROM
    author;</code></pre>
<p>3.只复制部分数据</p>
<pre><code>CREATE TABLE copy3 SELECT
id,
au_name 
FROM
    author 
WHERE
    nation = &#39;中国&#39;;</code></pre>
<p>4.仅仅复制某些字段</p>
<p><strong>只想要结构，不要数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE copy4 SELECT</span><br><span class="line">id,</span><br><span class="line">au_name </span><br><span class="line">FROM</span><br><span class="line">	author </span><br><span class="line">WHERE</span><br><span class="line">	0; #条件不满足，恒不成立，空列就过去了</span><br></pre></td></tr></table></figure>

<h2 id="常见的数据类型"><a href="#常见的数据类型" class="headerlink" title="常见的数据类型"></a>常见的数据类型</h2><p>数值型：</p>
<pre><code>整型
小数：定点数，浮点数</code></pre>
<p>字符型：</p>
<pre><code>较短的文本：char、varchar
较长的文本：text、blob（较长的二进制数据）</code></pre>
<p>日期型</p>
<h3 id="数值型-整型"><a href="#数值型-整型" class="headerlink" title="数值型 - 整型"></a>数值型 - 整型</h3><p>分类：</p>
<pre><code>整数类型：
    tinyint、smallint、mediumint、int/interger、bigint
字节：
    1         2          3           4          8</code></pre>
<p>特点：</p>
<ul>
<li>如果不设置有符号还是无符号，默认是有符号，若想设置无符号，要加unsigned</li>
<li>如果插入的数值超出整型范围，会报out of range异常，并插入临界值</li>
<li>如果不设置长度，会有默认长度</li>
<li>长度代表了现实的最大宽度，如果不够会用0在左边填充，但必须搭配ZEROFILL使用</li>
</ul>
<p>如何设置有符号和无符号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tab_int(</span><br><span class="line">	t1 INT,  		 #有符号,能插入负数</span><br><span class="line">	t2 INT UNSIGNED  #无符号</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tab_int(</span><br><span class="line">	t1 INT(7) ZEROFILL,  #零填充，支持正数，不支持负数</span><br><span class="line">	t2 INT UNSIGNED  #无符号</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_int VALUES(123,123);</span><br></pre></td></tr></table></figure>

<p>第一个123会在前面填充四个0，因为不加ZEROFILL的宽度是无效的</p>
<h3 id="数值型-小数"><a href="#数值型-小数" class="headerlink" title="数值型 - 小数"></a>数值型 - 小数</h3><p>分类：</p>
<pre><code>浮点型
    float(M,D)
    double(M,D)

定点型
    dec(M,D)
    decimal(M,D)</code></pre>
<p>特点：</p>
<pre><code>M：整数部位+小数部位 的长度
 D： 小数部位
 M和D都可以省略

M和D都可以省略
 如果是decimal，默认M为10，D为0
 而float和double会根据插入的数值的精度来决定精度

 ③定点型的精确度较高，适用于插入数值的精度要求较高，如货币运算</code></pre>
<p>测试M和D</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE tab_float;</span><br><span class="line">CREATE TABLE tab_float(</span><br><span class="line">	f1 FLOAT(5,2),</span><br><span class="line">	f2 DOUBLE(5,2),  #小数点保留两位</span><br><span class="line">	f3 DECIMAL(5,2)</span><br><span class="line">);</span><br><span class="line">SELECT * FROM tab_float;</span><br><span class="line">INSERT INTO tab_float VALUES(123.45,123.45,123.45);</span><br><span class="line">INSERT INTO tab_float VALUES(123.456,123.456,123.456);#四舍五入插入123.46</span><br><span class="line">INSERT INTO tab_float VALUES(123.4,123.4,123.4);#凑两位小数变成123.40</span><br><span class="line">INSERT INTO tab_float VALUES(1523.4,1523.4,1523.4);#临界值999.99</span><br></pre></td></tr></table></figure>
<p><strong>原则</strong>：所选择的类型越简单越好，能保存数值的类型越小越好</p>
<h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>较短的文本：</p>
<pre><code>char
varchar</code></pre>
<p>较长的文本：</p>
<pre><code>text
blob（较大的二进制）</code></pre>
<p>特点:</p>
<pre><code>写法              M的意思            特点       空间的耗费    效率
char     char(M)    最大的字符数      固定长度的字符    比较节省         高
               （char的M可以省略，默认为1）
varchar      varchar(M)   最大的字符数       可变长度的字符     比较浪费         低</code></pre>
<p>举例：</p>
<pre><code>sex字段可以用char吧，name字段可以用varchar吧</code></pre>
<p><strong>enum</strong>：要求插入的值必须属于列表中指定的值之一，不区分大小写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tab_char(</span><br><span class="line">	c1 ENUM(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_char VALUES(&#39;a&#39;);</span><br><span class="line">INSERT INTO tab_char VALUES(&#39;b&#39;);</span><br><span class="line">INSERT INTO tab_char VALUES(&#39;c&#39;);</span><br><span class="line">INSERT INTO tab_char VALUES(&#39;m&#39;);#插入失败</span><br><span class="line">INSERT INTO tab_char VALUES(&#39;A&#39;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM tab_char;#表中只有四项，abca</span><br></pre></td></tr></table></figure>

<p><strong>set</strong>：集合，和enum类似，和enum最大的区别是，set类型一次可以选取多个成员，而enum只能选一个，都是一种限制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tab_set(</span><br><span class="line">	s1 SET(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;)</span><br><span class="line">);</span><br><span class="line">INSERT INTO tab_char VALUES(&#39;a&#39;);</span><br><span class="line">INSERT INTO tab_char VALUES(&#39;a,b&#39;);</span><br><span class="line">INSERT INTO tab_char VALUES(&#39;a,b,c&#39;);</span><br></pre></td></tr></table></figure>

<h3 id="日期型"><a href="#日期型" class="headerlink" title="日期型"></a>日期型</h3><p>分类：</p>
<pre><code>date只保存日期
time只保存时间
year只保存年

datetime保存日期+时间
timestamp保存日期+时间</code></pre>
<p>特点：</p>
<pre><code>①datetime：字节8个，范围1000-9999年，不受时区影响
②timestamp：字节4个，范围1970-2038年，受时区影响</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tab_date(</span><br><span class="line">	t1 DATETIME,</span><br><span class="line">	t2 TIMESTAMP            #时间戳</span><br><span class="line">);</span><br><span class="line">INSERT INTO tab_date VALUES(NOW(),NOW());</span><br><span class="line">SELECT * FROM tab_date;</span><br><span class="line">SHOW VARIABLES LIKE &#39;time_zone&#39;;</span><br><span class="line">SET time_zone &#x3D; &#39;+9:00&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h2><pre><code>CREATE TABLE 表名(
    字段名 字段类型 列级约束，
    字段名 字段类型，
    表级约束
);</code></pre>
<p>含义：一种限制，用于限制表中的行或列数据，为了保证表中数据的准确性和可靠性</p>
<p>分类：六大约束</p>
<p><strong>not null</strong>:非空，用于保证该字段的值不能为空。</p>
<p>比如姓名、学号等</p>
<p><strong>default</strong>：默认，用于保证该字段有默认值。</p>
<p>比如性别</p>
<p><strong>primary key</strong>：主键，用于保证该字段的值有唯一性，并且非空。</p>
<p>比如学号、员工编号</p>
<p><strong>unique</strong>：唯一，保证该字段的值有唯一性，可以为空。</p>
<p>比如座位号</p>
<p><strong>check</strong>：检查约束【mysql中不支持】。</p>
<p>比如年龄性别</p>
<p><strong>foreign key</strong>：外键，用于限制两个表的关系，用于保证该字段值必须来自于主表关联列的值。</p>
<p>在从表添加 外键约束，用于引用主表中某列的值。</p>
<p>比如：员工表的部门编号、工种号</p>
<p>添加约束的时间：</p>
<pre><code>1.创建表时
2.修改表时</code></pre>
<p>约束的添加分类：</p>
<pre><code>1.列级约束：
    六大约束语法上都支持，但外键约束没有效果
2.表级约束：
    除了非空、默认约束，其他都支持</code></pre>
<h3 id="创建表时添加约束"><a href="#创建表时添加约束" class="headerlink" title="创建表时添加约束"></a>创建表时添加约束</h3><h4 id="添加列级约束"><a href="#添加列级约束" class="headerlink" title="添加列级约束"></a>添加列级约束</h4><p>语法：直接在字段名和字段类型后面追加约束类型即可</p>
<p>只支持：默认、非空、主键、唯一; </p>
<p>一个列可以添加多个列级约束</p>
<p>代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE students;</span><br><span class="line">USE students;</span><br><span class="line"></span><br><span class="line">CREATE TABLE stuinfo(</span><br><span class="line">	id INT PRIMARY KEY,#主键</span><br><span class="line">	stuName VARCHAR(20) NOT NULL,#非空</span><br><span class="line">	gender CHAR(1) CHECK(gender&#x3D;&#39;男&#39; OR gender&#x3D;&#39;女&#39;),#检查，虽然没效果</span><br><span class="line">	seat INT UNIQUE,#唯一</span><br><span class="line">	age INT DEFAULT 18, #默认约束</span><br><span class="line">	majorId INT </span><br><span class="line">)；</span><br><span class="line">CREATE TABLE major(</span><br><span class="line">	id INT PRIMARY KEY,</span><br><span class="line">	majorName VARCHAR(20)</span><br><span class="line">);</span><br><span class="line">DESC stuinfo;</span><br></pre></td></tr></table></figure>

<p>查看表中所有的索引，包括主键，外键，唯一</p>
<pre><code>SHOW INDEX FROM stuinfo;</code></pre>
<h4 id="添加表级约束"><a href="#添加表级约束" class="headerlink" title="添加表级约束"></a>添加表级约束</h4><p>非空默认不支持</p>
<p>语法：在各个字段的最下面</p>
<pre><code>[constraint] 约束名 约束类型(字段名)
括号里可不加</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS stuinfo;</span><br><span class="line">CREATE TABLE stuinfo(</span><br><span class="line">	id INT,</span><br><span class="line">	stuname VARCHAR(20),</span><br><span class="line">	gender CHAR(1),</span><br><span class="line">	seat INT,</span><br><span class="line">	age INT,</span><br><span class="line">	majorid INT,</span><br><span class="line">	#来了</span><br><span class="line">	CONSTRAINT pk PRIMARY KEY(id),#主键，括号里面 为谁加，主键这里的约束名pk是没有意义的</span><br><span class="line">	CONSTRAINT uq UNIQUE(seat),#唯一</span><br><span class="line">	CONSTRAINT ck CHECK(gender&#x3D;&#39;男&#39; OR gender&#x3D;&#39;女&#39;),#检查</span><br><span class="line">	CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id)	#外键</span><br><span class="line">);</span><br><span class="line">SHOW INDEX FROM stuinfo;#看所有的索引</span><br></pre></td></tr></table></figure>

<p>通用的写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS stuinfo(</span><br><span class="line">	id INT PRIMARY KEY,</span><br><span class="line">	stuname VARCHAR(20) NOT NULL,</span><br><span class="line">	gender CHAR(1),</span><br><span class="line">	age INT DEFAULT 18,</span><br><span class="line">	seat INT UNIQUE,</span><br><span class="line">	majorid INT,</span><br><span class="line">	CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id) #外键名fk_stuinfo_major</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>主键和唯一的对比</strong></p>
<ul>
<li>主键和唯一都能保证唯一性。但主键不允许为空，唯一允许。</li>
<li>一个表中最多只能有一个主键，而唯一键可以有多个。</li>
<li>可以组合，多个列可以组合成一个主键或唯一键，但需注意 此时仍然代表一个，而不是多个主键或唯一。</li>
<li>如果写成primary key(id,stuname)是联合主键的效果，要两个同时重复才会报错。</li>
<li>不推荐用组合。</li>
</ul>
<p>外键</p>
<ul>
<li>要求从表设置成外键关系</li>
<li>从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求</li>
<li>主表的关联列必须是一个key（一般是主键、唯一）</li>
<li>插入数据时，必须先插入主表，再插入从表；删除时先删除从表，再删除主表（例子中，主表是major）</li>
</ul>
<p>列级约束和表级约束</p>
<ul>
<li>列级约束：位置—列的后面。支持的约束类型：语法都支持，但外键没有效果</li>
<li>表级约束：位置—所有列的下面。支持的约束类型：默认和为空除外</li>
<li>是否可以起约束名：列级约束不可以，表级约束可以（但是对主键起名无效</li>
<li><h3 id="修改表时添加约束"><a href="#修改表时添加约束" class="headerlink" title="修改表时添加约束"></a>修改表时添加约束</h3></li>
</ul>
<p>添加列级约束</p>
<pre><code>alter table 表名 modify column 字段名 字段类型 新约束;</code></pre>
<p>添加表级约束</p>
<pre><code>alter table 表名 add 【constraint 约束名】 约束类型（字段名）;</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS stuinfo;</span><br><span class="line">CREATE TABLE stuinfo(</span><br><span class="line">	id INT,</span><br><span class="line">	stuname VARCHAR(20),</span><br><span class="line">	gender CHAR(1),</span><br><span class="line">	seat INT,</span><br><span class="line">	age INT,</span><br><span class="line">	majorid INT</span><br><span class="line">);</span><br><span class="line">DESC stuinfo;</span><br></pre></td></tr></table></figure>

<h4 id="添加非空约束"><a href="#添加非空约束" class="headerlink" title="添加非空约束"></a>添加非空约束</h4><pre><code>ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NOT NULL;</code></pre>
<h4 id="添加默认约束"><a href="#添加默认约束" class="headerlink" title="添加默认约束"></a>添加默认约束</h4><pre><code>ALTER TABLE stuinfo MODIFY COLUMN age INT DEFAULT 18;</code></pre>
<h4 id="添加主键（记一种就行）"><a href="#添加主键（记一种就行）" class="headerlink" title="添加主键（记一种就行）"></a>添加主键（记一种就行）</h4><pre><code>ALTER TABLE stuinfo MODIFY COLUMN id INT PRIMARY KEY;#列级约束
ALTER TABLE stuinfo ADD PRIMARY KEY(id);#表级约束</code></pre>
<h4 id="添加唯一"><a href="#添加唯一" class="headerlink" title="添加唯一"></a>添加唯一</h4><pre><code>ALTER TABLE stuinfo MODIFY COLUMN seat INT UNIQUE;</code></pre>
<h4 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h4><pre><code>ALTER TABLE stuinfo ADD FOREIGN KEY(majorid) REFERENCES major(id);</code></pre>
<h3 id="修改表时删除约束"><a href="#修改表时删除约束" class="headerlink" title="修改表时删除约束"></a>修改表时删除约束</h3><h4 id="删除非空约束"><a href="#删除非空约束" class="headerlink" title="删除非空约束"></a>删除非空约束</h4><pre><code>ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NULL;</code></pre>
<h4 id="删除默认约束"><a href="#删除默认约束" class="headerlink" title="删除默认约束"></a>删除默认约束</h4><pre><code>ALTER TABLE stuinfo MODIFY COLUMN age INT;</code></pre>
<h4 id="删除主键"><a href="#删除主键" class="headerlink" title="删除主键"></a>删除主键</h4><pre><code>ALTER TABLE stuinfo DROP PRIMARY KEY;</code></pre>
<h4 id="删除唯一"><a href="#删除唯一" class="headerlink" title="删除唯一"></a>删除唯一</h4><pre><code>ALTER TABLE stuinfo DROP INDEX seat;</code></pre>
<h4 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h4><pre><code>ALTER TABLE stuinfo DROP FOREIGN  KEY fk_stuinfo_major;</code></pre>
<h3 id="标识列"><a href="#标识列" class="headerlink" title="标识列"></a>标识列</h3><p>又称为自增长列</p>
<p>含义：就比如id列，没有标识列的话，你得自己输入123456保证不重复，麻烦，所以标识列可以不用手动插入值，系统提供默认的序列</p>
<p>特点：</p>
<p>1.标识列必须和主键搭配吗？<br>不一定，但要求是一个key（主键外键唯一）</p>
<p>2.一个表中只可以有至多一个标识列</p>
<p>3.标识列的类型只能是数值型</p>
<p>4.标识列可以通过SET auto_increment_increment设置步长，也可以通过手动插入值设置起始值</p>
<p>创建表时设置标识列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS tab_identity;</span><br><span class="line"></span><br><span class="line">CREATE TABLE tab_identity(</span><br><span class="line">	id INT PRIMARY KEY AUTO_INCREMENT,#AUTO_INCREMENT自动增长</span><br><span class="line">	NAME VARCHAR(20)</span><br><span class="line">);</span><br><span class="line">TRUNCATE TABLE tab_identity;</span><br><span class="line">INSERT INTO tab_identity VALUES(NULL,&#39;john&#39;);#不用修改就可以执行，会自动编号</span><br><span class="line">SELECT * FROM tab_identity;</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#39;%auto_increment%&#39;;</span><br><span class="line"></span><br><span class="line">SET auto_increment_increment&#x3D;3;#把自增长的步长改为3，起始值mysql不支持设置，但步长可以</span><br><span class="line">#有个更改起始值的办法：</span><br><span class="line">INSERT INTO tab_identity VALUES(10,&#39;john&#39;);</span><br><span class="line">INSERT INTO tab_identity VALUES(NULL,&#39;john&#39;);#这样就会从10开始，步长还是上面设置的3，即达到设置起始值的效果</span><br></pre></td></tr></table></figure>

<p>修改表时设置标识列</p>
<pre><code>ALTER TABLE tab_identity MODIFY COLUMN id INT PRIMARY KEY AUTO_INCREMENT;</code></pre>
<p>修改表时删除标识列</p>
<pre><code>ALTER TABLE tab_identity MODIFY COLUMN id INT;</code></pre>
<h1 id="TCL语言"><a href="#TCL语言" class="headerlink" title="TCL语言"></a>TCL语言</h1><h2 id="事务和事务处理"><a href="#事务和事务处理" class="headerlink" title="事务和事务处理"></a>事务和事务处理</h2><p>Transaction Control Language 事务控制语言</p>
<p>事务：</p>
<p>一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行。如果单元中某条sql语句一旦执行失败或产生错误，整个单元将会回滚。</p>
<p>(回滚：把操作撤销，回到最初状态)</p>
<p>案例 – 转账</p>
<pre><code>张三丰    1000
郭襄        1000
update 表 set 张三丰的余额=500 where name=&quot;张三丰&quot;;
update 表 set 张三丰的余额=1500 where name=&quot;郭襄&quot;;</code></pre>
<p>为防止一些原因造成的上面第一句执行成功，第二句无法执行的现象出现，引入事务，使得其作为一个整体一起成功或失败，不允许半截拉块的情况出现</p>
<p>存储引擎：</p>
<pre><code>在mysql中的数据用各种不同的技术存储在文件（或内存）中。
通过show engines查看。
比如InnoDB，MyISAM，MEMORY；不是所有的存储引擎都支持事务，Innodb就支持事务。</code></pre>
<p>事务的ACID属性</p>
<p>原子性</p>
<pre><code>原子性是指事务是一个不可分割的工作单位，要么都发生要么都不发生。</code></pre>
<p>一致性</p>
<pre><code>事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</code></pre>
<p>隔离性</p>
<pre><code>事物的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及是用的数据对并发的其他事物是隔离的，并发执行的各个事务之间不难相互干扰。
但有的会受干扰，需要看隔离级别</code></pre>
<p>持久性</p>
<pre><code>一个事务一旦提交，将会永久地改变数据库的数据</code></pre>
<h2 id="事务的创建"><a href="#事务的创建" class="headerlink" title="事务的创建"></a>事务的创建</h2><p>隐式事务：事务没有明显的开启和结束的标记</p>
<pre><code>比如select、insert、update、delete语句  增删改查
SHOW VARIABLES LIKE &#39;%autocommit%&#39;;#自动开启的，value=on
delete from 表 where id=1；</code></pre>
<p>显式事务：事务具有明显的开启和结束的标记</p>
<p>前提：必须先设置自动提交功能为禁用</p>
<pre><code>set autocommit=0;
SHOW VARIABLES LIKE &#39;%autocommit%&#39;;#value=off</code></pre>
<p>步骤1：开启事务</p>
<pre><code>set autocommit=0;
start transaction;#可选的</code></pre>
<p>步骤2：编写事务中的sql语句(select,insert,update,delete增删改查，不包括create，drop这些)</p>
<pre><code>语句1;
语句2;
...</code></pre>
<p>步骤3：结束事务</p>
<pre><code>commit;提交事务
rollback;回滚事务
save point 节点名;#设置保存点</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE test;</span><br><span class="line"></span><br><span class="line">CREATE TABLE account(</span><br><span class="line">	id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">	username VARCHAR(20),</span><br><span class="line">	balance DOUBLE</span><br><span class="line">);</span><br><span class="line">INSERT INTO account(username,balance)</span><br><span class="line">VALUES(&#39;张无忌&#39;,1000),(&#39;赵敏&#39;,1000);</span><br></pre></td></tr></table></figure>

<p>演示事务的使用步骤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#开启事务	</span><br><span class="line">SET autocommit&#x3D;0;</span><br><span class="line"></span><br><span class="line">#编写一组事务的语句</span><br><span class="line">UPDATE account SET balance&#x3D;500 WHERE username&#x3D;&#39;张无忌&#39;;</span><br><span class="line">UPDATE account SET balance&#x3D;1500 WHERE username&#x3D;&#39;赵敏&#39;;</span><br><span class="line"></span><br><span class="line">#结束事务</span><br><span class="line">commit;</span><br><span class="line">#ROLLBACK;#执行回滚把上一句注释掉，并把500,1500改成1000,1000，执行，发现还是500,1500</span><br><span class="line"></span><br><span class="line">SELECT * FROM account;</span><br></pre></td></tr></table></figure>

<h2 id="事务的并发问题"><a href="#事务的并发问题" class="headerlink" title="事务的并发问题"></a>事务的并发问题</h2><p>对于同时运行的多个事务，当这些事务访问<strong>数据库中相同的数据</strong>时，如果没有采取有必要的隔离机制，会导致各种并发问题。</p>
<p><strong>脏读</strong>：对于两个事务T1,T2，T1读取了已经被T2更新但还没有被提交的字段，之后，若T2回滚，T1读取的内容就是临时且无效的</p>
<p><strong>不可重复读</strong>：对于两个事物t1，t2，t1读取了一个字段，然后t2更新了该字段，之后，t1再次读取同一个字段，值就不同了</p>
<p><strong>幻读</strong>：对于两个事务t1，t2，t1从一个表中读取了一个字段，然后t2在该表中插入了一些新的行。之后，如果t1再次读取同一个表，就会多出几行（和脏读有点相似，但脏读一般是针对更新，幻读针对插入、删除）</p>
<p>女朋友要给我打钱，今天突然多打了一个零，连忙撤销，我看到这个的数据临时有效，就是脏读；我刷新了数据发现女朋友已经撤销了之前的命令，因为并没有提交，所以我看到我的银行卡上多的那个零已经没有了，同样的东西，两次不一样的结果就是不可重复读；我有了钱了，我想请银行大厅的各位吃饭，一共两个人，我低头看了一下手机，再抬头的时候发现是三个人一共，这就是幻读。</p>
<p>通过设置事务的隔离级别来避免这些现象</p>
<p><strong>四种事务隔离级别</strong></p>
<p>READ UNCOMMITTED（读未提交数据）：允许事务读取未被其他事物提交的变更，脏读、不可重复读和幻读的问题都会出现</p>
<p>READ COMMITED（读已提交数据）:只允许事务读取已经被其他事务提交的变更。可以避免脏读，但不可避免不可重复读和幻读。</p>
<p>REPEATABLE READ（可重复读）：确保事务可以多次从一个字段中读取相同的值。在这个事务持续期间，禁止其他事物对这个字段进行更新。可以避免脏读和不可重复读，但存在幻读。</p>
<p>SERIALIZABLE（串行化）：确保事务可以从一个表中读取相同的行。在这个事务持续期间，禁止其他事务对该表进行插入、更新和删除，所有并发问题都可以避免，但性能低下。</p>
<p>mysql中默认第三个隔离级别 repeatable read；</p>
<p>oracle中默认第二个隔离级别 read committed；</p>
<p>查看当前隔离级别</p>
<pre><code>SELECT @@transaction_isolation;</code></pre>
<p>设置当前连接的隔离级别</p>
<pre><code>set transaction isolation level read committed;</code></pre>
<p>设置数据库系统全局的隔离级别</p>
<pre><code>set global transaction isolation level read committed;</code></pre>
<p>演示delete</p>
<pre><code>SET autocommit=0;
START TRANSACTION;
DELETE FROM account;
ROLLBACK;#回滚成功</code></pre>
<p>演示truncate</p>
<pre><code>SET autocommit=0;
START TRANSACTION;
TRUNCATE TABLE account;
ROLLBACK;#没有回滚，实际删除了</code></pre>
<p>演示savepoint的使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#设置节点保存点</span><br><span class="line">SET autocommit&#x3D;0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">DELETE FROM account WHERE id&#x3D;25;</span><br><span class="line">SAVEPOINT a;#设置保存点</span><br><span class="line">DELETE FROM account WHERE id&#x3D;28;</span><br><span class="line">ROLLBACK TO a;#回滚到保存点</span><br><span class="line"></span><br><span class="line">SELECT * FROM account;#25号删了，28号没删</span><br></pre></td></tr></table></figure>

<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="初识视图"><a href="#初识视图" class="headerlink" title="初识视图"></a>初识视图</h2><p>含义：虚拟表，和普通表一样使用<br>是通过表动态生成的数据，只保存sql逻辑，不保存查询结果</p>
<p>比如:舞蹈班和普通版的对比</p>
<p>视图：create view，只是保存了sql逻辑，语法允许增删改查（一般不能增删改，只用来查）</p>
<p>表：create table，保存了数据，增删改查</p>
<p>案例：查询姓张的学生名和专业名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE VIEW v1 #在这</span><br><span class="line">AS SELECT</span><br><span class="line">	stuname,</span><br><span class="line">	majorName </span><br><span class="line">FROM</span><br><span class="line">	stuinfo s</span><br><span class="line">	INNER JOIN major m ON s.majorid &#x3D; m.id;</span><br><span class="line">#</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	v1 </span><br><span class="line">WHERE</span><br><span class="line">	stuname LIKE &#39;张%&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><p>语法：</p>
<pre><code>creat view 视图名
as 查询语句;</code></pre>
<p>查询姓名中包含a字符的员工名、部门名、工种信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建</span><br><span class="line">CREATE VIEW myv1 AS SELECT</span><br><span class="line">last_name,</span><br><span class="line">department_name,</span><br><span class="line">job_title </span><br><span class="line">FROM</span><br><span class="line">	employees e</span><br><span class="line">	JOIN departments d ON e.department_id &#x3D; d.department_id</span><br><span class="line">	JOIN jobs j ON j.job_id &#x3D; e.job_id;#上面跟查询都一样，就是加上视图的部分</span><br><span class="line">#</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	myv1 </span><br><span class="line">WHERE</span><br><span class="line">	last_name LIKE &#39;%a%&#39;;</span><br></pre></td></tr></table></figure>

<p>查询各部门的平均工资级别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建视图查看每个部门平均工资，myv2就像一个表</span><br><span class="line">CREATE VIEW myv2 AS SELECT</span><br><span class="line">AVG( salary ) ag,</span><br><span class="line">department_id </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">GROUP BY</span><br><span class="line">	department_id;</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	myv2;</span><br><span class="line">#</span><br><span class="line">SELECT</span><br><span class="line">	myv2.ag,</span><br><span class="line">	g.grade_level </span><br><span class="line">FROM</span><br><span class="line">	myv2</span><br><span class="line">	JOIN job_grades g ON myv2.ag BETWEEN g.lowest_sal </span><br><span class="line">	AND g.highest_sal;#原来需要子查询，也可以把这两段用一个视图做</span><br></pre></td></tr></table></figure>

<p>查询平均最低的工资信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#在视图myv2里</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	myv2 </span><br><span class="line">ORDER BY</span><br><span class="line">	ag </span><br><span class="line">	LIMIT 1;</span><br></pre></td></tr></table></figure>

<p>查询平均工资最低的部门名和工资</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE VIEW myv3 AS SELECT</span><br><span class="line">* </span><br><span class="line">FROM</span><br><span class="line">	myv2 </span><br><span class="line">ORDER BY</span><br><span class="line">	ag </span><br><span class="line">	LIMIT 1;</span><br><span class="line">#</span><br><span class="line">SELECT</span><br><span class="line">	d.*,</span><br><span class="line">	m.ag </span><br><span class="line">FROM</span><br><span class="line">	myv3 m</span><br><span class="line">	JOIN departments d ON m.department_id &#x3D; d.department_id;</span><br></pre></td></tr></table></figure>


<ol>
<li>重用sql语句</li>
<li>简化复杂的sql操作，不必知道他的查询细节</li>
<li>保护数据，提高安全性；比如中国移动仅给别人提供手机号，不提供原表。</li>
</ol>
<h2 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h2><h3 id="方式1-1"><a href="#方式1-1" class="headerlink" title="方式1"></a>方式1</h3><pre><code>create or replace view 视图名
as 查询语句; #存在则修改，不存在则创建

CREATE 
    OR REPLACE VIEW myv3 AS SELECT
    AVG( salary ),
    job_id 
FROM
    employees 
GROUP BY
    job_id;</code></pre>
<h3 id="方式2-1"><a href="#方式2-1" class="headerlink" title="方式2"></a>方式2</h3><pre><code>alter view 视图名
as 查询语句;

ALTER VIEW myv3 AS SELECT
* 
FROM
    employees;</code></pre>
<h2 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h2><pre><code>DROP VIEW myv1,
myv2,
myv3;</code></pre>
<h2 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h2><pre><code>DESC myv3;
SHOW CREATE VIEW myv3;</code></pre>
<h2 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h2><pre><code>CREATE 
        OR REPLACE VIEW myv1 AS SELECT
        last_name,
        email,
        salary*12*(1+IFNULL(commission_pct,0)) &#39;annual salary&#39;
    FROM
        employees;
    SELECT
        * 
    FROM
        myv1;</code></pre>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><pre><code>INSERT INTO myv1
VALUES
    ( &#39;张飞&#39;, &#39;zf@qq.com&#39; );
SELECT
    * 
FROM
    employees;#也插入了张飞</code></pre>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><pre><code>UPDATE myv1 
SET last_name = &#39;张无忌&#39; 
WHERE
    last_name = &#39;张飞&#39;;</code></pre>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre><code>DELETE 
FROM
    myv1 
WHERE
    last_name = &#39;张无忌&#39;;</code></pre>
<p><strong>具备以下特点的视图不能更新</strong></p>
<p>就是说 复杂的视图 都不允许</p>
<p>1.包含以下关键字的sql语句：分组函数、distinct、group by、having、union或者union all</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE </span><br><span class="line">	OR REPLACE VIEW myv1 AS SELECT</span><br><span class="line">	MAX( salary ) m,</span><br><span class="line">	department_id </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">GROUP BY</span><br><span class="line">	department_id;</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	myv1;</span><br><span class="line">#更新(错误)</span><br><span class="line">UPDATE myv1 </span><br><span class="line">SET m &#x3D; 9000 </span><br><span class="line">WHERE</span><br><span class="line">	department_id &#x3D; 10;	</span><br></pre></td></tr></table></figure>

<p>2.常量视图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE </span><br><span class="line">	OR REPLACE VIEW myv2 AS SELECT</span><br><span class="line">	&#39;john&#39; NAME;</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	myv2;</span><br><span class="line"></span><br><span class="line">#更新（错误）</span><br><span class="line">UPDATE myv2 </span><br><span class="line">SET NAME &#x3D; &#39;lucy&#39;;	</span><br></pre></td></tr></table></figure>

<p>3.select中包含子查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE </span><br><span class="line">	OR REPLACE VIEW myv3 AS SELECT</span><br><span class="line">	( SELECT MAX( salary ) FROM employees ) 最高工资 </span><br><span class="line">#更新，错误</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	myv3;</span><br><span class="line">UPDATE myv3 </span><br><span class="line">SET 最高工资 &#x3D; 10000;</span><br></pre></td></tr></table></figure>

<p>4.join</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE </span><br><span class="line">	OR REPLACE VIEW myv4 AS SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	department_name </span><br><span class="line">FROM</span><br><span class="line">	employees e</span><br><span class="line">	JOIN departments d ON e.department_id &#x3D; d.department_id;</span><br><span class="line"></span><br><span class="line">#更新（可以）</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	myv4;</span><br><span class="line">UPDATE myv4 </span><br><span class="line">SET last_name &#x3D; &#39;张飞&#39; </span><br><span class="line">WHERE</span><br><span class="line">	last_name &#x3D; &#39;whalen&#39;;</span><br><span class="line">#插入（报错）</span><br><span class="line">INSERT INTO myv4</span><br><span class="line">VALUES</span><br><span class="line">	( &#39;陈真&#39;, &#39;xxxx&#39; );</span><br></pre></td></tr></table></figure>

<p>5.from一个不能更新的视图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE </span><br><span class="line">	OR REPLACE VIEW myv5 AS SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	myv3;#更新</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	myv5;</span><br><span class="line">UPDATE myv5 </span><br><span class="line">SET 最高工资 &#x3D; 10000 </span><br><span class="line">WHERE</span><br><span class="line">	department_id &#x3D; 60;</span><br></pre></td></tr></table></figure>


<p>6.where子句的子查询引用了from子句中的表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE </span><br><span class="line">	OR REPLACE VIEW myv6 AS SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	email,</span><br><span class="line">	salary </span><br><span class="line">FROM</span><br><span class="line">	employees </span><br><span class="line">WHERE</span><br><span class="line">	employee_id IN ( SELECT manager_id FROM employees WHERE manager_id IS NOT NULL );</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	myv6;</span><br><span class="line"></span><br><span class="line">#更新（错误）</span><br><span class="line">UPDATE myv6 </span><br><span class="line">SET salary &#x3D; 10000 </span><br><span class="line">WHERE</span><br><span class="line">	last_name &#x3D; &#39;K_ing&#39;;</span><br></pre></td></tr></table></figure>

<pre><code>创建语法的关键字        是否实际占用物理空间                使用
视图         create view            只是保存了sql逻辑        增删改查，一般不能增删改
表         create table            保存了数据                    增删改查</code></pre>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h2><p>变量由系统提供，不是用户定义，属于服务器层面</p>
<p>使用的语法：</p>
<p>1.查看所有的系统变量</p>
<pre><code>SHOW GLOBAL VARIABLES;
SHOW SESSION VARIABLES;#会话变量，不写session也行</code></pre>
<p>2.查看满足条件的部分系统变量</p>
<pre><code>SHOW GLOBAL VARIABLES LIKE &#39;%char%&#39;;</code></pre>
<p>3.查看指定的某个系统变量</p>
<pre><code>select @@global.系统变量名;</code></pre>
<p>4.为某个系统变量赋值</p>
<pre><code>方式1：
set global 系统变量名=值;

方式2：
set @@global.系统变量名=值;</code></pre>
<p>会话变量可以将global替换成session，如果是全局级别要加global，不写默认session</p>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>作用域：<br>    服务器每次启动将为所有全局变量赋初始值，针对于所有的会话（连接）有效，但不能跨重启<br>    (服务器重启后修改后的就没用)</p>
<p>1.查看所有的全局变量</p>
<pre><code>SHOW GLOBAL VARIABLES;</code></pre>
<p>2.查看部分的全局变量</p>
<pre><code>SHOW GLOBAL VARIABLES LIKE &#39;%char%&#39;;</code></pre>
<p>3.查看指定全局变量</p>
<pre><code>SELECT @@global.autocommit;
SELECT @@transaction_isolation;</code></pre>
<p>4.为某个指定的全局变量赋值</p>
<pre><code>SET @@global.autocommit = 0;</code></pre>
<h3 id="会话变量"><a href="#会话变量" class="headerlink" title="会话变量"></a>会话变量</h3><p>作用域：仅仅针对于当前会话（连接）有效</p>
<p>1.查看所有的会话变量</p>
<pre><code>SHOW SESSION VARIABLES;
SHOW VARIABLES;</code></pre>
<p>2.查看部分的会话变量</p>
<pre><code>SHOW VARIABLES LIKE &#39;%char%&#39;;</code></pre>
<p>3.查看指定的会话变量</p>
<pre><code>SELECT @@transaction_isolation;
SELECT @@session.transaction_isolation;</code></pre>
<p>4.为某个会话变量赋值</p>
<pre><code>SET @@session.transaction_isolation = &#39;read-uncommitted&#39;;
SET SESSION transaction_isolation = &#39;read-committed&#39;;</code></pre>
<h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2><p>说明：变量是用户自定义的，不是由系统指定的</p>
<p>使用步骤：</p>
<pre><code>声明
赋值
使用、查看、比较、运算等</code></pre>
<h3 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h3><p>作用域：针对当前会话有效，和会话变量的作用域相同</p>
<p>赋值操作符：=或:=</p>
<p><strong>必须加@</strong></p>
<p>1.声明并初始化</p>
<pre><code>SET @用户变量名 = 值;
SET @用户变量名 := 值;
SELECT @用户变量名 := 值;</code></pre>
<p>2.赋值</p>
<pre><code>#方式1：set或select（和初始化一样

    SET @用户变量名 = 值;
    SET @用户变量名 := 值;
    SELECT @用户变量名 := 值;

#方式2：select into

    SELECT 字段 INTO @变量名
    FROM 表;

SELECT
    COUNT(*) INTO @count 
FROM
    employees;</code></pre>
<p>3.使用（查看用户变量）</p>
<pre><code>SELECT @count; #107</code></pre>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>作用域:仅仅在定义它的begin end中有效。</p>
<p>应用在begin end中的第一句话</p>
<p><strong>需要限定类型</strong></p>
<p>1.声明</p>
<pre><code>DECLARE 变量名 类型;
DECLARE 变量名 类型 DEFAULT 值; #类型和值要兼容或一致</code></pre>
<p>2.赋值</p>
<pre><code>#方式1：set或select

    SET 局部变量名=值;
    SET 局部变量名:=值;
    SELECT @局部变量名:=值;

#方式2：select into局部

    SELECT 字段 INTO 变量名
    FROM 表;</code></pre>
<p>3.使用</p>
<pre><code>SELECT 局部变量名;</code></pre>
<p>对比用户变量和局部变量：</p>
<pre><code>作用域                    定义和使用的位置            语法
用户变量        当前会话            会话中的任何地方                必须加@符号，不用限定类型
局部变量        begin end中        只能在begin end中，且为第一句话    一般不用加@符号，需要限定类型</code></pre>
<p>案例：申明两个变量并赋值，求和，并打印</p>
<p>1.用户变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET @m&#x3D;1;</span><br><span class="line">SET @n&#x3D;2;</span><br><span class="line">SET @sum&#x3D;@m+@n;</span><br><span class="line">SELECT @sum;</span><br></pre></td></tr></table></figure>

<p>2.局部变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE m INT DEFAULT 1;</span><br><span class="line">DECLARE n INT DEFAULT 2;</span><br><span class="line">DECLARE SUM INT;</span><br><span class="line">SET SUM &#x3D; m + n;</span><br><span class="line">SELECT SUM;	#报错，因为begin and</span><br></pre></td></tr></table></figure>

<h1 id="存储过程和函数"><a href="#存储过程和函数" class="headerlink" title="存储过程和函数"></a>存储过程和函数</h1><p>好处：</p>
<ul>
<li>提高代码的重用性</li>
<li>简化操作</li>
</ul>
<h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p><strong>小白不大行，大型的会用到，比较复杂</strong></p>
<p>含义：一组预先编译好的sql语句的集合，理解成批处理语句</p>
<p>好处：</p>
<ul>
<li>提高代码的重用性</li>
<li>简化操作</li>
<li>减少了编译次数，并且减少了和数据库服务器的连接次数，提高了效率</li>
</ul>
<h3 id="存储过程的创建"><a href="#存储过程的创建" class="headerlink" title="存储过程的创建"></a>存储过程的创建</h3><p>创建语法</p>
<pre><code>CREATE PROCEDURE 存储过程名(参数列表)
BEGIN
    存储过程体（一组合法的SQL语句）
END</code></pre>
<p>注意：</p>
<p>1.参数列表包含三部分</p>
<pre><code>参数模式 参数名 参数类型
举例：
IN stuname VARCHAR(20)

参数模式：
IN : 该参数可以作为输入，即需要调用方传入值
OUT : 参数可以作为输出，即可以作为返回值
INOUT : 该参数既可以作为输入又可以作为输出，也就是既需要传入值，又可以返回值</code></pre>
<p>2.如果存储过程体只有一句话, BEGIN END 可以省略</p>
<pre><code>存储过程体中每条sql语句结尾必须加分号
存储过程的结尾可以使用 **DELIMITER** 重新设置
语法：
DELIMITER 结束标记
例如：
DELIMITER $ #navicat不加这个标记符号

调用语法
CALL 存储过程名(实参列表);</code></pre>
<h3 id="空参列表"><a href="#空参列表" class="headerlink" title="空参列表"></a>空参列表</h3><p><strong>要在窗口中运行，sqlyog没用</strong></p>
<p>案例：插入到admin表中5条记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	admin;</span><br><span class="line"></span><br><span class="line">DELIMITER </span><br><span class="line">CREATE PROCEDURE myp1 () BEGIN</span><br><span class="line">	INSERT INTO admin ( username, PASSWORD )</span><br><span class="line">	VALUES</span><br><span class="line">		( &#39;john1&#39;, &#39;000&#39; ),(</span><br><span class="line">			&#39;lily&#39;,</span><br><span class="line">			&#39;000&#39; </span><br><span class="line">			),(</span><br><span class="line">			&#39;rose&#39;,</span><br><span class="line">			&#39;000&#39; </span><br><span class="line">			),(</span><br><span class="line">			&#39;jack&#39;,</span><br><span class="line">			&#39;000&#39; </span><br><span class="line">			),(</span><br><span class="line">			&#39;tom&#39;,</span><br><span class="line">			&#39;000&#39; </span><br><span class="line">		);</span><br><span class="line"></span><br><span class="line">END </span><br></pre></td></tr></table></figure>
<pre><code>#调用
CALL myp1() </code></pre>
<h4 id="创建带in模式参数的存储过程"><a href="#创建带in模式参数的存储过程" class="headerlink" title="创建带in模式参数的存储过程"></a>创建带in模式参数的存储过程</h4><p>案例1：创建存储过程实现 根据女生名查询对应的男生信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE PROCEDURE myp2 (</span><br><span class="line">	IN beautyName VARCHAR ( 20 )) BEGIN</span><br><span class="line">	SELECT</span><br><span class="line">		bo.* </span><br><span class="line">	FROM</span><br><span class="line">		boys bo</span><br><span class="line">		RIGHT JOIN beauty be ON bo.id &#x3D; be.boyfriend_id </span><br><span class="line">	WHERE</span><br><span class="line">		be.NAME &#x3D; beautyName;</span><br><span class="line"></span><br><span class="line">END </span><br><span class="line">SET NAMES gbk</span><br><span class="line">CALL myp2 ( &#39;周芷若&#39; )</span><br></pre></td></tr></table></figure>

<p>案例2：创建存储过程，实现用户是否登陆成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE PROCEDURE myp4 (</span><br><span class="line">	IN username VARCHAR ( 20 ),</span><br><span class="line">	IN PASSWORD VARCHAR ( 20 )) BEGIN</span><br><span class="line">	DECLARE</span><br><span class="line">		res INT DEFAULT 0;#声明并初始化</span><br><span class="line">	SELECT</span><br><span class="line">		COUNT(*) INTO res #赋值</span><br><span class="line">		</span><br><span class="line">	FROM</span><br><span class="line">		admin </span><br><span class="line">	WHERE</span><br><span class="line">		admin.username &#x3D; username </span><br><span class="line">		AND admin.PASSWORD &#x3D; PASSWORD;</span><br><span class="line">	SELECT</span><br><span class="line">	IF</span><br><span class="line">		( res &gt; 0, &#39;成功&#39;, &#39;失败&#39; );#使用</span><br><span class="line">	</span><br><span class="line">END </span><br><span class="line">#调用</span><br><span class="line">CALL myp4 ( &#39;张飞&#39;, &#39;888&#39; ) #失败</span><br></pre></td></tr></table></figure>

<h4 id="创建带out模式的存储过程"><a href="#创建带out模式的存储过程" class="headerlink" title="创建带out模式的存储过程"></a>创建带out模式的存储过程</h4><p>案例1：根据女生名返回对应的男生名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE PROCEDURE myp5 (</span><br><span class="line">	IN beautyName VARCHAR ( 20 ),</span><br><span class="line">	OUT boyName VARCHAR ( 20 )) BEGIN</span><br><span class="line">	SELECT</span><br><span class="line">		bo.boyName INTO boyName </span><br><span class="line">	FROM</span><br><span class="line">		boys bo</span><br><span class="line">		INNER JOIN beauty be ON be.boyfriend_id &#x3D; bo.id </span><br><span class="line">	WHERE</span><br><span class="line">		be.NAME &#x3D; beautyName;</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line">SET @bName</span><br><span class="line">CALL myp5(&#39;小昭&#39;,@bName)</span><br><span class="line">SELECT @bName</span><br></pre></td></tr></table></figure>

<p>案例2：根据女生名，返回对应的男生名和魅力值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE PROCEDURE myp6 ( IN beautyName VARCHAR ( 20 ), OUT boyName VARCHAR ( 20 ), OUT userCP INT ) BEGIN</span><br><span class="line">	SELECT</span><br><span class="line">		bo.boyName,</span><br><span class="line">		bo.userCP INTO boyName,</span><br><span class="line">		userCP </span><br><span class="line">	FROM</span><br><span class="line">		boys bo</span><br><span class="line">		INNER JOIN beauty be ON be.boyfriend_id &#x3D; bo.id </span><br><span class="line">	WHERE</span><br><span class="line">		be.NAME &#x3D; beautyName;</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line">CALL myp6 (</span><br><span class="line">	&#39;小昭&#39;,</span><br><span class="line">@bName,</span><br><span class="line">@usercp)</span><br><span class="line">SELECT</span><br><span class="line">	@bName,</span><br><span class="line">	@usercp$</span><br></pre></td></tr></table></figure>

<h4 id="创建带in，out模式参数的存储过程"><a href="#创建带in，out模式参数的存储过程" class="headerlink" title="创建带in，out模式参数的存储过程"></a>创建带in，out模式参数的存储过程</h4><p>案例1：传入a和b两个值，最终a和b都翻倍并返回</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE PROCEDURE myp7 ( INOUT a INT, INOUT b INT ) BEGIN</span><br><span class="line">	SET a &#x3D; a * 2;</span><br><span class="line">	</span><br><span class="line">	SET b &#x3D; b * 2;</span><br><span class="line">END </span><br><span class="line"></span><br><span class="line">SET @m&#x3D;10</span><br><span class="line">SET @n&#x3D;20</span><br><span class="line">CALL myp7(@m,@n)</span><br><span class="line">SELECT @m,@n</span><br></pre></td></tr></table></figure>

<h3 id="存储过程的删除和查看"><a href="#存储过程的删除和查看" class="headerlink" title="存储过程的删除和查看"></a>存储过程的删除和查看</h3><p>删除存储过程</p>
<p>语法</p>
<pre><code>drop procedure 存储过程名
DROP PROCEDURE myp1;
DROP PROCEDURE myp1,myp2;#错误</code></pre>
<p>查看存储过程的信息</p>
<pre><code>DESC myp2;#错误
SHOW CREATE PROCEDURE myp2;</code></pre>
<h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><p>与存储过程的区别</p>
<ol start="2">
<li>可以有0个返回，也可以有多个，函数只能有1个返回（0个也不行，多个也不行）</li>
<li>存储过程适合做批量插入、批量更新；函数适合做处理数据后返回一个结果</li>
</ol>
<p>创建语法</p>
<pre><code>CREATE FUNCTION 函数名(参数列表) RETURNS 返回类型
BEGIN
    函数体
END</code></pre>
<p>注意：</p>
<ol>
<li>参数列表包含两部分—–参数名 参数类型</li>
<li>函数体：肯定会有return语句，如果没有会报错</li>
<li>如果return语句没有放在函数体最后也不报错，但不建议return 值;</li>
<li>当函数体只有一句话可以省略begin，end</li>
<li>使用delimiter语句设置结束标记</li>
</ol>
<p>调用语法</p>
<pre><code>SELECT 函数名(参数列表)</code></pre>
<h3 id="无参有返回"><a href="#无参有返回" class="headerlink" title="无参有返回"></a>无参有返回</h3><p>案例：返回公司员工的个数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET GLOBAL log_bin_trust_function_creators&#x3D;1;#不加这句下面的可能会报错</span><br><span class="line"></span><br><span class="line">CREATE FUNCTION myf1() RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">	DECLARE c INT DEFAULT 0;#定义变量</span><br><span class="line">	SELECT COUNT(*) INTO c #赋值</span><br><span class="line">	FROM employees;</span><br><span class="line">	RETURN c;</span><br><span class="line">END </span><br><span class="line"></span><br><span class="line">SELECT myf1()</span><br></pre></td></tr></table></figure>

<h3 id="有参有返回"><a href="#有参有返回" class="headerlink" title="有参有返回"></a>有参有返回</h3><p>案例1：根据员工名返回它的工资</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE FUNCTION myf2 (</span><br><span class="line">	empName VARCHAR ( 20 )) RETURNS DOUBLE BEGIN</span><br><span class="line">	</span><br><span class="line">	SET @sal &#x3D; 0;#定义用户变量</span><br><span class="line">	SELECT</span><br><span class="line">		salary INTO @sal #赋值</span><br><span class="line">		</span><br><span class="line">	FROM</span><br><span class="line">		employees </span><br><span class="line">	WHERE</span><br><span class="line">		last_name &#x3D; empName;</span><br><span class="line">	RETURN @sal;</span><br><span class="line">	</span><br><span class="line">END SELECT</span><br><span class="line">	myf2 ( &#39;kochhar&#39; )</span><br></pre></td></tr></table></figure>

<p>案例2：根据部门名，返回该部门平均工资</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE FUNCTION myf3 (</span><br><span class="line">	deptName VARCHAR ( 20 )) RETURNS DOUBLE BEGIN</span><br><span class="line">	DECLARE</span><br><span class="line">		sal DOUBLE;#局部变量</span><br><span class="line">	SELECT</span><br><span class="line">		AVG( salary ) INTO sal </span><br><span class="line">	FROM</span><br><span class="line">		employees e</span><br><span class="line">		JOIN departments d ON e.department_id &#x3D; d.department_id </span><br><span class="line">	WHERE</span><br><span class="line">		d.department_name &#x3D; deptName;</span><br><span class="line">	RETURN sal;</span><br><span class="line">END SELECT</span><br><span class="line">	myf3 ( &#39;IT&#39; )</span><br></pre></td></tr></table></figure>

<h3 id="查看函数"><a href="#查看函数" class="headerlink" title="查看函数"></a>查看函数</h3><pre><code>SHOW CREATE FUNCTION myf3;</code></pre>
<h3 id="删除函数"><a href="#删除函数" class="headerlink" title="删除函数"></a>删除函数</h3><pre><code>DROP FUNCTION myf3;</code></pre>
<h1 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h1><pre><code>顺序结构：程序从上往下依次执行
分支结构：程序从两条或多条路径中选择一条去执行
循环结构：程序在满足一定条件的基础上重复执行一段代码</code></pre>
<h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="if函数-1"><a href="#if函数-1" class="headerlink" title="if函数"></a>if函数</h3><p>功能：实现简单的双分支</p>
<p>语法：</p>
<pre><code>SELECT IF(表达式1,表达式2,表达式3)</code></pre>
<p>执行顺序：如果表达式成立，则if函数返回表达式2的值，否则返回表达式3的值</p>
<p><strong>很像EXCEL</strong></p>
<p>应用：任何地方</p>
<h3 id="case结构"><a href="#case结构" class="headerlink" title="case结构"></a>case结构</h3><p>情况1：类似于java中的switch语句，一般用于实现的等值判断</p>
<p>语法：</p>
<pre><code>CASE 变量|表达式|字段
WHEN 要判断的值 THEN 返回的值1或语句1;#语句要加分号
WHEN 要判断的值 THEN 返回的值2或语句2;
...
ELSE 要返回的值n或语句n;
END CASE;</code></pre>
<p>情况2：类似于就java中的多重if，一般用于实现区间判断</p>
<p>语法：</p>
<pre><code>CASE 
WHEN 要判断的条件1 THEN 返回的值1或语句1;
WHEN 要判断的条件2 THEN 返回的值2或语句2;
...
ELSE 要返回的值n或语句n;
END CASE;</code></pre>
<p>特点：</p>
<p>1.可以作为表达式，嵌套在其他语句中使用，可以放在任何地方;也可以作为独立的语句使用，只能放在 BEGIN END 中</p>
<p>2.如果 WHEN 中的值或条件成立，则执行对应的 THEN 后面的语句，并且结束 CASE;如果都不满足，则执行 ELSE 中的语句或值</p>
<p>3.ELSE 可以省略，如果省略了，并且所有的 WHEN 都不满足，则返回 NULL</p>
<p>案例:</p>
<p>创建存储过程，根据传入的成绩，来显示等级，比如传入90-100分显示A</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE PROCEDURE test_case ( IN score INT ) BEGIN</span><br><span class="line">	CASE</span><br><span class="line">			</span><br><span class="line">			WHEN score &gt;&#x3D; 90 </span><br><span class="line">			AND score &lt;&#x3D; 100 THEN SELECT &#39;A&#39;; WHEN score &gt;&#x3D; 80 THEN</span><br><span class="line">			SELECT</span><br><span class="line">				&#39;B&#39;;</span><br><span class="line">			</span><br><span class="line">			WHEN score &gt;&#x3D; 60 THEN</span><br><span class="line">			SELECT</span><br><span class="line">				&#39;C&#39;;</span><br><span class="line">			ELSE SELECT</span><br><span class="line">				&#39;D&#39;;</span><br><span class="line">			</span><br><span class="line">		END CASE;</span><br><span class="line">		</span><br><span class="line">	END CALL test_case (</span><br><span class="line">95)</span><br></pre></td></tr></table></figure>
<h3 id="if结构"><a href="#if结构" class="headerlink" title="if结构"></a>if结构</h3><p>功能：实现多重分支</p>
<p>语法：</p>
<pre><code>IF 条件 1 THEN
    语句 1;

    ELSEIF 条件 2 THEN
    语句 2;
...【 ELSE 语句 n;】 
END IF;</code></pre>
<p>应用场合：只能用在 BEGIN END 中</p>
<p>案例1：根据传入的成绩，来返回等级，比如传入90-100分返回A</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE FUNCTION test_if ( score INT ) RETURNS CHAR BEGIN</span><br><span class="line">	IF</span><br><span class="line">		score &gt;&#x3D; 90 </span><br><span class="line">		AND score &lt;&#x3D; 100 THEN RETURN &#39;A&#39;; ELSEIF score &gt;&#x3D; 80 THEN</span><br><span class="line">		RETURN &#39;B&#39;;</span><br><span class="line">		</span><br><span class="line">		ELSEIF score &gt;&#x3D; 60 THEN</span><br><span class="line">		RETURN &#39;B&#39;;</span><br><span class="line">		ELSE RETURN &#39;D&#39;;</span><br><span class="line">		</span><br><span class="line">	END IF;</span><br><span class="line"></span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">	test_if (86)</span><br></pre></td></tr></table></figure>

<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>分类：while、loop、repeat</p>
<p>循环控制：</p>
<pre><code>iterate类似于continue，结束本次循环，继续下一次
leave类似于break，跳出当前所在的循环</code></pre>
<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>适用范围：仅begin end中</p>
<p>语法：</p>
<pre><code>【标签:】while 循环条件 do
    循环体;
end while 【标签】;</code></pre>
<h3 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h3><p>没有条件的死循环 </p>
<p>语法：</p>
<pre><code>【标签：】loop
    循环体
end loop 【标签】;</code></pre>
<p>没有条件，可以用来模拟简单的死循环，不然要搭配leave</p>
<h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h3><p>先执行后判断</p>
<p>语法：</p>
<pre><code>【标签:】 repeat
    循环体;
until 结束循环的条件
end repeat【标签】;</code></pre>
<h3 id="无循环控制语句"><a href="#无循环控制语句" class="headerlink" title="无循环控制语句"></a>无循环控制语句</h3><p>案例：批量插入，根据次数插入到admin表中多条记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE PROCEDURE pro_while1 ( IN insertCount INT ) BEGIN</span><br><span class="line">	DECLARE</span><br><span class="line">		i INT DEFAULT 1;</span><br><span class="line">	WHILE</span><br><span class="line">			i &lt;&#x3D; insertCount DO</span><br><span class="line">			INSERT INTO admin ( username, PASSWORD )</span><br><span class="line">		VALUES</span><br><span class="line">			( CONCAT( &#39;rose&#39;, i ), &#39;666&#39; );</span><br><span class="line">		</span><br><span class="line">		SET i &#x3D; i + 1;</span><br><span class="line">		</span><br><span class="line">	END WHILE;</span><br><span class="line">	</span><br><span class="line">END CALL pro_while1 (</span><br><span class="line">10)</span><br></pre></td></tr></table></figure>

<h3 id="添加leave语句"><a href="#添加leave语句" class="headerlink" title="添加leave语句"></a>添加leave语句</h3><p>案例：批量插入，根据次数插入到admin表中多条记录，如果次数&gt;20则停止</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TRUNCATE TABLE admin$ DROP PROCEDURE test_while1$ CREATE PROCEDURE test_while1 ( IN insertCount INT ) BEGIN</span><br><span class="line">	DECLARE</span><br><span class="line">		i INT DEFAULT 1;</span><br><span class="line">	a :</span><br><span class="line">	WHILE</span><br><span class="line">			i &lt;&#x3D; insertCount DO INSERT INTO admin ( username, PASSWORD ) VALUES ( CONCAT( &#39;xiaohua&#39;, i ), &#39;000&#39; ); IF i &gt;&#x3D; 20 THEN</span><br><span class="line">			LEAVE a;</span><br><span class="line">			</span><br><span class="line">		END IF;</span><br><span class="line">		</span><br><span class="line">		SET i &#x3D; i + 1;</span><br><span class="line">		</span><br><span class="line">	END WHILE a;</span><br><span class="line">	</span><br><span class="line">END CALL test_while1 (</span><br><span class="line">21)</span><br></pre></td></tr></table></figure>

<h3 id="添加iterate语句"><a href="#添加iterate语句" class="headerlink" title="添加iterate语句"></a>添加iterate语句</h3><p>案例：批量插入，根据次数插入admin中多条记录，只插入偶数次</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TRUNCATE TABLE admin DROP PROCEDURE test_while1 CREATE PROCEDURE test_while1 ( IN insertCount INT ) BEGIN</span><br><span class="line">	DECLARE</span><br><span class="line">		i INT DEFAULT 0;</span><br><span class="line">	a :</span><br><span class="line">	WHILE</span><br><span class="line">			i &lt;&#x3D; insertCount DO</span><br><span class="line">			</span><br><span class="line">			SET i &#x3D; i + 1;</span><br><span class="line">		IF</span><br><span class="line">			MOD ( i, 2 )!&#x3D; 0 THEN</span><br><span class="line">				ITERATE a;</span><br><span class="line">			</span><br><span class="line">		END IF;</span><br><span class="line">		INSERT INTO admin ( username, PASSWORD )</span><br><span class="line">		VALUES</span><br><span class="line">			( CONCAT( &#39;xiaohua&#39;, i ), &#39;000&#39; );</span><br><span class="line">		</span><br><span class="line">	END WHILE a;</span><br><span class="line">	</span><br><span class="line">END CALL test_while1 (</span><br><span class="line">21)</span><br></pre></td></tr></table></figure>

<h2 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h2><pre><code>已知表stringcontent
其中字段：
id：自增长
content varchar(20)</code></pre>
<p>要求：向该表插入指定个数的，随机的字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	CREATE TABLE IF NOT EXISTS stringcontent(</span><br><span class="line">	id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">	content VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">DELIMITER </span><br><span class="line">CREATE PROCEDURE test_randstr_insert(IN insertCount INT)</span><br><span class="line">BEGIN</span><br><span class="line">	DECLARE i INT DEFAULT 1; #定义一个循环变量i,表示插入的次数</span><br><span class="line">	DECLARE str VARCHAR(26) DEFAULT &#39;abcdefghijklmnopqrstuvwxyz&#39;;</span><br><span class="line">	DECLARE startIndex INT DEFAULT 1;#代表起始索引</span><br><span class="line">	DECLARE len INT DEFAULT 1;#代表截取的字符的长度</span><br><span class="line">	WHILE i&lt;&#x3D;insertCount DO		</span><br><span class="line">		SET len&#x3D;FLOOR(RAND()*(20-startIndex+1)+1);#产生一个随机的整数，代表截取长度 1-(26-startIndex+1)</span><br><span class="line">		SET startIndex&#x3D;FLOOR(RAND()*26+1);#产生一个随机的整数，代表起始索引1-26</span><br><span class="line">		INSERT INTO stringcontent(content) VALUES(SUBSTR(str,startIndex,len));</span><br><span class="line">		SET i&#x3D;i+1; #循环变量更新</span><br><span class="line">	END WHILE;</span><br><span class="line">END </span><br><span class="line"></span><br><span class="line">CALL test_randstr_insert(6)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>learning notes</category>
      </categories>
      <tags>
        <tag>learn</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
