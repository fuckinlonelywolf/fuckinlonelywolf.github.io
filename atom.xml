<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>martini&#39;s blog</title>
  
  <subtitle>wings</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-10-29T16:31:29.835Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>martini</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>尝试一下</title>
    <link href="http://example.com/2020/10/30/%E5%B0%9D%E8%AF%95%E4%B8%80%E4%B8%8B/"/>
    <id>http://example.com/2020/10/30/%E5%B0%9D%E8%AF%95%E4%B8%80%E4%B8%8B/</id>
    <published>2020-10-29T16:28:07.000Z</published>
    <updated>2020-10-29T16:31:29.835Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是学习第一篇案例分析</p><a id="more"></a><h1 id="1导入包、加载数据"><a href="#1导入包、加载数据" class="headerlink" title="1导入包、加载数据"></a>1导入包、加载数据</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error, mean_squared_error</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings<span class="comment">#忽略错误</span></span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data = load_boston()</span><br><span class="line">df = pd.DataFrame(data.data,columns = data.feature_names)</span><br><span class="line">df[<span class="string">&#x27;PRICE&#x27;</span>] = data.target</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>CRIM</th>      <th>ZN</th>      <th>INDUS</th>      <th>CHAS</th>      <th>NOX</th>      <th>RM</th>      <th>AGE</th>      <th>DIS</th>      <th>RAD</th>      <th>TAX</th>      <th>PTRATIO</th>      <th>B</th>      <th>LSTAT</th>      <th>PRICE</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.00632</td>      <td>18.0</td>      <td>2.31</td>      <td>0.0</td>      <td>0.538</td>      <td>6.575</td>      <td>65.2</td>      <td>4.0900</td>      <td>1.0</td>      <td>296.0</td>      <td>15.3</td>      <td>396.90</td>      <td>4.98</td>      <td>24.0</td>    </tr>    <tr>      <th>1</th>      <td>0.02731</td>      <td>0.0</td>      <td>7.07</td>      <td>0.0</td>      <td>0.469</td>      <td>6.421</td>      <td>78.9</td>      <td>4.9671</td>      <td>2.0</td>      <td>242.0</td>      <td>17.8</td>      <td>396.90</td>      <td>9.14</td>      <td>21.6</td>    </tr>    <tr>      <th>2</th>      <td>0.02729</td>      <td>0.0</td>      <td>7.07</td>      <td>0.0</td>      <td>0.469</td>      <td>7.185</td>      <td>61.1</td>      <td>4.9671</td>      <td>2.0</td>      <td>242.0</td>      <td>17.8</td>      <td>392.83</td>      <td>4.03</td>      <td>34.7</td>    </tr>    <tr>      <th>3</th>      <td>0.03237</td>      <td>0.0</td>      <td>2.18</td>      <td>0.0</td>      <td>0.458</td>      <td>6.998</td>      <td>45.8</td>      <td>6.0622</td>      <td>3.0</td>      <td>222.0</td>      <td>18.7</td>      <td>394.63</td>      <td>2.94</td>      <td>33.4</td>    </tr>    <tr>      <th>4</th>      <td>0.06905</td>      <td>0.0</td>      <td>2.18</td>      <td>0.0</td>      <td>0.458</td>      <td>7.147</td>      <td>54.2</td>      <td>6.0622</td>      <td>3.0</td>      <td>222.0</td>      <td>18.7</td>      <td>396.90</td>      <td>5.33</td>      <td>36.2</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数值型12个， 分类型2个</span></span><br><span class="line">numerical_vars = [<span class="string">&#x27;CRIM&#x27;</span>,<span class="string">&#x27;ZN&#x27;</span>,<span class="string">&#x27;INDUS&#x27;</span>,<span class="string">&#x27;NOX&#x27;</span>,<span class="string">&#x27;RM&#x27;</span>,<span class="string">&#x27;AGE&#x27;</span>,<span class="string">&#x27;DIS&#x27;</span>,<span class="string">&#x27;TAX&#x27;</span>,<span class="string">&#x27;PTRATIO&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;LSTAT&#x27;</span>,<span class="string">&#x27;PRICE&#x27;</span>]</span><br><span class="line">category_vars = [<span class="string">&#x27;CHAS&#x27;</span>,<span class="string">&#x27;RAD&#x27;</span>]</span><br><span class="line">df.shape</span><br></pre></td></tr></table></figure><pre><code>(506, 14)</code></pre><p>CRIM: 按照城镇划分的人均犯罪率</p><p>ZN: 超过25000平方英寸的住宅用地所占的比例</p><p>INDUS: 每个城镇的非零售商业面积</p><p>CHAS: 这是查尔斯河哑变量 (1 or 0)</p><p>NOX: 一氧化氮浓度 (每一百万部分)</p><p>RM: 每个居住的平均房间数</p><p>AGE: 1940年以前建造的自用住房比例</p><p>DIS: 有五个波士顿就业中心，这是到他们的加权距离</p><p>RAD: 到高速公路的指标</p><p>TAX: 每一万美元的房产税</p><p>PTRATIO: 按城镇计算的学生-教师比例</p><p>B: This is calculated as 1000(Bk — 0.63)², BK是黑人后代在城镇中的比例</p><p>LSTAT: 社会地位低的群体的占比</p><p>MEDV: 业主自住房的价值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看有无空值</span></span><br><span class="line">df.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><pre><code>CRIM       0ZN         0INDUS      0CHAS       0NOX        0RM         0AGE        0DIS        0RAD        0TAX        0PTRATIO    0B          0LSTAT      0PRICE      0dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 506 entries, 0 to 505Data columns (total 14 columns): #   Column   Non-Null Count  Dtype  ---  ------   --------------  -----   0   CRIM     506 non-null    float64 1   ZN       506 non-null    float64 2   INDUS    506 non-null    float64 3   CHAS     506 non-null    float64 4   NOX      506 non-null    float64 5   RM       506 non-null    float64 6   AGE      506 non-null    float64 7   DIS      506 non-null    float64 8   RAD      506 non-null    float64 9   TAX      506 non-null    float64 10  PTRATIO  506 non-null    float64 11  B        506 non-null    float64 12  LSTAT    506 non-null    float64 13  PRICE    506 non-null    float64dtypes: float64(14)memory usage: 55.5 KB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算常用的统计量值 -- 只看Y的</span></span><br><span class="line">df[<span class="string">&#x27;PRICE&#x27;</span>].describe()</span><br></pre></td></tr></table></figure><pre><code>count    506.000000mean      22.532806std        9.197104min        5.00000025%       17.02500050%       21.20000075%       25.000000max       50.000000Name: PRICE, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;PRICE&#x27;</span>].hist(edgecolor = <span class="string">&#x27;black&#x27;</span>, bins = <span class="number">20</span>)</span><br><span class="line">print(<span class="string">&quot;Skewness：&#123;:0.3f&#125;&quot;</span>.<span class="built_in">format</span>(df[<span class="string">&#x27;PRICE&#x27;</span>].skew()))</span><br><span class="line">print(<span class="string">&quot;Kurtosis：&#123;:0.3f&#125;&quot;</span>.<span class="built_in">format</span>(df[<span class="string">&#x27;PRICE&#x27;</span>].kurt()))</span><br></pre></td></tr></table></figure><pre><code>Skewness：1.108Kurtosis：1.495</code></pre><p><img src="output_9_1.png" alt="png"></p><h3 id="Price的分析："><a href="#Price的分析：" class="headerlink" title="Price的分析："></a>Price的分析：</h3><p>均值是22，最高售价是50，最低售价是5</p><p>峰度为1.5，接近正态分布的变量该值一般在3左右；偏态系数为1.1，正态分布的偏态系数为0</p><h1 id="2数值变量"><a href="#2数值变量" class="headerlink" title="2数值变量"></a>2数值变量</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[numerical_vars].describe()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>CRIM</th>      <th>ZN</th>      <th>INDUS</th>      <th>NOX</th>      <th>RM</th>      <th>AGE</th>      <th>DIS</th>      <th>TAX</th>      <th>PTRATIO</th>      <th>B</th>      <th>LSTAT</th>      <th>PRICE</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>506.000000</td>      <td>506.000000</td>      <td>506.000000</td>      <td>506.000000</td>      <td>506.000000</td>      <td>506.000000</td>      <td>506.000000</td>      <td>506.000000</td>      <td>506.000000</td>      <td>506.000000</td>      <td>506.000000</td>      <td>506.000000</td>    </tr>    <tr>      <th>mean</th>      <td>3.613524</td>      <td>11.363636</td>      <td>11.136779</td>      <td>0.554695</td>      <td>6.284634</td>      <td>68.574901</td>      <td>3.795043</td>      <td>408.237154</td>      <td>18.455534</td>      <td>356.674032</td>      <td>12.653063</td>      <td>22.532806</td>    </tr>    <tr>      <th>std</th>      <td>8.601545</td>      <td>23.322453</td>      <td>6.860353</td>      <td>0.115878</td>      <td>0.702617</td>      <td>28.148861</td>      <td>2.105710</td>      <td>168.537116</td>      <td>2.164946</td>      <td>91.294864</td>      <td>7.141062</td>      <td>9.197104</td>    </tr>    <tr>      <th>min</th>      <td>0.006320</td>      <td>0.000000</td>      <td>0.460000</td>      <td>0.385000</td>      <td>3.561000</td>      <td>2.900000</td>      <td>1.129600</td>      <td>187.000000</td>      <td>12.600000</td>      <td>0.320000</td>      <td>1.730000</td>      <td>5.000000</td>    </tr>    <tr>      <th>25%</th>      <td>0.082045</td>      <td>0.000000</td>      <td>5.190000</td>      <td>0.449000</td>      <td>5.885500</td>      <td>45.025000</td>      <td>2.100175</td>      <td>279.000000</td>      <td>17.400000</td>      <td>375.377500</td>      <td>6.950000</td>      <td>17.025000</td>    </tr>    <tr>      <th>50%</th>      <td>0.256510</td>      <td>0.000000</td>      <td>9.690000</td>      <td>0.538000</td>      <td>6.208500</td>      <td>77.500000</td>      <td>3.207450</td>      <td>330.000000</td>      <td>19.050000</td>      <td>391.440000</td>      <td>11.360000</td>      <td>21.200000</td>    </tr>    <tr>      <th>75%</th>      <td>3.677083</td>      <td>12.500000</td>      <td>18.100000</td>      <td>0.624000</td>      <td>6.623500</td>      <td>94.075000</td>      <td>5.188425</td>      <td>666.000000</td>      <td>20.200000</td>      <td>396.225000</td>      <td>16.955000</td>      <td>25.000000</td>    </tr>    <tr>      <th>max</th>      <td>88.976200</td>      <td>100.000000</td>      <td>27.740000</td>      <td>0.871000</td>      <td>8.780000</td>      <td>100.000000</td>      <td>12.126500</td>      <td>711.000000</td>      <td>22.000000</td>      <td>396.900000</td>      <td>37.970000</td>      <td>50.000000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[numerical_vars].hist(edgecolor=<span class="string">&#x27;black&#x27;</span>, bins = <span class="number">15</span>, figsize = (<span class="number">16</span>,<span class="number">8</span>), layout = (<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[&lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001C5D961CF60&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001C5D969A3C8&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001C5D96CC630&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001C5D9701898&gt;],       [&lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001C5D9736B00&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001C5D976BD68&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001C5D961C080&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001C5D9595390&gt;],       [&lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001C5D9595358&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001C5D979FE10&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001C5D97E10B8&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001C5D9812320&gt;]],      dtype=object)</code></pre><p><img src="output_13_1.png" alt="png"></p><p>CRIM：犯罪比例普遍不高</p><p>DIS：大多数房子到就业中心的距离很近</p><p>B：黑人的情况可能是要么这个城镇里没有黑人，要么就很多黑人</p><p>ZN：大房子非常少</p><p>LSTAT：地位低的群体在30(%)以内</p><p>RM：住宅的房间数主要是5、6、7</p><h3 id="散点图、热力图"><a href="#散点图、热力图" class="headerlink" title="散点图、热力图"></a>散点图、热力图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#散点图矩阵</span></span><br><span class="line">sns.pairplot(df[numerical_vars[:<span class="number">6</span>] + [<span class="string">&#x27;PRICE&#x27;</span>]])</span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.PairGrid at 0x1c5d9e802b0&gt;</code></pre><p><img src="output_16_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.pairplot(df[numerical_vars[<span class="number">6</span>:]])</span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.PairGrid at 0x1c5dc5dce80&gt;</code></pre><p><img src="output_17_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#相关性分析 -- 热力图</span></span><br><span class="line">corrmat = df.corr()</span><br><span class="line">fig, ax = plt.subplots(figsize = (<span class="number">18</span>, <span class="number">10</span>))</span><br><span class="line">sns.heatmap(corrmat, annot = <span class="literal">True</span>, annot_kws=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">12</span>&#125;)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1c5dde08240&gt;</code></pre><p><img src="output_18_1.png" alt="png"></p><h1 id="3类别变量"><a href="#3类别变量" class="headerlink" title="3类别变量"></a>3类别变量</h1><p>RAD到高速路的便捷程度 CHAS查尔斯河</p><h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(<span class="number">1</span>,<span class="number">2</span>, figsize = (<span class="number">16</span>, <span class="number">8</span>))</span><br><span class="line"><span class="keyword">for</span> var, subplot <span class="keyword">in</span> <span class="built_in">zip</span>(category_vars, ax.flatten()):</span><br><span class="line">    df[var].value_counts().plot(kind = <span class="string">&#x27;bar&#x27;</span>, ax = subplot, title = var)</span><br><span class="line">    </span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure><p><img src="output_21_0.png" alt="png"></p><p>可见，不挨着查尔斯河的多，离着高速公路远(应该是数值越大越远叭)的也比较多</p><h3 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(<span class="number">1</span>,<span class="number">2</span>, figsize = (<span class="number">16</span>, <span class="number">8</span>))</span><br><span class="line"><span class="keyword">for</span> var, subplot <span class="keyword">in</span> <span class="built_in">zip</span>(category_vars, ax.flatten()):</span><br><span class="line">    sns.boxplot(x = var, y = <span class="string">&#x27;PRICE&#x27;</span>, data = df, ax = subplot)</span><br><span class="line">    </span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure><p><img src="output_24_0.png" alt="png"></p><p>挨着查尔斯河的房价会高一些，距离高速特别远的房价也会低一些。</p><h3 id="条件图"><a href="#条件图" class="headerlink" title="条件图"></a>条件图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conditional_plot = sns.FacetGrid(df, col = <span class="string">&#x27;RAD&#x27;</span>, row = <span class="string">&#x27;CHAS&#x27;</span>)</span><br><span class="line">conditional_plot.<span class="built_in">map</span>(plt.scatter, <span class="string">&#x27;DIS&#x27;</span>, <span class="string">&#x27;PRICE&#x27;</span>).add_legend()</span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x1c5df57a5f8&gt;</code></pre><p><img src="output_27_1.png" alt="png"></p><h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>      <th>5</th>      <th>6</th>      <th>7</th>      <th>8</th>      <th>9</th>      <th>...</th>      <th>92</th>      <th>93</th>      <th>94</th>      <th>95</th>      <th>96</th>      <th>97</th>      <th>98</th>      <th>99</th>      <th>100</th>      <th>101</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>26.894615</td>      <td>21.082776</td>      <td>27.064429</td>      <td>11.636416</td>      <td>22.797644</td>      <td>20.26978</td>      <td>18.857252</td>      <td>21.542407</td>      <td>17.137559</td>      <td>21.571522</td>      <td>...</td>      <td>27.596129</td>      <td>32.68449</td>      <td>21.746515</td>      <td>23.300141</td>      <td>-3.190689</td>      <td>28.023573</td>      <td>17.699272</td>      <td>19.002782</td>      <td>25.277574</td>      <td>21.027152</td>    </tr>    <tr>      <th>1</th>      <td>22.600000</td>      <td>50.000000</td>      <td>23.000000</td>      <td>8.300000</td>      <td>21.200000</td>      <td>19.90000</td>      <td>20.600000</td>      <td>18.700000</td>      <td>16.100000</td>      <td>18.600000</td>      <td>...</td>      <td>21.900000</td>      <td>24.80000</td>      <td>11.900000</td>      <td>24.300000</td>      <td>13.800000</td>      <td>24.700000</td>      <td>14.100000</td>      <td>18.700000</td>      <td>28.100000</td>      <td>19.800000</td>    </tr>  </tbody></table><p>2 rows × 102 columns</p></div><p>取出和price的相关性系数大于阈值(超过0.5的只有两个，所以设置为0.4)的变量，绘制其与price的线性回归图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCorrelatedFeature</span>(<span class="params">corrdata, threshold</span>):</span></span><br><span class="line">    feature = []</span><br><span class="line">    value = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i, index <span class="keyword">in</span> <span class="built_in">enumerate</span>(corrdata.index):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(corrdata[index])&gt; threshold:</span><br><span class="line">            feature.append(index)</span><br><span class="line">            value.append(corrdata[index])</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> pd.DataFrame(data = value, index = feature, columns=[<span class="string">&#x27;Corr Value&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score</span><br><span class="line">threshold = <span class="number">0.4</span></span><br><span class="line"></span><br><span class="line">corr_value = getCorrelatedFeature(corrmat[<span class="string">&#x27;PRICE&#x27;</span>], threshold)</span><br><span class="line">correlated_data = df[corr_value.index]</span><br><span class="line"></span><br><span class="line">X = correlated_data.drop(labels=[<span class="string">&#x27;PRICE&#x27;</span>], axis = <span class="number">1</span>)</span><br><span class="line">y = correlated_data[<span class="string">&#x27;PRICE&#x27;</span>]</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = <span class="number">0.2</span>, random_state = <span class="number">0</span>) <span class="comment">#划分训练集和测试集</span></span><br><span class="line"></span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">y_predict = model.predict(X_test)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data = [y_predict, y_test]) <span class="comment">#</span></span><br><span class="line">r2= (r2_score(y_test, y_predict))</span><br><span class="line">mae= ( mean_absolute_error(y_test, y_predict))</span><br><span class="line">mse= ( mean_squared_error(y_test, y_predict))</span><br><span class="line">print(correlated_data.columns)</span><br><span class="line">r2,mae,mse</span><br></pre></td></tr></table></figure><pre><code>Index([&#39;INDUS&#39;, &#39;NOX&#39;, &#39;RM&#39;, &#39;TAX&#39;, &#39;PTRATIO&#39;, &#39;LSTAT&#39;, &#39;PRICE&#39;], dtype=&#39;object&#39;)(0.4762033635181808, 4.394500711473959, 42.651942494587615)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rows = <span class="number">3</span></span><br><span class="line">cols = <span class="number">2</span></span><br><span class="line">fig, ax = plt.subplots(nrows=rows, ncols=cols, figsize = (<span class="number">16</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">col = correlated_data.columns</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line">        sns.regplot(x = correlated_data[col[index]], y = correlated_data[<span class="string">&#x27;PRICE&#x27;</span>], ax = ax[i][j])</span><br><span class="line">        index = index + <span class="number">1</span></span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure><p><img src="output_32_0.png" alt="png"></p><p>绘制学习曲线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">model = LinearRegression(normalize=<span class="literal">True</span>)</span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">y_predict = model.predict(X_test)</span><br><span class="line">print(<span class="string">&quot;r2:&quot;</span>,r2_score(y_test, y_predict))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> learning_curve, ShuffleSplit</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_learning_curve</span>(<span class="params">estimator, title, X, y, ylim=<span class="literal">None</span>, cv=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                        n_jobs=<span class="literal">None</span>, train_sizes=np.linspace(<span class="params"><span class="number">.1</span>, <span class="number">1.0</span>, <span class="number">10</span></span>)</span>):</span></span><br><span class="line">    </span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;Training examples&quot;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;Score&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    train_sizes, train_scores, test_scores = learning_curve(</span><br><span class="line">        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes,scoring=<span class="string">&#x27;r2&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    train_scores_mean = np.mean(train_scores, axis=<span class="number">1</span>)</span><br><span class="line">    train_scores_std = np.std(train_scores, axis=<span class="number">1</span>)</span><br><span class="line">    test_scores_mean = np.mean(test_scores, axis=<span class="number">1</span>)</span><br><span class="line">    test_scores_std = np.std(test_scores, axis=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    plt.grid()</span><br><span class="line"></span><br><span class="line">    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,</span><br><span class="line">                     train_scores_mean + train_scores_std, alpha=<span class="number">0.1</span>,</span><br><span class="line">                     color=<span class="string">&quot;r&quot;</span>)</span><br><span class="line">    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,</span><br><span class="line">                     test_scores_mean + test_scores_std, alpha=<span class="number">0.1</span>, color=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    plt.plot(train_sizes, train_scores_mean, <span class="string">&#x27;o-&#x27;</span>, color=<span class="string">&quot;r&quot;</span>,</span><br><span class="line">             label=<span class="string">&quot;Training score&quot;</span>)</span><br><span class="line">    plt.plot(train_sizes, test_scores_mean, <span class="string">&#x27;o-&#x27;</span>, color=<span class="string">&quot;g&quot;</span>,</span><br><span class="line">             label=<span class="string">&quot;Cross-validation score&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.legend(loc=<span class="string">&quot;best&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> plt</span><br><span class="line"></span><br><span class="line">title = <span class="string">&quot;Learning Curves (LinearRegression) &quot;</span> </span><br><span class="line"></span><br><span class="line">cv = ShuffleSplit(n_splits=<span class="number">100</span>, test_size=<span class="number">0.2</span>, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">estimator = LinearRegression(normalize=<span class="literal">True</span>)</span><br><span class="line">plot_learning_curve(estimator, title, X_train, y_train, ylim=(<span class="number">0.7</span>, <span class="number">1.01</span>), cv=cv, n_jobs=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>r2: 0.4762033635181858</code></pre><p><img src="output_34_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> ElasticNet</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVR</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> AdaBoostRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> ExtraTreesRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge</span><br><span class="line"><span class="comment"># user variables to tune</span></span><br><span class="line">folds   = <span class="number">10</span></span><br><span class="line">metric  = <span class="string">&quot;neg_mean_squared_error&quot;</span></span><br><span class="line">seed = <span class="number">2020</span></span><br><span class="line"><span class="comment"># hold different regression models in a single dictionary</span></span><br><span class="line">models = &#123;&#125;</span><br><span class="line">models[<span class="string">&quot;Linear&quot;</span>]        = LinearRegression()</span><br><span class="line">models[<span class="string">&quot;Ridge&quot;</span>]        = Ridge(alpha=<span class="number">0.01</span>)</span><br><span class="line">models[<span class="string">&quot;Lasso&quot;</span>]         = Lasso()</span><br><span class="line">models[<span class="string">&quot;ElasticNet&quot;</span>]    = ElasticNet()</span><br><span class="line">models[<span class="string">&quot;KNN&quot;</span>]           = KNeighborsRegressor()</span><br><span class="line">models[<span class="string">&quot;DecisionTree&quot;</span>]  = DecisionTreeRegressor()</span><br><span class="line">models[<span class="string">&quot;SVR&quot;</span>]           = SVR()</span><br><span class="line">models[<span class="string">&quot;AdaBoost&quot;</span>]      = AdaBoostRegressor()</span><br><span class="line">models[<span class="string">&quot;GradientBoost&quot;</span>] = GradientBoostingRegressor()</span><br><span class="line">models[<span class="string">&quot;RandomForest&quot;</span>]  = RandomForestRegressor()</span><br><span class="line">models[<span class="string">&quot;ExtraTrees&quot;</span>]    = ExtraTreesRegressor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10-fold cross validation for each model</span></span><br><span class="line">model_results = []</span><br><span class="line">model_names   = []</span><br><span class="line"><span class="keyword">for</span> model_name <span class="keyword">in</span> models:</span><br><span class="line">    model   = models[model_name]</span><br><span class="line">    k_fold  = KFold(n_splits = folds, random_state = seed)</span><br><span class="line">    results = cross_val_score(model, X_train, y_train, cv = k_fold, scoring = metric)</span><br><span class="line"></span><br><span class="line">    model_results.append(results)</span><br><span class="line">    model_names.append(model_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># box-whisker plot to compare regression models</span></span><br><span class="line">figure = plt.figure(figsize = (<span class="number">16</span>, <span class="number">8</span>))</span><br><span class="line">figure.suptitle(<span class="string">&#x27;Regression models comparison&#x27;</span>)</span><br><span class="line">axis = figure.add_subplot(<span class="number">111</span>)</span><br><span class="line">plt.boxplot(model_results)</span><br><span class="line">axis.set_xticklabels(model_names, rotation = <span class="number">45</span>, ha=<span class="string">&quot;right&quot;</span>)</span><br><span class="line">axis.set_ylabel(<span class="string">&quot;Mean Squared Error (MSE)&quot;</span>)</span><br><span class="line"><span class="comment"># plt.savefig(&quot;model_mse_scores.png&quot;)</span></span><br><span class="line"><span class="comment"># plt.clf()</span></span><br><span class="line"><span class="comment"># plt.close()</span></span><br></pre></td></tr></table></figure><pre><code>Text(0, 0.5, &#39;Mean Squared Error (MSE)&#39;)</code></pre><p><img src="output_35_1.png" alt="png"></p><p>梯度上升决策树效果最好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">best_model = GradientBoostingRegressor(random_state = seed)</span><br><span class="line">best_model.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># make predictions using the model</span></span><br><span class="line">predictions = best_model.predict(X_test)</span><br><span class="line">print(<span class="string">&quot;[INFO] MSE : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(mean_squared_error(y_test, predictions), <span class="number">3</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>[INFO] MSE : 23.325</code></pre><p>画图：预测值和真实值的比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x_axis = np.array(<span class="built_in">range</span>(<span class="number">0</span>, predictions.shape[<span class="number">0</span>]))</span><br><span class="line">plt.figure(figsize = (<span class="number">16</span>, <span class="number">8</span>))</span><br><span class="line">plt.plot(x_axis, predictions, linestyle=<span class="string">&quot;--&quot;</span>, marker=<span class="string">&quot;o&quot;</span>, alpha=<span class="number">0.7</span>, color=<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&quot;predictions&quot;</span>)</span><br><span class="line">plt.plot(x_axis, y_test, linestyle=<span class="string">&quot;--&quot;</span>, marker=<span class="string">&quot;o&quot;</span>, alpha=<span class="number">0.7</span>, color=<span class="string">&#x27;g&#x27;</span>, label=<span class="string">&quot;Y_test&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Row number&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;PRICE&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Predictions vs Y_test&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;lower right&#x27;</span>)</span><br><span class="line"><span class="comment"># plt.savefig(&quot;predictions_vs_ytest.png&quot;)</span></span><br><span class="line"><span class="comment"># plt.clf()</span></span><br><span class="line"><span class="comment"># plt.close()</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.legend.Legend at 0x1c5df419fd0&gt;</code></pre><p><img src="output_39_1.png" alt="png"></p><p>输出特征重要性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">feature_importance = best_model.feature_importances_</span><br><span class="line">feature_importance = <span class="number">100.0</span> * (feature_importance / feature_importance.<span class="built_in">max</span>())</span><br><span class="line"></span><br><span class="line">sorted_idx = np.argsort(feature_importance)</span><br><span class="line">pos        = np.arange(sorted_idx.shape[<span class="number">0</span>]) + <span class="number">.5</span></span><br><span class="line"></span><br><span class="line">plt.barh(pos, feature_importance[sorted_idx], align=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">plt.yticks(pos, correlated_data.columns[sorted_idx])</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Relative Importance&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Variable Importance&#x27;</span>)</span><br><span class="line"><span class="comment"># plt.savefig(&quot;feature_importance.png&quot;)</span></span><br><span class="line"><span class="comment"># plt.clf()</span></span><br><span class="line"><span class="comment"># plt.close()</span></span><br></pre></td></tr></table></figure><pre><code>Text(0.5, 1.0, &#39;Variable Importance&#39;)</code></pre><p><img src="output_41_1.png" alt="png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇是学习第一篇案例分析&lt;/p&gt;</summary>
    
    
    
    <category term="默认分类" scheme="http://example.com/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/10/29/hello-world/"/>
    <id>http://example.com/2020/10/29/hello-world/</id>
    <published>2020-10-29T11:21:31.043Z</published>
    <updated>2020-10-29T15:43:36.133Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是初始化内容</p><a id="more"></a><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇是初始化内容&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>初识mysql---基础篇笔记</title>
    <link href="http://example.com/2020/06/20/%E5%88%9D%E8%AF%86mysql-%E5%9F%BA%E7%A1%80%E7%AF%87%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/06/20/%E5%88%9D%E8%AF%86mysql-%E5%9F%BA%E7%A1%80%E7%AF%87%E7%AC%94%E8%AE%B0/</id>
    <published>2020-06-20T14:30:27.000Z</published>
    <updated>2020-06-28T15:24:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是学习mysql的基础篇笔记</p><a id="more"></a><h1 id="1-DBMS—数据库管理系统"><a href="#1-DBMS—数据库管理系统" class="headerlink" title="1.DBMS—数据库管理系统"></a>1.DBMS—数据库管理系统</h1><h4 id="RDBMS—关系型数据库"><a href="#RDBMS—关系型数据库" class="headerlink" title="RDBMS—关系型数据库"></a>RDBMS—关系型数据库</h4><ul><li>Oracle</li><li>MySQL</li><li>MSSQL</li><li>PG<h4 id="NoSQL—非关系型数据库"><a href="#NoSQL—非关系型数据库" class="headerlink" title="NoSQL—非关系型数据库"></a>NoSQL—非关系型数据库</h4></li><li>MongoDB</li><li>ES</li><li>Redis<h1 id="2-MySQL数据库软件—配置"><a href="#2-MySQL数据库软件—配置" class="headerlink" title="2.MySQL数据库软件—配置"></a>2.MySQL数据库软件—配置</h1><h3 id="2-1-MySQL服务启动"><a href="#2-1-MySQL服务启动" class="headerlink" title="2.1 MySQL服务启动"></a>2.1 MySQL服务启动</h3></li></ul><ol><li><p>手动。  </p></li><li><p>cmd–&gt; services.msc 打开服务的窗口</p></li><li><p>使用管理员打开cmd：</p><pre><code> net start mysql: 启动mysql的服务 net stop mysql: 关闭mysql服务</code></pre><h3 id="2-2-MySQL登录"><a href="#2-2-MySQL登录" class="headerlink" title="2.2 MySQL登录"></a>2.2 MySQL登录</h3><p> 登陆前服务要启动</p><ol><li>root用户：command line client</li><li>mysql -uroot -p密码</li><li>mysql -hip -uroot -p连接目标的密码</li><li>mysql –host=ip –user=root –password=连接目标的密码</li><li>mysql -h主机名 -P端口号 -u用户名 -p密码（默认端口3306，用户root）<h3 id="2-2-MySQL退出"><a href="#2-2-MySQL退出" class="headerlink" title="2.2 MySQL退出"></a>2.2 MySQL退出</h3></li><li>exit</li><li>quit</li></ol></li></ol><h3 id="2-3-常见命令和语法大区"><a href="#2-3-常见命令和语法大区" class="headerlink" title="2.3 常见命令和语法大区"></a>2.3 常见命令和语法大区</h3><p>别忘了分号啊</p><ol><li>查看当前所有的数据库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show database();</span><br></pre></td></tr></table></figure></li><li>打开指定的库 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use 库名;                </span><br><span class="line">（只要用了use你就在那个库中了）</span><br></pre></td></tr></table></figure></li><li>查看当前库所有的表<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">show tables; </span><br><span class="line">```           </span><br><span class="line">4. 查看其他库所有的表</span><br><span class="line">``` bash</span><br><span class="line">show tables from 库名;  </span><br></pre></td></tr></table></figure></li><li>创建表<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">列名 列类型，</span><br><span class="line">列名 列类型，</span><br><span class="line">...</span><br><span class="line">)    </span><br></pre></td></tr></table></figure></li><li>查看表的结构  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">desc 表名;</span><br><span class="line">```               </span><br><span class="line"><span class="comment">### 2.4 查看服务器的版本：</span></span><br><span class="line">方式一：登录到mysql服务端</span><br><span class="line">``` bash</span><br><span class="line">select version();</span><br></pre></td></tr></table></figure></li></ol><p>方式二：没有登录到mysql服务端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version或mysql --V</span><br></pre></td></tr></table></figure><h3 id="2-5-语法规范"><a href="#2-5-语法规范" class="headerlink" title="2.5 语法规范"></a>2.5 语法规范</h3><ol><li>不区分大小写，但建议关键字大写，表名列名小写；</li><li>每句命令要用分号结尾；</li><li>每句命令根据需要，可以进行缩进 或换行；</li><li>注释<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单行注释：<span class="comment">#注释文字</span></span><br><span class="line">单行注释：-- 注释文字（注意空格）</span><br><span class="line">多行注释：/* 注释文字 */</span><br></pre></td></tr></table></figure>##<br>ctrl s是保存；选中之后F12格式化；</li></ol><p>安装了navicat，导入girls和myemployees俩数据集<br>##</p><h1 id="3-基础查询-DQL语言"><a href="#3-基础查询-DQL语言" class="headerlink" title="3.基础查询 DQL语言"></a>3.基础查询 DQL语言</h1><h3 id="3-1进阶1"><a href="#3-1进阶1" class="headerlink" title="3.1进阶1"></a>3.1进阶1</h3><pre><code>先打开库USE myemployees;# select 查询列表 from 表名查询列表可以是：表中的字段、常量值、表达式、函数查询的结果是一个虚拟的表格#1.查询表中的单个字段SELECT last_name FROM employees;#2.查询表中的多个字段SELECT last_name,salary,email FROM employees;#3.查询表中所有字段（双击左侧） #方式一SELECT   `department_id`,             #这个符号是着重号，用于说明是字段而不是关键字``  `department_name`,  `manager_id`,  `location_id`  FROM   employees;#方式二SELECT * FROM employees ;#4.查询常量值SELECT 100;SELECT &#39;john&#39;;#（不区分字符和字符串）#5.查询表达式SELECT 100%98;                 #取余#6.查询函数SELECT VERSION();              #调用并得到返回值#7.起别名/*①便于理解②如果要查询的字段有重名的情况，使用别名可以区分开来*/#方式一:用asSELECT 100%98 AS 结果;SELECT last_name AS 姓, first_name AS 名 FROM employees;#方式二:空格SELECT last_name 姓，first_name 名 FROM employees;#案例：查询salary，显示结果为out putSELECT salary AS &quot;out put&quot; FROM employees;不能：SELECT salary AS &quot;out put&quot; FROM employees;因为有特殊符号的时候就用双引号引起来，单引号也行的，建议双引号。#8.去重distinct#案例：查询员工表涉及到的所有部门编号SELECT DISTINCT department_id FROM employees;#9. +号的作用/*java中的+号：①运算符：两个操作数都为数值型②连接符：只要有一个操作数为字符串mysql中的+号：仅仅只有一个功能：运算符select 100+90；select &#39;123&#39;+90; 其中一方为字符型，会试图将字符型数值转换成数值型                  如果转换成功则继续加法运算select &#39;john&#39;+90; 如果转换失败，则字符型数组值转换成0；select null+10;只要其中一方为null，则结果为null*/使用concat进行连接null和别人拼接的时候都是nullselect concat(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) AS 结果#案例：查询员工名和姓连接成一个字段，并显示为 姓名SELECT CONCAT(last_name,first_name) AS 姓名 FROM employees;不能：SELECT last_name + first_name AS 姓名 FROM employees;#10.判断是否为空#commission_pct是否为空？为空返回whatSELECT     IFNULL(commission_pct, what) AS 奖金率,    commission_pct FROM     employees;</code></pre><h3 id="3-2进阶2-条件查询"><a href="#3-2进阶2-条件查询" class="headerlink" title="3.2进阶2 - 条件查询"></a>3.2进阶2 - 条件查询</h3><pre><code>语法：    select        查询列表       第三步    from        表名           第一步    where        筛选条件;      第二步分类：    1.按条件表达式筛选    条件运算符: &gt;  &lt;  =    != or &lt;&gt;(不等于)    &gt;= &lt;=    2.按逻辑表达式筛选    逻辑运算符：   与&amp;&amp; 或|| 非!    sql推荐使用    and or not    作用：连接条件表达式    &amp;&amp; and 都1则1    || or 有1则1    ！ not 是0则1    3.模糊查询    like     between and    in     is null    is not null        </code></pre><h3 id="3-2-1按照条件表达式查询"><a href="#3-2-1按照条件表达式查询" class="headerlink" title="3.2.1按照条件表达式查询"></a>3.2.1按照条件表达式查询</h3><pre><code>#案例1：查询工资&gt;12000的员工信息SELECT    *FROM    employeesWHERE    salary &gt; 12000;#案例2：查询部门编号不等于90号的员工名和部门编号SELECT    last_name,    department_idFROM    employeesWHERE    department_id != 90;        #最好用&lt;&gt;</code></pre><h3 id="3-2-2按逻辑表达式筛选"><a href="#3-2-2按逻辑表达式筛选" class="headerlink" title="3.2.2按逻辑表达式筛选"></a>3.2.2按逻辑表达式筛选</h3><pre><code>#案例1：查询工资在10000到20000之间的员工名，工资和奖金SELECT    last_name,    salary,    commission_pctFROM    employeesWHERE    salary &gt;= 10000 AND salary &lt;= 20000;#案例2：查询部门编号不在90-120之间，或者工资高于15000的员工信息SELECT    *FROM    employeesWHERE    department_id &lt; 90 OR department_id &gt; 120 OR salary &gt; 15000;       WHERE    NOT(department_id &gt;= 90 AND department_id &lt;= 120) OR salary &gt; 15000;</code></pre><h3 id="3-2-3模糊查询"><a href="#3-2-3模糊查询" class="headerlink" title="3.2.3模糊查询"></a>3.2.3模糊查询</h3><pre><code>/*# 1.like:①一般和通配符搭配使用    通配符：    % 任意多个字符，可以是0个    _ 任意单个字符*/#案例1：查询员工名中包含字符a的员工信息SELECT    *FROM    employeesWHERE    last_name LIKE &#39;%a%&#39;;    %a%用于匹配，%代表通配符，代表任意个字符#案例2：查询员工名中第3个字符为n，第五个字符为l的员工名和工资SELECT    last_name,    salaryFROM    employeesWHERE    last_name LIKE &#39;__n_l%&#39;;#案例3：查询员工名中第二个字符为_的员工名（转义字符）    SELECT    last_nameFROM     employeesWHERE          last_name LIKE &#39;_\_%&#39;;        last_name LIKE &#39;_a_%&#39; ESCAPE &#39;a&#39;;     #a随便取的，为的仅仅是说明a是转义，可以用￥等随意，只需要说明就行    #------------------------------------------------##2. between and/*①使用between and可以提高语句的简洁度②包含临界值③两个临界值的位置不能调换，不会报错但效果不一样*/#案例1：查询员工编号在100到120之间的员工信息SELECT    *FROM    employeesWHERE    employee_id BETWEEN 100 AND 120;#------------------------------------------------#    #3. in/*含义：用于判断某字段的值是否属于in列表中的某一项特点：    ①使用in提高语句简洁度    ②in列表的值类型必须统一或者兼容    ③不支持通配符，相当于等号*/#案例：查询员工的工种编号是 IT_PROT, AD_VP, AD_PRES中的一个的员工名和工种编号SELECT    last_name,    job_idFROM    employeesWHERE    job_id=&#39;IT_PROT&#39; OR job_id=&#39;AD_VP&#39; OR job_id=&#39;AD_VP&#39;;方法二 - 用in：    WHERE    job_id IN (&#39;IT_PROT&#39; ,&#39;AD_VP&#39; , &#39;AD_VP&#39;);#------------------------------------------------#    #4. is null(is not null)/*=或者&lt;&gt;不能用于判断null值*/#案例1：查询没有奖金的员工名和奖金率SELECT    last_name,    commission_pctFROM    employeesWHERE    commission_pct IS NULL;####安全等于  &lt;=&gt;  is null可以换成&lt;=&gt; null#案例1：查询没有奖金的员工名和奖金率SELECT    last_name,    commission_pctFROM    employeesWHERE    commission_pct &lt;=&gt; NULL;#案例2：查询工资为12000的员工信息SELECT    last_name,    salaryFROM    employeesWHERE    salary &lt;=&gt; 12000;### 区别IS NULL ：仅仅可以判断NULL值&lt;=&gt;     ：既可以判断NULL值，又可以判断普通的数值。    ##函数重提 concat:拼接字符isnull:判断，如果是空值则返回1，不是则返回0ifnull:判断，如果是空值则返回一个给定值，不然则返回原本的值</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇是学习mysql的基础篇笔记&lt;/p&gt;</summary>
    
    
    
    <category term="默认分类" scheme="http://example.com/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
